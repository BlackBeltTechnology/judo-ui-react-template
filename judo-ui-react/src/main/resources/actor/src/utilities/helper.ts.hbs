//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    S O U R C E
// --------------------------------
// Factory expression: <actor>
// Path expression: 'src/utilities/helper.ts'
// Template name: actor/src/utilities/helper.ts
// Base URL: mvn:hu.blackbelt.judo.generator:judo-ui-react:1.0.0-SNAPSHOT
// Template file: actor/src/utilities/helper.ts.hbs

import type { JudoStored } from '../services/data-api/common/JudoStored';
import type { RandomUtils } from './interfaces';

export const exists = (element: any) => element !== undefined && element !== null;

export const simpleCloneDeep = <T>(input: T): T => {
  if (input === null || input === undefined) {
    return input;
  } else if (Array.isArray(input)) {
    return input.map(simpleCloneDeep) as T;
  } else if (input instanceof Date) {
    return input;
  } else if (input instanceof Set) {
    return new Set(Array.from(input).map(simpleCloneDeep)) as T;
  } else if (typeof input === 'object') {
    let payload: Record<string, any> = {};
    for (const key in input) {
      payload[key] = simpleCloneDeep(input[key]);
    }
    return payload as T;
  }
  return input;
};

export const stringToBooleanSelect = (booleanString?: string | null): boolean | null => {
  if (!booleanString || !booleanString.trim()) {
    return null;
  } else {
    return booleanString === 'true';
  }
};

export const booleanToStringSelect = (booleanParam?: boolean | null): string | null => {
  if (booleanParam === null || booleanParam === undefined) {
    return ' ';
  } else if (booleanParam) {
    return 'true';
  } else {
    return 'false';
  }
};

export const endWithSlash = (input: string): string => (input.endsWith('/') ? input : input + '/');

// only for testing purposes
export const delay = (ms: number) => new Promise((res) => setTimeout(res, ms));

export const GENERATOR_UUID_V4 = 'c8376ca5-6435-47e8-a8a0-18fba3a17807';

export const randomUtils: RandomUtils = {
  getGeneratorUUIDv4: () => GENERATOR_UUID_V4,
};

const pathCache: Map<string, string[]> = new Map();

export function getValue<T>(input: any, path: string, defaultValue?: any): T | null {
  if (input === undefined) {
    return defaultValue!;
  } else if (input === null) {
    return input;
  }
  if (!path.length) {
    return input as any;
  }

  let pathArray: string[];
  if (!pathCache.has(path)) {
    pathCache.set(path, path.replace(/\[(\w+)\]/g, '.$1').split('.'));
  }
  pathArray = pathCache.get(path)!;

  let result: any = input;

  for (let i = 0; i < pathArray.length; i++) {
    result = result[pathArray[i]];
    if (result === undefined || result === null) {
      break;
    }
  }

  return result === undefined ? defaultValue : result;
}

export function setValue(target: any, path: string, value: any): void {
  if (!path) {
    return;
  }
  if (path.includes('..') || path.includes('[]')) {
    throw new Error(`Invalid path syntax: ${path}!`);
  }

  let pathArray: string[];
  if (!pathCache.has(path)) {
    pathCache.set(path, path.replace(/\[(\w+)\]/g, '.$1').split('.').filter(s => s.trim().length));
  }
  pathArray = pathCache.get(path)!;

  let current = target;

  for (let i = 0; i < pathArray.length; i++) {
    const key = pathArray[i];
    const isLastKey = i === pathArray.length - 1;

    if (isLastKey) {
      current[key] = value;
    } else {
      if (current[key] === null || current[key] === undefined) {
        // Determine if the next key is a number to create an array or an object
        const nextKey = pathArray[i + 1];
        current[key] = isNaN(Number(nextKey)) ? {} : [];
      }
      current = current[key];
    }
  }
}

