{{> fragment.header.hbs }}

import { _NumericOperation, _StringOperation, _BooleanOperation, _EnumerationOperation } from '@judo/data-api-common';
import type { Filter, Operation, FilterOption } from '../components-api';
import { FilterType } from '../components-api';
import { dateToJudoDateString } from './helper';

type FilterBy = {
  value: any;
  operator: Operation;
};

export const mapFiltersToQueryCustomizerProperty = (filters: Filter[], property: string): FilterBy[] | undefined => {
  if (!filters.some((filter) => filter.filterOption.attributeName === property)) return undefined;

  const convertFilterValue = (filter: Filter): any => {
    if (filter.filterOption.filterType === FilterType.dateTime && filter.filterBy.value instanceof Date) {
      return filter.filterBy.value.toISOString();
    } else if (filter.filterOption.filterType === FilterType.date && filter.filterBy.value instanceof Date) {
      return dateToJudoDateString(filter.filterBy.value);
    }
    return filter.filterBy.value;
  }

  return filters
    .filter((filter) => filter.filterOption.attributeName === property && filter.filterBy.value)
    .map((filter) => {
      return {
        value: convertFilterValue(filter),
        operator: filter.filterBy.operator,
      };
    });
};

export interface MultiFilter {
  [key: string]: FilterBy[] | undefined;
}

export const mapAllFiltersToQueryCustomizerProperties = (filters: Filter[], ...properties: string[]): MultiFilter => {
  let output: MultiFilter = {};

  for (const property of properties) {
    output[property] = mapFiltersToQueryCustomizerProperty(filters, property);
  }

  return output;
};

export function applyInMemoryFilters<T>(filters: Filter[], data: T[]): T[] {
  let newData: T[] = [...data];

  for (const filter of filters) {
    const attributeName = filter.filterOption.attributeName as keyof T;
    switch (filter.filterOption.filterType) {
      case FilterType.string:
        switch (filter.filterBy.operator) {
          case _StringOperation.equal:
            newData = newData.filter(d => d[attributeName] === filter.filterBy.value);
            break;
          case _StringOperation.notEqual:
            newData = newData.filter(d => d[attributeName] !== filter.filterBy.value);
            break;
          case _StringOperation.like:
            newData = newData.filter(d => (d[attributeName] as string).toLowerCase().includes(filter.filterBy.value.toLowerCase()));
            break;
          case _StringOperation.greaterOrEqual:
            newData = newData.filter(d => (d[attributeName] as string).localeCompare(filter.filterBy.value) >= 0);
            break;
          case _StringOperation.greaterThan:
            newData = newData.filter(d => (d[attributeName] as string).localeCompare(filter.filterBy.value) > 0);
            break;
          case _StringOperation.lessOrEqual:
            newData = newData.filter(d => (d[attributeName] as string).localeCompare(filter.filterBy.value) <= 0);
            break;
          case _StringOperation.lessThan:
            newData = newData.filter(d => (d[attributeName] as string).localeCompare(filter.filterBy.value) < 0);
            break;
        }
        break;
      case FilterType.numeric:
        switch (filter.filterBy.operator) {
          case _NumericOperation.equal:
            newData = newData.filter(d => (d[attributeName] as number) === filter.filterBy.value);
            break;
          case _NumericOperation.notEqual:
            newData = newData.filter(d => (d[attributeName] as number) !== filter.filterBy.value);
            break;
          case _NumericOperation.lessThan:
            newData = newData.filter(d => (d[attributeName] as number) < filter.filterBy.value);
            break;
          case _NumericOperation.lessOrEqual:
            newData = newData.filter(d => (d[attributeName] as number) <= filter.filterBy.value);
            break;
          case _NumericOperation.greaterThan:
            newData = newData.filter(d => (d[attributeName] as number) > filter.filterBy.value);
            break;
          case _NumericOperation.greaterOrEqual:
            newData = newData.filter(d => (d[attributeName] as number) <= filter.filterBy.value);
            break;
        }
        break;
      case FilterType.boolean:
        switch (filter.filterBy.operator) {
          case _BooleanOperation.equals:
            newData = newData.filter(d => (d[attributeName] as boolean) === filter.filterBy.value);
            break;
        }
        break;
      case FilterType.enumeration:
        switch (filter.filterBy.operator) {
          case _EnumerationOperation.equals:
            newData = newData.filter(d => d[attributeName] === filter.filterBy.value);
            break;
          case _EnumerationOperation.notEquals:
            newData = newData.filter(d => d[attributeName] !== filter.filterBy.value);
            break;
        }
        break;
      default:
        console.error(`Unsupported filter type: ${JSON.stringify(filter, null, 4)}`);
    }
  }

  return newData;
}
