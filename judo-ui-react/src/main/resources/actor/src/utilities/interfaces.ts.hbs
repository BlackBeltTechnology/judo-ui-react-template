{{> fragment.header.hbs }}

import type { GridColDef } from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}';
import type { TFunction } from 'i18next';
import { ColumnsActionsOptions, TableRowAction } from './table-row-actions';

export type ColumnActionsProvider<R, RStored> = (
  id: string,
  actions: TableRowAction<R, RStored>[], t: TFunction<string, any>,
  isLoading: boolean,
  getSelectedRows: () => RStored[],
  ownerdata?: RStored,
  options?: ColumnsActionsOptions,
) => GridColDef[];

export type DialogResultReason = 'close' | 'submit' | 'submit-draft' | 'delete';

export interface DialogResult<T> {
  result: DialogResultReason;
  data?: T;
  openCreated?: boolean;
}

/**
 * This is a copy of the MUI Date and DateTime picker validation internal API. Since the source is considered internal
 * we cannot risk breaks due to those APIs being moved, etc... only if the types change.
 */
export interface BaseDateValidationProps {
  maxDate?: Date;
  minDate?: Date;
  disablePast?: boolean;
  disableFuture?: boolean;
}

export interface RandomUtils {
  getGeneratorUUIDv4: () => string;
}

export interface EnumOption<E> {
  id: string;
  i18nKey: string;
  i18nDefaultValue: string;
  value: E | null;
}
