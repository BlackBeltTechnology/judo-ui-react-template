{{> fragment.header.hbs }}

import type { Dispatch, SetStateAction } from 'react';
import { format, parse } from 'date-fns';
import type { TFunction } from 'i18next';

export function passesLocalValidation<T>(data: T, requiredByRecord: Record<string, boolean>, t: TFunction<string, any>, setValidation: Dispatch<SetStateAction<Map<keyof T, string>>>): boolean {
  const failsRequired = (input: any): boolean => input === null || input === undefined || input === '';
  const errorList: string[] = [];
  for (const attr in requiredByRecord) {
    if (failsRequired(data[attr as keyof T] as any) && requiredByRecord[attr]) {
      errorList.push(attr);
    }
  }
  if (errorList.length > 0) {
    const message = t('judo.error.validation-failed.MISSING_REQUIRED_ATTRIBUTE', { defaultValue: 'Missing required attribute.' }) as string;

    setValidation((prevValidation) => {
      const copy = new Map<keyof T, string>(prevValidation);
      for (const errorAttr of errorList) {
        copy.set(errorAttr as keyof T, message);
      }
      return copy;
    });
    return false;
  }
  return true;
}
