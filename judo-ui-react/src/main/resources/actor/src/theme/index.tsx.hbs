{{> fragment.header.hbs }}

import type { ReactNode } from 'react';
import { useMemo } from 'react';
import { createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import StyledEngineProvider from '@mui/material/StyledEngineProvider';
import { amber, deepOrange, grey } from '@mui/material/colors';
import { ThemeProvider } from '@mui/material/styles';
import type { Theme } from '@mui/material/styles';
import type {} from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}/themeAugmentation';
import { {{ muiTranslationToken (getDefaultLanguage application) '' }} as {{ muiTranslationToken (getDefaultLanguage application) 'ForMaterial' }} } from '@mui/material/locale';
import { {{ muiTranslationToken (getDefaultLanguage application) '' }} as {{ muiTranslationToken (getDefaultLanguage application) 'ForGrids' }} } from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}/locales';
import { {{ muiTranslationToken (getDefaultLanguage application) '' }} as {{ muiTranslationToken (getDefaultLanguage application) 'ForDatePickers' }} } from '@mui/x-date-pickers{{ getMUIPickersPlanSuffix }}/locales';
import { useConfig } from '../hooks';
import { mainContainerPadding } from './extras';
import { paletteThemeLight, paletteThemeDark } from './palette';
import { density } from './density';
import { typography } from './typography';

const baseTheme = (paletteTheme: Theme) => createTheme(
  paletteTheme,
  {
    spacing: (factor: number) => `${density.spacingMultiplier * factor}rem`,
    typography: {
      ...typography,
      button: {
        fontSize: `${density.fontSize}rem`,
        textTransform: 'none',
      },
    },
    mixins: {
      MuiDataGrid: {
        containerBackground: 'rgba(0, 0, 0, 0)',
      },
    },
    components: {
      MuiAppBar: {
        styleOverrides: {
          colorPrimary: {
            backgroundColor: paletteTheme.palette.background.default,
          },
        },
      },
      MuiButton: {
        defaultProps: {
          variant: 'contained',
          size: density.buttonSize,
        },
        styleOverrides: {
          root: {
            borderRadius: density.borderRadius,
          },
        },
      },
      MuiLoadingButton: {
        defaultProps: {
          variant: 'contained',
          size: density.buttonSize,
        },
        styleOverrides: {
          root: {
            borderRadius: density.borderRadius,
          },
        },
      },
      MuiTab: {
        styleOverrides: {
          root: {
            '&.JUDO-nestedError': {
              color: paletteTheme.palette.error.main,
            },
          },
        },
      },
      MuiFormControl: {
        styleOverrides: {
          root: {
            margin: 0,
          },
        },
      },
      MuiFormControlLabel: {
        styleOverrides: {
          root: {
            '&.checkbox > .MuiFormControlLabel-label': {
              fontSize: `${density.fontSize}rem`,
            },
          },
        },
      },
      MuiDialogTitle: {
        styleOverrides: {
          root: {
            fontSize: '1rem',
            fontWeight: 500
          }
        }
      },
      MuiDialogContent: {
        styleOverrides: {
          root: {
            backgroundColor: paletteTheme.palette.background.default,
          },
        },
      },
      MuiFormLabel: {
        styleOverrides: {
          asterisk: { color: 'red' },
          root: {
            '&.Mui-required': {
              fontWeight: 900,
            },
          },
        },
      },
      {{> actor/src/theme/index.ts.mui-input-base.fragment.hbs }}
      MuiInputLabel: {
        styleOverrides: {
          root: {
            color: paletteTheme.palette.subtitleColor.main,
            fontWeight: 500,
            '&.Mui-focused': {
              color: paletteTheme.palette.subtitleColor.main,
            },
          },
        },
      },
      {{> actor/src/theme/index.ts.mui-text-field.fragment.hbs }}
      MuiAutocomplete: {
        defaultProps: {
          fullWidth: true,
          variant: 'filled',
          color: 'secondary',
        },
        styleOverrides: {
          root: {
            '.AggregationInputButtonGroup': {
              position: 'absolute',
              top: 'calc(50% - 14px)', // MUI internals have the same burned in values...
              right: 8,
            },
            '.AggregationInputButtonGroup .AggregationInputLoading': {
              margin: 'auto 0',
            },
            '.MuiInputBase-root.MuiInputBase-formControl.MuiAutocomplete-inputRoot': {
              paddingRight: '85px',
            },
          },
        },
      },
      MuiRadio: {
        defaultProps: {
          color: 'secondary',
        },
      },
      MuiSelect: {
        styleOverrides: {
          filled: {
            '&:focus': {
              backgroundColor: 'transparent',
            },
          },
        },
      },
      {{> actor/src/theme/index.ts.mui-data-grid.fragment.hbs }}
      {{# if isMUILicensePlanPro }}
          {{> actor/src/theme/index.ts.mui-data-grid-pro.fragment.hbs }}
      {{/ if }}
      MuiPaper: {
        styleOverrides: {
          rounded: {
            boxShadow: '0px 0px 8px 1px rgba(0,0,0,0.05)',
            borderRadius: density.borderRadius,
          },
        },
      },
      MuiDrawer: {
        styleOverrides: {
          paper: {
            border: 'none',
            boxShadow: '0px 0px 8px 1px rgba(0,0,0,0.05)',
          },
        },
      },
      MuiButtonGroup: {
        defaultProps: {
          size: density.buttonSize,
        },
      },
      MuiIconButton: {
        defaultProps: {
          size: density.buttonSize,
        },
      },
      MuiTooltip: {
        styleOverrides: {
          tooltip: {
            borderRadius: 4,
          },
        },
      },
      MuiDivider: {
        styleOverrides: {
          root: {
            backgroundColor: 'rgb(255,255,255,0.15)',
          },
          middle: {
            marginTop: 8,
            marginBottom: 8,
          },
        },
      },
      MuiList: {
        styleOverrides: {
          root: {
            '.MuiListSubheader-root': {
              color: paletteTheme.palette.subtitleColor.main,
            },
          },
        },
        defaultProps: {
          dense: density.isListDense,
        },
      },
      MuiListItemText: {
        styleOverrides: {
          root: {
            '> span': {
              fontSize: `${density.fontSize}rem`,
            },
          },
        },
      },
      MuiListItemIcon: {
        styleOverrides: {
          root: {
            color: 'inherit',
            minWidth: '34px',
            // marginRight: paletteTheme.spacing(2),
          },
        },
      },
      MuiAvatar: {
        styleOverrides: {
          root: {
            width: 32,
            height: 32,
          },
        },
      },
      MuiCard: {
        styleOverrides: {
          root: {
            width: '100%',
            length: '100%',
          },
        },
      },
    },
  },
  {{ muiTranslationToken (getDefaultLanguage application) 'ForMaterial' }},
  {{ muiTranslationToken (getDefaultLanguage application) 'ForGrids' }},
  {{ muiTranslationToken (getDefaultLanguage application) 'ForDatePickers' }},
);

declare module '@mui/material/styles' {
  interface Palette {
    subtitleColor: Palette['primary'];
  }

  // allow configuration using `createTheme`
  interface PaletteOptions {
    subtitleColor?: PaletteOptions['primary'];
  }
}

export { density, mainContainerPadding, baseTheme };

type ThemeCustomizationProps = {
  children: ReactNode;
};

export function ThemeCustomization({ children }: ThemeCustomizationProps) {
  const { mode } = useConfig();

  const theme = useMemo(
    () =>
      createTheme({
        ...baseTheme(mode === 'light' ? paletteThemeLight : paletteThemeDark),
        // palette: {
        //   mode,
        // },
      }),
    [mode],
  );

  return (
    <StyledEngineProvider injectFirst>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        {children}
      </ThemeProvider>
    </StyledEngineProvider>
  );
}
