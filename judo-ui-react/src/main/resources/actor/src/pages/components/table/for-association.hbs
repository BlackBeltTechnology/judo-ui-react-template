import { Box, Typography } from '@mui/material';
import {
    {{# each (getApiImportsForViewPage page) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import {
    {{ classServiceName table.dataElement.owner }}Impl,
    {{# neq (classServiceName table.dataElement.owner) (classServiceName table.dataElement.target) }}
        {{ classServiceName table.dataElement.target }}Impl,
    {{/ neq }}
} from '~/generated/data-axios';
{{# if (tableHasActionsToImport table) }}
    import {
        {{# each (getFilteredTableActions table) as |action| }}
            {{ actionFunctionHookName action }},
        {{/ each }}
    } from '../actions';
{{/ if }}
import { GridLogicOperator } from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}';

export const {{ getCustomizationComponentInterfaceKey table }} = '{{ getCustomizationComponentInterface table }}';

export interface {{ tableComponentName table }}Props {
    ownerData: JudoIdentifiable<{{ classDataName table.dataElement.owner '' }}>;
    isOwnerLoading: boolean;
    fetchOwnerData: () => Promise<void>;
    editMode: boolean;
    isFormUpdateable: () => boolean;
    storeDiff: (attributeName: keyof {{ classDataName table.dataElement.owner 'Stored' }}, value: any) => void;
    refreshCounter: number;
    validation: Map<keyof {{ classDataName table.dataElement.owner '' }}, string>;
}

export const {{ tableComponentName table }} = forwardRef<RefreshableTable, {{ tableComponentName table }}Props>((props, ref) => {
    const { getItemParsedWithDefault, setItemStringified } = useDataStore('sessionStorage');
    const { ownerData, isOwnerLoading, fetchOwnerData, editMode, isFormUpdateable, refreshCounter } = props;
    const { t } = useTranslation();
    const { openFilterDialog } = useFilterDialog();
    const { openRangeDialog } = useRangeDialog();
    const { downloadFile, extractFileNameFromToken, uploadFile } = fileHandling();
    const { locale: l10nLocale } = useL10N();
    const handleFetchError = useErrorHandler(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Fetch))`);
    {{# if (stringValueIsTrue useTableRowHighlighting) }}
    const { service: rowHighlightingHook } = useTrackService<TableRowHighlightingHook<{{ classDataName table.dataElement.target 'Stored' }}>>(`(&(${OBJECTCLASS}=${TABLE_ROW_HIGHLIGHTING_HOOK_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey table ~}} }))`);
    const rowHighlighting = rowHighlightingHook && rowHighlightingHook();
    const rowStylings: RowStylerConfigured<{{ classDataName table.dataElement.target 'Stored' }}>[] = useMemo(() => {
        return rowHighlighting ? rowHighlighting() : [];
    }, [rowHighlighting]);
    {{/ if }}
    const openCRUDDialog = useCRUDDialog();

    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [data, setData] = useState<GridRowModel<{{ classDataName table.dataElement.target 'Stored' }}>[]>([]);
    const [rowCount, setRowCount] = useState<number>(0);
    const [sortModel, setSortModel] = useState<GridSortModel>({{{ getDefaultSortParamsForTable table }}});
    const filterModelKey = `{{ createId table }}-${ownerData.__signedIdentifier}-filterModel`;
    const filtersKey = `{{ createId table }}-${ownerData.__signedIdentifier}-filters`;
    const [filterModel, setFilterModel] = useState<GridFilterModel>(getItemParsedWithDefault(filterModelKey, { items: [] }));
    const [filters, setFilters] = useState<Filter[]>(getItemParsedWithDefault(filtersKey, []));
    const [lastItem, setLastItem] = useState<{{ classDataName table.dataElement.target 'Stored' }}>();
    const [firstItem, setFirstItem] = useState<{{ classDataName table.dataElement.target 'Stored' }}>();
    const [isNextButtonEnabled, setIsNextButtonEnabled] = useState<boolean>(true);
    const [page, setPage] = useState<number>(0);
    const [queryCustomizer, setQueryCustomizer] = useState<{{ classDataName table.dataElement.target 'QueryCustomizer' }}>({
        _mask: '{{ table.formattedMask }}',
        _seek: {
            limit: {{ calculateTablePageLimit table }} + 1,
        },
        _orderBy: sortModel.length ? [
            {
                attribute: sortModel[0].field,
                descending: sortModel[0].sort === 'desc',
            },
        ] : [],
        ...mapAllFiltersToQueryCustomizerProperties(filters),
    });
    {{# if isDebugPrint }}// include: actor/src/fragments/table/row-selection.fragment.hbs{{/ if }}
    {{> actor/src/fragments/table/row-selection.fragment.hbs table=table }}

    {{# if isDebugPrint }}// include: actor/src/fragments/table/hook-variables.fragment.hbs{{/ if }}
    {{> actor/src/fragments/table/hook-variables.fragment.hbs table=table }}

    {{# each (getFilteredTableActions table) as |action| }}
        {{# if action.isFilterRelationAction }}
            const {{ actionFunctionName action }} = {{ actionFunctionHookName action }}(setFilters, setPage, setQueryCustomizer, openFilterDialog, {{ calculateTablePageLimit table }});
        {{ else }}
            const {{ actionFunctionName action }} = {{ actionFunctionHookName action }}();
        {{/ if }}
    {{/ each }}

    const filterOptions: FilterOption[] = [
        {{# each table.filters as |filter| }}
            {{# if isDebugPrint }}// include: actor/src/fragments/table/filter-option.fragment.hbs{{/ if }}
            {{> actor/src/fragments/table/filter-option.fragment.hbs filter=filter application=application }}
        {{/ each }}
    ];

    const rowActions: TableRowAction<{{ classDataName table.dataElement.target 'Stored' }}>[] = [
        {{# each table.rowActions as |action| }}
            {{# if action.isRemoveAction }}
                {
                    id: '{{ createId action }}',
                    label: t('judo.pages.table.remove', { defaultValue: 'Remove' }) as string,
                    icon: <MdiIcon path="{{ action.icon.name }}" />,
                    action: async (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{ actionFunctionName action }}(ownerData, row, () => {
                        fetchOwnerData();
                    }),
                    disabled: (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{# if table.enabledBy }}!ownerData.{{ table.enabledBy.name }} ||{{/ if }} isLoading,
                },
            {{/ if }}
            {{# if action.isDeleteAction }}
                {
                    id: '{{ createId action }}',
                    label: t('judo.pages.table.delete', { defaultValue: 'Delete' }) as string,
                    icon: <MdiIcon path="{{ action.icon.name }}" />,
                    action: async (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{ actionFunctionName action }}(ownerData, row, () => {
                        fetchOwnerData();
                    }),
                    disabled: (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{# if table.enabledBy }}!ownerData.{{ table.enabledBy.name }} ||{{/ if }} !row.__deleteable || isLoading,
                },
            {{/ if }}
            {{# if action.isCallOperationAction }}
                {
                    id: '{{ createId action }}',
                    label: t('{{ getTranslationKeyForAction action }}', { defaultValue: '{{ action.label }}' }) as string,
                    icon: <MdiIcon path="{{ action.icon.name }}" />,
                    action: async (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{ actionFunctionName action }} (row, () => {
                      fetchOwnerData();
                    }),
                },
            {{/ if }}
        {{/ each }}
    ];

    {{# if (tableHasDeleteAction table) }}
      const bulkDeleteSelected = useCallback(() => {
        openCRUDDialog<{{ classDataName table.dataElement.target 'Stored' }}>({
          dialogTitle: t('judo.dialogs.crud-bulk.delete.title', { defaultValue: 'Delete selected items' }),
          {{# with (getFirstTitleColumnForTable table) as |column| }}
            itemTitleFn: (item) => item.{{ column.attributeType.name }}!,
          {{ else }}
            itemTitleFn: (item) => t('judo.placeholder', { defaultValue: 'placeholder' }) as string,
          {{/ with }}
          selectedItems: selectedRows.current,
          action: async (item, successHandler: () => void, errorHandler: (error: any) => void) => {
            {{# each table.rowActions as |action| }}
              {{# if action.isDeleteAction }}
                await {{ actionFunctionName action }}({{# unless table.dataElement.isAccess }}ownerData, {{/ unless }}item, successHandler, errorHandler, true);
              {{/ if }}
            {{/ each }}
          },
          onClose: (needsRefresh) => {
            if (needsRefresh) {
              fetchOwnerData();
              setSelectionModel([]); // not resetting on fetchData because refreshes would always remove selections...
            }
          },
        });
      }, [{{# unless table.dataElement.isAccess }}ownerData{{/ unless }}]);
      const isBulkDeleteAvailable: () => boolean = useCallback(()=> {
        // every row has the same `__deleteable` flag
        return !!selectionModel.length && {{# if table.enabledBy }}ownerData.{{ table.enabledBy.name }}{{ else }}true{{/ if }} && !{{ boolValue table.dataElement.isReadOnly }} && !!data[0]?.__deleteable;
      }, [ownerData, data, selectionModel]);
    {{/ if }}
    {{# if (tableHasRemoveAction table) }}
      const bulkRemoveSelected = useCallback(() => {
        openCRUDDialog<{{ classDataName table.dataElement.target 'Stored' }}>({
          dialogTitle: t('judo.dialogs.crud-bulk.remove.title', { defaultValue: 'Remove selected items' }),
          {{# with (getFirstTitleColumnForTable table) as |column| }}
            itemTitleFn: (item) => item.{{ column.attributeType.name }}!,
          {{ else }}
            itemTitleFn: (item) => t('judo.placeholder', { defaultValue: 'placeholder' }) as string,
          {{/ with }}
          selectedItems: selectedRows.current,
          action: async (item, successHandler: () => void, errorHandler: (error: any) => void) => {
            {{# each table.rowActions as |action| }}
              {{# if action.isRemoveAction }}
                await {{ actionFunctionName action }}(ownerData, item, successHandler, errorHandler);
              {{/ if }}
            {{/ each }}
          },
          onClose: (needsRefresh) => {
            if (needsRefresh) {
              fetchOwnerData();
              setSelectionModel([]); // not resetting on fetchData because refreshes would always remove selections...
            }
          },
        });
      }, [ownerData]);
      const isBulkRemoveAvailable: () => boolean = useCallback(()=> {
        return !!selectionModel.length && {{# if table.enabledBy }}ownerData.{{ table.enabledBy.name }}{{ else }}true{{/ if }} && !{{ boolValue table.dataElement.isReadOnly }};
      }, [ownerData, selectionModel]);
    {{/ if }}
    {{# each (getBulkOperationActionsForTable table) as |action| }}
      const {{ actionFunctionName action }}BulkCall = async (item: {{ classDataName table.dataElement.target 'Stored' }}, successHandler: () => void, errorHandler: (error: any) => void) => {
        await {{ actionFunctionName action }}(item, successHandler, errorHandler, true);
      }
    {{/ each }}
    {{# if (tableHasBulkOperations table) }}
      const bulkCallOperation = useCallback((title: string, actionName: string, action: (item: {{ classDataName table.dataElement.target 'Stored' }}, successHandler: () => void, errorHandler: (error: any) => void) => Promise<void>) => {
        openCRUDDialog<{{ classDataName table.dataElement.target 'Stored' }}>({
          dialogTitle: title,
          {{# with (getFirstTitleColumnForTable table) as |column| }}
            itemTitleFn: (item) => item.{{ column.attributeType.name }}!,
          {{ else }}
            itemTitleFn: (item) => t('judo.placeholder', { defaultValue: 'placeholder' }) as string,
          {{/ with }}
          selectedItems: selectedRows.current,
          action: action,
          onClose: (needsRefresh) => {
            if (needsRefresh) {
              fetchOwnerData();
              setSelectionModel([]); // not resetting on fetchData because refreshes would always remove selections...
            }
          },
          faultPrefix: `{{ classServiceTypeName table.dataElement.target }}.${actionName}`,
        });
      }, []);

      const isBulkOperationAvailable: () => boolean = useCallback(() => {
        return !!selectionModel.length;
      }, [selectionModel]);
    {{/ if }}

    {{# if (stringValueIsTrue useTableContextMenus) }}
        const contextMenuRef = useRef<ContextMenuApi>(null);

        const handleContextMenu = (event: MouseEvent<HTMLElement>) => {
            contextMenuRef.current?.handleContextMenu(event);
        };
    {{/ if }}

    {{# if isUseInlineColumnFilters }}
    function handleFilterModelChange (newModel: GridFilterModel) {
        setFilterModel(newModel);
        setItemStringified(filterModelKey, newModel);

        if (newModel.items.every(i => i.value !== undefined)) {
            const newFilters: Filter[] = mapFilterModelToFilters(newModel, filterOptions);

            if (Array.isArray(newFilters)) {
                handleFiltersChange(newFilters);
            }
        }
    }
    {{/ if }}

    const handleFiltersChange = (newFilters: Filter[]) => {
        setPage(0);
        setFilters(newFilters);
        setItemStringified(filtersKey, newFilters);

        setQueryCustomizer((prevQueryCustomizer: {{ classDataName table.dataElement.target 'QueryCustomizer' }}) => {
            // remove previous filter values, so that we can always start with a clean slate
            for (const name of {{ table.dataElement.name }}Columns.map(c => c.field)) {
                delete (prevQueryCustomizer as any)[name];
            }
            return {
                ...prevQueryCustomizer,
                _seek: {
                    limit: {{ calculateTablePageLimit table }} + 1,
                },
                ...mapAllFiltersToQueryCustomizerProperties(newFilters),
            };
        });
    };

    function handleSortModelChange (newModel: GridSortModel) {
        setPage(0);
        setSortModel(newModel);

        const _orderBy = newModel.filter(m => m.sort).map(m => ({
            attribute: m.field,
            descending: m.sort === 'desc',
        }));

        setQueryCustomizer((prevQueryCustomizer) => {
            const strippedQueryCustomizer: {{ classDataName table.dataElement.target 'QueryCustomizer' }} = {
              ...prevQueryCustomizer
            };
            if (!!strippedQueryCustomizer._seek) {
              delete strippedQueryCustomizer._seek.lastItem;
            }
            return {
                ...strippedQueryCustomizer,
                _orderBy,
            };
        });
    }

    async function handlePageChange (isNext: boolean) {
        setQueryCustomizer((prevQueryCustomizer) => {
            return {
                ...prevQueryCustomizer,
                _seek: {
                    limit: isNext ? {{ calculateTablePageLimit table }} + 1 : {{ calculateTablePageLimit table }},
                    reverse: !isNext,
                    lastItem: isNext ? lastItem : firstItem,
                },
            };
        });

        setIsNextButtonEnabled(!isNext);
    }

    async function fetchData() {
        if (ownerData && ownerData.__signedIdentifier) {
            setIsLoading(true);

            try {
                const res = await {{ classServiceName table.dataElement.owner }}Impl.get{{ ucFirst table.dataElement.name }}(
                    ownerData,
                    processQueryCustomizer(queryCustomizer),
                );

                if (res.length > {{ calculateTablePageLimit table }}) {
                    setIsNextButtonEnabled(true);
                    res.pop();
                } else if (queryCustomizer._seek?.limit === {{ calculateTablePageLimit table }} + 1) {
                    setIsNextButtonEnabled(false);
                }

                setData(res);
                setFirstItem(res[0]);
                setLastItem(res[res.length - 1]);
                setRowCount(res.length || 0);
            } catch (error) {
                handleFetchError(error);
            } finally {
                setIsLoading(false);
            }
        }
    }

    useImperativeHandle(ref, () => ({
        fetchData,
    }));

    useEffect(() => {
        fetchData();
    }, [queryCustomizer, refreshCounter]);

    return (
        <>
            <StripedDataGrid
                { ...baseTableConfig }
                {{# if isMUILicensePlanPro }}
                    initialState={ { pinnedColumns: { right: ['actions'] } } }
                {{/ if }}
                pageSizeOptions={[{{ calculateTablePageLimit table }}]}
                sx={ {
                    // overflow: 'hidden',
                    display: 'grid',
                    border: (theme) => props.validation.has('{{ table.dataElement.name }}') ? `2px solid ${theme.palette.error.main}` : undefined,
                    {{# if (stringValueIsTrue useTableRowHighlighting) }}
                    ...transformRowStylings(rowStylings),
                    {{/ if }}
                } }
                slotProps={ {
                {{# if (stringValueIsTrue useTableContextMenus) }}
                  cell: {
                    onContextMenu: handleContextMenu,
                  },
                {{/ if }}
                  filterPanel: {
                    logicOperators: [GridLogicOperator.And],
                  },
                } }
                getRowId={(row: { __identifier: string }) => row.__identifier}
                loading={ isLoading }
                rows={ data }
                getRowClassName={ (params: GridRowClassNameParams) => {
                    {{# if (stringValueIsTrue useTableRowHighlighting) }}
                        const customStyle = rowStylings.find(r => r.condition(params));
                        if (customStyle) {
                            return customStyle.name;
                        }
                    {{/ if }}
                    return params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd';
                } }
                columns={[ ...{{ table.dataElement.name }}Columns, ...columnsActionCalculator('{{ createId table.dataElement }}', rowActions, t, { shownActions: 2 }) ]}
                disableRowSelectionOnClick
                {{# if (tableHasSelectorColumn table) }}
                    checkboxSelection
                    rowSelectionModel={selectionModel}
                    onRowSelectionModelChange={(newRowSelectionModel) => {
                      setSelectionModel(newRowSelectionModel);
                    }}
                {{/ if }}
                keepNonExistentRowsSelected
                {{# each table.rowActions as |action| }}
                    {{# if action.isViewAction }}
                        onRowClick={ (params: GridRowParams<{{ classDataName table.dataElement.target 'Stored' }}>) => {{ actionFunctionName action }}(ownerData, params.row, () => fetchOwnerData()) }
                    {{/ if }}
                {{/ each }}
                sortModel={ sortModel }
                onSortModelChange={ handleSortModelChange }
                {{# if isUseInlineColumnFilters }}
                filterModel={filterModel}
                onFilterModelChange={handleFilterModelChange}
                {{/ if }}
                components={ {
                    Toolbar: () => (
                        <GridToolbarContainer>
                            {{# each (getFilteredTableActions table) as |action| }}
                                {{# if action.isFilterRelationAction }}
                                    {{# unless isUseInlineColumnFilters }}
                                    <Button
                                        id="{{ createId action }}"
                                        startIcon={<MdiIcon path="filter" />}
                                        variant="text"
                                        onClick={ () => {
                                            {{ actionFunctionName action }}('{{ createId action }}-filter', filterOptions, filters);
                                        } }
                                        disabled={isLoading}
                                    >
                                        {t('judo.pages.table.set-filters', { defaultValue: 'Set filters' }) + (filters.length !== 0 ? ' (' + filters.length + ')' : '')}
                                    </Button>
                                    {{ else }}
                                    <GridToolbarFilterButton componentsProps={ { button: { variant: 'text' } } }  />
                                    {{/ unless }}
                                {{/ if }}
                                {{# if action.isCreateAction }}
                                    <Button
                                        id="{{ createId action }}"
                                        startIcon={<MdiIcon path="file_document_plus" />}
                                        variant="text"
                                        onClick={ () => {{ actionFunctionName action }}(ownerData, () => fetchOwnerData()) }
                                        disabled={
                                               editMode
                                            || isLoading
                                            || {{# if table.enabledBy }}!ownerData.{{ table.enabledBy.name }} ||{{/ if }} {{ boolValue table.dataElement.isReadOnly }}
                                            || !isFormUpdateable()
                                        }
                                    >
                                        {t('judo.pages.table.create', { defaultValue: 'Create' })}
                                    </Button>
                                {{/ if }}
                                {{# if action.isAddAction }}
                                    <Button
                                        id="{{ createId action }}-add"
                                        startIcon={<MdiIcon path="attachment-plus" />}
                                        variant="text"
                                        onClick={ async () => {
                                            {{ actionFunctionName action }}(ownerData, () => fetchOwnerData())
                                        } }
                                        disabled={ {{# if table.enabledBy }}!ownerData.{{ table.enabledBy.name }} ||{{/ if }} isLoading }
                                    >
                                        {t('judo.pages.table.add', { defaultValue: 'Add' })}
                                    </Button>
                                {{/ if }}
                                {{# if action.isClearAction }}
                                    <Button
                                        id="{{ createId action }}-clear"
                                        startIcon={<MdiIcon path="link_off" />}
                                        variant="text"
                                        onClick={ async () => {
                                            {{ actionFunctionName action }}(ownerData, () => fetchOwnerData())
                                        } }
                                        disabled={ {{# if table.enabledBy }}!ownerData.{{ table.enabledBy.name }} ||{{/ if }} isLoading }
                                    >
                                        {t('judo.pages.table.clear', { defaultValue: 'Clear' })}
                                    </Button>
                                {{/ if }}
                            {{/ each }}
                            {{# if (tableHasRemoveAction table) }}
                                {isBulkRemoveAvailable() ? <Button
                                    id="{{ createId table.dataElement }}-bulk-remove"
                                    disabled={isLoading}
                                    variant="text"
                                    startIcon={<MdiIcon path="link-off" />}
                                    onClick={bulkRemoveSelected}>
                                    {t('judo.pages.table.remove.selected', { defaultValue: 'Remove' })}
                                </Button> : null}
                            {{/ if }}
                            {{# if (tableHasDeleteAction table) }}
                                {isBulkDeleteAvailable() ? <Button
                                    id="{{ createId table.dataElement }}-bulk-delete"
                                    disabled={isLoading}
                                    variant="text"
                                    startIcon={<MdiIcon path="delete-forever" />}
                                    onClick={bulkDeleteSelected}>
                                    {t('judo.pages.table.delete.selected', { defaultValue: 'Delete' })}
                                </Button> : null}
                            {{/ if }}
                            {{# each (getBulkOperationActionsForTable table) as |bulkOp| }}
                                {isBulkOperationAvailable() ? <Button
                                    id="{{ createId bulkOp }}-bulk-call-operation"
                                    disabled={ isOwnerLoading{{# if bulkOp.enabledBy }} || selectedRows.current.some(r => !r.{{ bulkOp.enabledBy.name }}){{/ if }} }
                                    variant="text"
                                    {{# if bulkOp.icon }}
                                    startIcon={<MdiIcon path="{{ bulkOp.icon.name }}" />}
                                    {{/ if }}
                                    onClick={() => bulkCallOperation(t('{{ getTranslationKeyForAction bulkOp }}', { defaultValue: '{{ bulkOp.label }}' }), '{{ bulkOp.dataElement.name }}', {{ actionFunctionName bulkOp }}BulkCall)}>
                                    {t('{{ getTranslationKeyForAction bulkOp }}', { defaultValue: '{{ bulkOp.label }}' })}
                                </Button> : null}
                            {{/ each }}
                            <div>{/* Placeholder */}</div>
                        </GridToolbarContainer>
                    ),
                    Pagination: () => (
                        <CustomTablePagination
                            pageChange={handlePageChange}
                            isNextButtonEnabled={isNextButtonEnabled}
                            page={page}
                            setPage={setPage}
                            rowPerPage={ {{ calculateTablePageLimit table }} }
                        />
                    ),
                } }
            />
            {{> actor/src/fragments/table/error-feedback.fragment.hbs }}
            {{# if (stringValueIsTrue useTableRowHighlighting) }}
                <RowHighlightLegend rowStylings={rowStylings} />
            {{/ if }}
            {{# if (stringValueIsTrue useTableContextMenus) }}
                <ContextMenu
                      ref={contextMenuRef}
                      data={data}
                      filters={filters}
                      filterOptions={filterOptions}
                      columns={ {{ table.dataElement.name }}Columns }
                      onFilterByCell={ (filter: Filter) => {
                          {{# if isUseInlineColumnFilters }}
                              handleFilterModelChange({
                                  ...filterModel,
                                  items: [...filterModel.items, mapFilterToFilterModel(filter)],
                              });
                          {{ else }}
                              handleFiltersChange([...filters, filter]);
                          {{/ if }}
                      } }
                      onExcludeByCell={ (filter: Filter) => {
                          {{# if isUseInlineColumnFilters }}
                              handleFilterModelChange({
                                  ...filterModel,
                                  items: [...filterModel.items, mapFilterToFilterModel(filter)],
                              });
                          {{ else }}
                              handleFiltersChange([...filters, filter]);
                          {{/ if }}
                      } }
                />
            {{/ if }}
        </>
    );
});
