{{> fragment.header.hbs }}
// Action: NavigateToPageAction

import { OBJECTCLASS } from '@pandino/pandino-api';
import { useTrackService } from '@pandino/react-hooks';
import type { JudoIdentifiable } from '@judo/data-api-common';
import { useJudoNavigation } from '~/components';
import {
    {{# each (getApiImportsForRowAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import {
    {{# if action.dataElement.isCollection }}
        routeTo{{ pageName action.target }},
    {{ else }}
        routeTo{{ pageName (getViewPageForPage action.target) }},
    {{/ if }}
} from '~/routes';

export const {{ getCustomizationActionFunctionInterfaceKey action }} = '{{ actionFunctionTypeName action }}';
export type {{ actionFunctionTypeName action }} = () => (owner: JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>{{# unless action.dataElement.isCollection}}, target: JudoIdentifiable<{{ classDataName action.dataElement.target '' }}>{{/ unless }}) => Promise<void>;

export const {{ actionFunctionHookName action }}: {{ actionFunctionTypeName action }} = () => {
    const { navigate } = useJudoNavigation();
    const { service: useCustomNavigation } = useTrackService<{{ actionFunctionTypeName action }}>(`(${OBJECTCLASS}=${ {{ getCustomizationActionFunctionInterfaceKey action }} })`);

    if (useCustomNavigation) {
        const customNavigation = useCustomNavigation();
        return customNavigation;
    }

    return async function (owner: JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>{{# unless action.dataElement.isCollection}}, target: JudoIdentifiable<{{ classDataName action.dataElement.target '' }}>{{/ unless }}) {
        {{# if action.dataElement.isCollection }}
            navigate(routeTo{{ pageName action.target }}(owner.__signedIdentifier));
        {{ else }}
            navigate(routeTo{{ pageName (getViewPageForPage action.target) }}(target.__signedIdentifier));
        {{/ if }}
    }
};
