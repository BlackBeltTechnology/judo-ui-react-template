const {{ simpleActionDefinitionName action.actionDefinition }} = async ({{# if action.actionDefinition.targetType }}templateDataOverride?: Partial<{{ classDataName action.actionDefinition.targetType '' }}>, {{/ if}}) => {
  const { result, data: returnedData, openCreated } = await open{{ actionTargetPageName action }}({
    {{# if page.container.table }}
      {{# if (pageHasSignedId page) }}
        ownerData: { __signedIdentifier: signedIdentifier } as any,
      {{ else }}
        ownerData: null,
      {{/ if }}
    {{ else }}
      ownerData: data,
    {{/ if }}
    {{# or (isRelationOpenCreateActionOnForm page action) (isActionParentEagerElement action) }}
      ownerValidation: validate,
    {{/ or }}
    {{# with (getLinkParentForActionDefinition action.actionDefinition) as |link| }}
      {{# with (getFirstAutocompleteColumnForLink link) as |col| }}
        {{# unless link.isEager }}
          maskRequest: '{ {{~ col.attributeType.name ~}} }',
        {{/ unless }}
      {{/ with }}
    {{/ with }}
    isDraft: {{# or (isRelationOpenCreateActionOnForm page action) (isActionParentEagerElement action) }}true{{ else }}false{{/ or }},
    dataPath: `${dataPath ? (dataPath + '.') : ''}{{ action.targetPageDefinition.dataElement.name }}{{# if (isActionParentEagerTable action) }}[0]{{/ if }}`
  });
  {{# if page.container.isRelationSelector }}
    if (result === 'submit' && returnedData) {
      onSubmit([returnedData]);
    }
  {{/ if }}
  {{# if (isRelationOpenCreateActionOnForm page action) }}
    // we might need to differentiate result handling between operation inputs and crud relation creates
    if (result === 'submit-draft' && returnedData) {
      const decoratedData = {
        ...returnedData,
        __identifier: `draft:${uuidv4()}`,
      };
      const newData = {{# if action.targetDataElement.isCollection }}[...(data.{{ action.targetDataElement.name }} || []), decoratedData]{{ else }}decoratedData{{/ if }}
      storeDiff('{{ action.targetDataElement.name }}', newData);
      return;
    }
  {{/ if }}
  {{# with (getRefreshActionDefinitionForContainer page.container) as |actionDefinition| }}
    {{# if page.container.view }}
      if (result === 'submit' && !editMode) {
        await actions.{{ simpleActionDefinitionName actionDefinition }}!(processQueryCustomizer(getPageQueryCustomizer()));
      } else if (result === 'submit-draft' && returnedData) {
        const decoratedData = {
          ...returnedData,
          __identifier: `draft:${uuidv4()}`,
        };
        const newData = {{# if action.targetDataElement.isCollection }}[...(data.{{ action.targetDataElement.name }} || []), decoratedData]{{ else }}decoratedData{{/ if }}
        storeDiff('{{ action.targetDataElement.name }}', newData);
        return;
      }
    {{/ if }}
    {{# if page.container.table }}
      if (result === 'submit') {
        setRefreshCounter((prev) => prev + 1);
      }
    {{/ if }}
  {{/ with }}
  if (openCreated && returnedData) {
    {{# with (getRowViewActionForCreateOpenAction action) as |rowViewAction| }}
      await {{ simpleActionDefinitionName rowViewAction.actionDefinition }}(returnedData!);
    {{/ with }}
  }
};
