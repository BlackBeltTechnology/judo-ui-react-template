const {{ simpleActionDefinitionName action.actionDefinition }} = async (target?: {{ classDataName action.actionDefinition.targetType 'Stored' }}{{# if action.actionDefinition.isBulkCapable }}, silentMode?: boolean{{/ if }}) => {
  {{# with (getTableParentForActionDefinition action.actionDefinition) as |table| }}
    if (target) {
      {{# if table.isEager }}
        const newList = (data?.{{ table.dataElement.name }} ?? []).filter((c: any) => c.__identifier !== target!.__identifier);
        storeDiff('{{ table.dataElement.name }}', newList);
      {{ else }}
        try {
          if (!silentMode) {
            setIsLoading(true);
          }
          await {{ getServiceImplForPage page }}.remove{{ firstToUpper action.targetDataElement.name }}({{# if page.container.table }}{ __signedIdentifier: signedIdentifier } as JudoIdentifiable<any>{{ else }}data{{/ if }}, [target!]);
          if (!silentMode) {
            {{# if page.container.table }}
              setRefreshCounter((prev) => prev + 1);
            {{/ if }}
            {{# if page.container.view }}
              if (!editMode) {
                {{# with (getRefreshActionDefinitionForContainer page.container) as |actionDefinition| }}
                  await actions.{{ simpleActionDefinitionName actionDefinition }}!(processQueryCustomizer(getPageQueryCustomizer()));
                {{/ with }}
              }
            {{/ if }}
          }
        } catch(error) {
          if (!silentMode) {
            {{# if action.actionDefinition.targetType }}
              handleError<{{ classDataName action.actionDefinition.targetType '' }}>(error, undefined, target);
            {{ else }}
              handleError(error, undefined, data);
            {{/ if }}
          }
        } finally {
          if (!silentMode) {
            setIsLoading(false);
          }
        }
      {{/ if }}
    }
  {{/ with }}
};
