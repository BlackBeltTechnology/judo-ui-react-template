const {{ simpleActionDefinitionName action.actionDefinition }} = async ({{# if action.actionDefinition.targetType }}target?: {{ classDataName action.actionDefinition.targetType 'Stored' }}{{/ if }}) => {
  {{# with action.actionDefinition.operation as |operation| }}
  try {
    setIsLoading(true);
    {{# if operation.output }}const result = {{/ if }}await {{ getServiceImplForPage page }}.{{ operation.name }}(
      {{# if page.container.form }}
        {{# unless operation.isStatic }}ownerData{{/ unless }}
        {{# if operation.input }}{{# unless operation.isStatic }}, {{/ unless }}data{{/ if }}
      {{ else }}
        {{# if page.container.isSelector }}
          {{# unless operation.isStatic }}ownerData, {{/ unless }}selectionDiff[0]
        {{ else }}
          {{# if page.container.table }}
            {{# unless operation.isStatic }}
              target!
            {{/ unless }}
          {{ else }}
            {{# unless operation.isStatic }}data{{/ unless }}
            {{# if operation.input }}
              {{# unless operation.isStatic }}, {{/ unless }}target!
            {{/ if }}
          {{/ if }}
        {{/ if }}
      {{/ if }}
    );

    enqueueSnackbar(t('judo.action.operation.success', { defaultValue: 'Operation executed successfully' }) as string, {
      variant: 'success',
      ...toastConfig.success,
    });

    {{# if page.container.form }}
      {{# if operation.output }}
        if (result) {
          onSubmit(result);
        } else {
          onSubmit();
        }
      {{ else }}
        onSubmit();
      {{/ if }}
    {{/ if }}
    {{# if page.container.view }}
      if (!editMode) {
        {{# with (getRefreshActionDefinitionForContainer page.container) as |actionDefinition| }}
          await actions.{{ simpleActionDefinitionName actionDefinition }}!(processQueryCustomizer(pageQueryCustomizer));
        {{/ with }}
      }
    {{/ if }}
    {{# if page.container.table }}
      {{# if page.container.isSelector }}
        {{# if operation.output }}
          if (result) {
            onSubmit(result);
          } else {
            onSubmit();
          }
        {{ else }}
          onSubmit(selectionDiff);
        {{/ if }}
      {{ else }}
        setRefreshCounter((prev) => prev + 1);
      {{/ if }}
    {{/ if }}
  } catch (error) {
    {{# unless page.container.table }}
      handleError<{{ classDataName (getReferenceClassType page) '' }}>(error, { setValidation }, data);
    {{ else }}
      handleError(error);
    {{/ unless }}
  } finally {
    setIsLoading(false);
  }
  {{/ with }}
};
