const {{ simpleActionDefinitionName action.actionDefinition }} = async ({{# if action.actionDefinition.targetType }}target?: {{ classDataName action.actionDefinition.targetType 'Stored' }}{{/ if }}) => {
  {{# with action.actionDefinition.operation as |operation| }}
  try {
    setIsLoading(true);
    {{# if operation.output }}const result = {{/ if }}await {{ getServiceImplForPage page }}.{{ operation.name }}{{ operationCallSuffix action }}(
      {{# if page.container.form }}
        {{# unless operation.isStatic }}ownerData{{/ unless }}
        {{# if operation.input }}{{# unless operation.isStatic }}, {{/ unless }}cleanUpPayload(payloadDiff.current){{/ if }}
      {{ else }}
        {{# if page.container.isSelector }}
          {{# unless operation.isStatic }}ownerData, {{/ unless }}selectionDiff[0]
        {{ else }}
          {{# if page.container.table }}
            {{# unless operation.isStatic }}
              target!
            {{/ unless }}
          {{ else }}
            {{# unless operation.isStatic }}
              {{# if action.actionDefinition.targetType }}
                target!
              {{ else }}
                data
              {{/ if }}
            {{/ unless }}
            {{# if operation.input }}
              {{# unless operation.isStatic }}, {{/ unless }}target!
            {{/ if }}
          {{/ if }}
        {{/ if }}
      {{/ if }}
    );
    if (customActions?.post{{ firstToUpper (simpleActionDefinitionName action.actionDefinition) }}) {
      await customActions.post{{ firstToUpper (simpleActionDefinitionName action.actionDefinition) }}(
        {{# if action.actionDefinition.targetType }}target!,{{/ if }}
        {{# if operation.output }}result,{{/ if }}
        {{# if page.container.form }}onSubmit,{{/ if }}
        {{# if page.openInDialog }}onClose{{/ if }}
      );
    } else {
      showSuccessSnack(t('judo.action.operation.success', { defaultValue: 'Operation executed successfully' }) as string);
      {{# if page.container.form }}
        {{# if operation.output }}
          if (result) {
            {{# if (isActionOutputMapped action) }}
            {{# if page.openInDialog }}onClose();{{/ if }}
            {{# if action.targetPageDefinition.openInDialog }}
              await open{{ pageName action.targetPageDefinition }}(result);
            {{ else }}
              navigate(routeTo{{ pageName action.targetPageDefinition }}(result.__signedIdentifier));
            {{/ if }}
            {{ else }}
            onSubmit(result);
            {{/ if }}
          } else {
            onSubmit();
          }
        {{ else }}
          onSubmit();
        {{/ if }}
      {{ else }}
        {{# if operation.output }}
          {{# unless page.container.isSelector }}
            {{# unless action.targetDataElement.output.target.isMapped }}
                await open{{ pageName action.targetPageDefinition }}({{# if page.container.view }}data{{ else }}null{{/ if }}, result);
            {{/ unless }}
          {{/ unless }}
        {{/ if }}
      {{/ if }}
      {{# if page.container.view }}
        if (!editMode) {
          {{# with (getRefreshActionDefinitionForContainer page.container) as |actionDefinition| }}
            await actions.{{ simpleActionDefinitionName actionDefinition }}!(processQueryCustomizer(getPageQueryCustomizer()));
          {{/ with }}
        }
      {{/ if }}
      {{# if page.container.table }}
        {{# if page.container.isSelector }}
          {{# if operation.output }}
            if (result) {
              {{# if (isActionOutputMapped action) }}
              {{# if page.openInDialog }}onClose();{{/ if }}
              navigate(routeTo{{ pageName action.targetPageDefinition }}(result.__signedIdentifier));
              {{ else }}
              onSubmit(result);
              {{/ if }}
            } else {
              onSubmit();
            }
          {{ else }}
            onSubmit(selectionDiff);
          {{/ if }}
        {{ else }}
          setRefreshCounter((prev) => prev + 1);
        {{/ if }}
      {{/ if }}
    }
  } catch (error) {
    {{# unless page.container.table }}
      handleError<{{ classDataName (getReferenceClassType page) '' }}>(error, { setValidation }, data);
    {{ else }}
      handleError(error);
    {{/ unless }}
  } finally {
    setIsLoading(false);
  }
  {{/ with }}
};
