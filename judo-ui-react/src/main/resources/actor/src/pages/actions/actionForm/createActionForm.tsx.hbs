{{> fragment.header.hbs }}
// Action: CreateAction

{{# if isDebugPrint }}// include: actor/src/fragments/page/common-form-imports.fragment.hbs{{/ if }}
{{> actor/src/fragments/page/common-form-imports.fragment.hbs }}
{{# unless (pageShouldOpenInDialog (getViewPageForCreatePage page application)) }}
    import { routeTo{{ pageName (getViewPageForCreatePage page application) }} } from '~/routes';
{{ else }}
    import {{ pageName (getViewPageForCreatePage page application) }} from '~/pages/{{ pageIndexRelativeImportPath (getViewPageForCreatePage page application) }}';
{{/ unless }}

import {
    {{# each (getApiImportsForCreateAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import {
    {{ dataElementRelationName page.dataElement }}Impl,
    {{ classServiceName page.dataElement.target }}Impl,
} from '~/generated/data-axios';

{{# each page.originalPageContainer.links as |link| }}
    import { {{ linkComponentName link }} } from './components/{{ linkComponentName link }}';
{{/ each }}
{{# each page.originalPageContainer.tables as |table| }}
    import { {{ tableComponentName table }} } from './components/{{ tableComponentName table }}';
{{/ each }}

{{# each (getVisualElementsWithCustomImplementation page) as |ve| }}
    export const {{ getCustomizationComponentInterfaceKey ve }} = '{{ getCustomizationComponentInterface ve }}';
    export interface {{ getCustomizationComponentInterface ve }} extends FC<CustomFormVisualElementProps<{{ classDataName page.dataElement.target '' }}>> {}
{{/ each }}

{{# if isDebugPrint }}// include: actor/src/fragments/page/on-blur-declaration.fragment.hbs{{/ if }}
{{> actor/src/fragments/page/on-blur-declaration.fragment.hbs page=page }}

export interface {{ pageActionFormComponentName action }}Props {
    successCallback: (result: {{ classDataName page.dataElement.target 'Stored' }}, open?: boolean) => void;
    cancel: () => void;
    {{# if (hasDataElementOwner action.dataElement) }}
        owner: JudoIdentifiable<{{ classDataName ownerPage.dataElement.target '' }}>;
    {{/ if }}
}

export function {{ pageActionFormComponentName action }}({
    successCallback,
    cancel,
    {{# if (hasDataElementOwner action.dataElement) }}
        owner,
    {{/ if }}
} : {{ pageActionFormComponentName action }}Props) {
    const { t } = useTranslation();
    const { openRangeDialog } = useRangeDialog();
    const { downloadFile, extractFileNameFromToken, uploadFile } = fileHandling();
    const { locale: l10nLocale } = useL10N();
    const anchorRef = useRef<HTMLDivElement>(null);
    const { navigate } = useJudoNavigation();
    const [open, setOpen] = useState(false);
    const [createDialog, closeDialog] = useDialog();

    const handleFetchError = useErrorHandler(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Fetch))`);
    const handleCreateError = useErrorHandler<{{ classDataName page.dataElement.target '' }}>(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Create)(component={{ pageActionFormComponentName action }}))`);
    const { enqueueSnackbar } = useSnackbar();
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [data, setData] = useState<{{ classDataName page.dataElement.target '' }}>({
      __referenceId: uuidv1(),
    } as unknown as {{ classDataName page.dataElement.target '' }});
    const [validation, setValidation] = useState<Map<keyof {{ classDataName page.dataElement.target '' }}, string>>(new Map<keyof {{ classDataName page.dataElement.target '' }}, string>());
    const [editMode, setEditMode] = useState<boolean>(true);
    const [payloadDiff, setPayloadDiff] = useState<Record<keyof {{ classDataName page.dataElement.target '' }}, any>>({} as unknown as Record<keyof {{ classDataName page.dataElement.target '' }}, any>);
    const storeDiff: (attributeName: keyof {{ classDataName page.dataElement.target '' }}, value: any) => void = useCallback((attributeName: keyof {{ classDataName page.dataElement.target '' }}, value: any) => {
        {{# if isDebugPrint }}// include: actor/src/fragments/page/store-diff-body.hbs{{/ if }}
        {{> actor/src/fragments/page/store-diff-body.hbs classType=page.dataElement.target }}
    }, [data]);
    const title: string = t('{{ getTranslationKeyForPage page }}', { defaultValue: '{{ page.label }}' });

    {{# if isDebugPrint }}// include: actor/src/fragments/page/on-blur-hook-call.fragment.hbs{{/ if }}
    {{> actor/src/fragments/page/on-blur-hook-call.fragment.hbs page=page }}

    {{# if isDebugPrint }}// include: actor/src/fragments/page/input-form-flags.hbs{{/ if }}
    {{> actor/src/fragments/page/input-form-flags.hbs }}

    {{# if page.dataElement.target.isTemplateable }}
        const fetchData = async () => {
            setIsLoading(true);

            try {
                const res = await {{ classServiceName page.dataElement.target }}Impl.getTemplate();
                setData((prevData) => ({ ...prevData, ...res }));
                setPayloadDiff({
                    ...res,
                } as Record<keyof {{ classDataName page.dataElement.target '' }}, any>);
            } catch(error) {
                handleFetchError(error);
            } finally {
                setIsLoading(false);
            }
        };

        useEffect(() => {
            fetchData();
        }, []);
    {{/ if }}

    const saveData = async () => {
        {{# if (hasPageRequiredBy page) }}
            {{> actor/src/fragments/page/local-validate.fragment.hbs }}
        {{/ if }}

        setIsLoading(true);

        try {
            const res = await {{ dataElementRelationName page.dataElement }}Impl.create{{ ucFirst page.dataElement.name }}({{# if (hasDataElementOwner action.dataElement) }}owner, {{/ if }}payloadDiff);

            return res;
        } catch (error) {
            handleCreateError(error, { setValidation }, data);
        } finally {
            setIsLoading(false);
        }
    };

    const handleToggle = () => {
        setOpen((prevOpen) => !prevOpen);
    };

    const handleClose = (event: Event) => {
        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {
            return;
        }

        setOpen(false);
    };

    return (
        {{# with (getDataContainerForPage page) as |rootChild| }}
            <>
                <DialogTitle>
                    {title}
                    <IconButton
                        id="{{ createId action }}-dialog-close"
                        aria-label="close"
                        onClick={ () => cancel() }
                        sx={ {
                            position: 'absolute',
                            right: 8,
                            top: 8,
                            color: (theme) => theme.palette.grey[500],
                        } }
                    >
                        <MdiIcon path="close" />
                    </IconButton>
                </DialogTitle>
                <DialogContent dividers>
                    <Grid container spacing={2} direction="{{# if rootChild.isDirectionHorizontal }}row{{ else }}column{{/ if }}" alignItems="{{ alignItems rootChild }}" justifyContent="{{ justifyContent rootChild }}">
                        {{# each rootChild.children as |child| }}
                            {{# if isDebugPrint }}{/* include: getWidgetTemplate() */}{{/ if }}
                            {{> (getWidgetTemplate child) }}
                        {{/ each }}
                    </Grid>
                </DialogContent>
                <DialogActions>
                    <Button id="{{ createId action }}-action-form-action-cancel" variant="text" onClick={ () => cancel() } disabled={isLoading}>
                        {t('judo.pages.cancel', { defaultValue: 'Cancel' })}
                    </Button>
                    <ButtonGroup size="small" ref={anchorRef} aria-label="split button" disabled={isLoading}>
                        <LoadingButton loading={isLoading} loadingPosition="start" id="{{ createId action }}-action-form-action-create" variant="contained" onClick={ async () => {
                                const result = await saveData();
                                if (result) {
                                    successCallback(result);
                                }
                            } }>
                            <span>{t('judo.pages.create', { defaultValue: 'Create' })}</span>
                        </LoadingButton>
                        <Button variant="contained" size="small" onClick={handleToggle}>
                            <MdiIcon path="menu-down" />
                        </Button>
                    </ButtonGroup>
                    <Popper sx={ { zIndex: 1 } } open={open} anchorEl={anchorRef.current} transition disablePortal>
                        {({ TransitionProps, placement }) => (
                            <Grow {...TransitionProps} style={ { transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' } }>
                                <Paper>
                                    <ClickAwayListener onClickAway={handleClose}>
                                        <MenuList id="split-button-menu" autoFocusItem>
                                            <MenuItem key="create-and-navigate" onClick={ async (event: any) => {
                                                const result: {{ classDataName page.dataElement.target 'Stored' }} | undefined = await saveData();

                                                if (result) {
                                                    successCallback(result);
                                                    {{# unless (pageShouldOpenInDialog (getViewPageForCreatePage page application)) }}
                                                        navigate(routeTo{{ pageName (getViewPageForCreatePage page application) }}(result.__signedIdentifier));
                                                    {{ else }}
                                                        createDialog({
                                                            {{# if (adjustDialogSize (getViewPageForCreatePage page application)) }}
                                                                fullWidth: true,
                                                                maxWidth: '{{ getDialogSizeForViewPageOfCreatePage page application }}',
                                                            {{/ if }}
                                                            onClose: (event: object, reason: string) => {
                                                                if (reason !== 'backdropClick') {
                                                                    closeDialog();
                                                                }
                                                            },
                                                            children: (
                                                                <{{ pageName (getViewPageForCreatePage page application) }}
                                                                    successCallback={ () => {
                                                                        successCallback(result, true);
                                                                    } }
                                                                    cancel={closeDialog}
                                                                    entry={result}
                                                                />
                                                            ),
                                                        });
                                                    {{/ unless }}
                                                }
                                            } } disabled={isLoading}>
                                                {t('judo.pages.create-and-navigate', { defaultValue: 'Create and navigate' })}
                                            </MenuItem>
                                        </MenuList>
                                    </ClickAwayListener>
                                </Paper>
                            </Grow>
                        )}
                    </Popper>
                </DialogActions>
            </>
        {{/ with }}
    );
}
