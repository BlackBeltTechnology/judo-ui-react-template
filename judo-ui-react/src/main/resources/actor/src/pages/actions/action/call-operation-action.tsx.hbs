{{> fragment.header.hbs }}
// Action: CallOperationAction
// Is Access: {{# if page.dataElement.isAccess }}yes{{ else }}no{{/ if }}
// Is Mapped: {{# if action.operation.isMapped }}yes{{ else }}no{{/ if }}
// Is Static: {{# if action.operation.isStatic }}yes{{ else }}no{{/ if }}
// Input: {{# if action.operation.input }}yes{{ else }}no{{/ if }}
// InputParameterPage: {{# if action.inputParameterPage }}yes{{ else }}no{{/ if }}
// OutputParameterPage: {{# if action.outputParameterPage }}yes{{ else }}no{{/ if }}

import { useTranslation } from 'react-i18next';
import { Button, ButtonGroup } from '@mui/material';
import { LoadingButton } from '@mui/lab';
import type {
    GridColDef,
    GridRenderCellParams,
    GridRowParams,
    GridFilterModel,
    GridSortModel,
    GridRowSelectionModel,
    GridValueFormatterParams,
} from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useTrackService } from '@pandino/react-hooks';
import { useSnackbar } from 'notistack';
{{# if action.outputParameterPage }}
    {{# unless (actionHasUnmappedOutputForm action) }}
        {{# unless (pageShouldOpenInDialog action.outputParameterPage) }}
            import { routeTo{{ pageName action.outputParameterPage }} } from '~/routes';
        {{ else }}
            import { {{ pageName action.outputParameterPage }} } from '~/pages/{{ pageIndexRelativeImportPath action.outputParameterPage }}';
        {{/ unless }}
    {{/ unless }}
{{/ if }}
import { useJudoNavigation, MdiIcon } from '~/components';
{{# if isUseInlineColumnFilters }}
import {
    stringColumnOperators,
    numericColumnOperators,
    dateColumnOperators,
    dateTimeColumnOperators,
    booleanColumnOperators,
    singleSelectColumnOperators,
} from '~/components/table';
{{/ if }}
import { useDialog, useRangeDialog{{# if (hasCallOperationActionFaults action) }}, OperationFaultDialog{{/ if }} } from '~/components/dialog';
import { baseColumnConfig, toastConfig } from '~/config';
import { FilterOption, FilterType } from '~/components-api';
import { useL10N } from '~/l10n/l10n-context';
import { isErrorOperationFault, useErrorHandler, ERROR_PROCESSOR_HOOK_INTERFACE_KEY, fileHandling, processQueryCustomizer, serviceDateToUiDate, serviceTimeToUiTime, } from '~/utilities';
{{# if (actionHasInputForm action) }}
    import { {{ pageActionFormComponentName action }} } from './{{ pageActionFormComponentName action }}';
{{/ if }}
{{# if (actionHasUnmappedOutputForm action) }}
    import {{ pageName action.outputParameterPage }} from '~/{{ pagePathForTilde action.outputParameterPage }}';
{{/ if }}
import {
    {{# each (getApiImportsForCallOperationAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
{{# unless (actionHasInputForm action) }}
    import {
        {{ classServiceName page.dataElement.target }}Impl,
        {{# neq (classServiceName page.dataElement.target) (classServiceName action.dataElement.owner) }}
            {{ classServiceName action.dataElement.owner }}Impl,
        {{/ neq }}
    } from '~/generated/data-axios';
{{/ unless }}

{{# each action.operation.faults as |fault| }}
    type {{ nameWithoutModel fault.target.name }}FaultHandler = (payload: {{ nameWithoutModel fault.target.name }}) => Record<string, any> | object;
{{/ each }}

export type {{ actionFunctionHandlerTypeName action 'PostHandler' }} = (ownerCallback: () => void{{# if action.outputParameterPage }}, result?: {{ classDataName action.outputParameterPage.dataElement.target 'Stored' }}{{/ if }}) => Promise<void>;

export const {{ getCustomizationActionFunctionHandlerInterfaceKey action 'PostHandlerHook' }} = '{{ actionFunctionHandlerTypeName action 'PostHandlerHook' }}';
export type {{ actionFunctionHandlerTypeName action 'PostHandlerHook' }} = () => {{ actionFunctionHandlerTypeName action 'PostHandler' }};

export type {{ actionFunctionTypeName action }} = () => ({{# if action.operation.isMapped }}owner: {{ classDataName action.dataElement.owner 'Stored' }}, {{/ if }}successCallback: () => void) => Promise<void>;

export const {{ actionFunctionHookName action }}: {{ actionFunctionTypeName action }} = () => {
    const { t } = useTranslation();
    const { downloadFile, extractFileNameFromToken, uploadFile } = fileHandling();
    const { locale: l10nLocale } = useL10N();
    const handleActionError = useErrorHandler{{# if action.operation.isMapped }}<{{ classDataName action.dataElement.owner '' }}>{{/ if }}(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=CallOperation)(component={{ actionFunctionTypeName action }}))`);
    const { enqueueSnackbar } = useSnackbar();
    const { openRangeDialog } = useRangeDialog();
    const [createDialog, closeDialog] = useDialog();
    {{# if (hasCallOperationActionFaults action) }}
        const [createErrorDialog, closeErrorDialog] = useDialog();
    {{/ if }}
    {{# if (actionHasUnmappedOutputForm action) }}
        const [createOutputDialog, closeOutputDialog] = useDialog();
    {{/ if }}
    const { navigate } = useJudoNavigation();
    const title: string = t('{{ getTranslationKeyForAction action }}', { defaultValue: '{{ action.label }}' });
    const { service: customPostHandler } = useTrackService<{{ actionFunctionHandlerTypeName action 'PostHandlerHook' }}>(`(${OBJECTCLASS}=${ {{~ getCustomizationActionFunctionHandlerInterfaceKey action 'PostHandlerHook' ~}} })`);
    const postHandler: {{ actionFunctionHandlerTypeName action 'PostHandler' }} | undefined = customPostHandler && customPostHandler();

    {{# if (actionHasInputForm action) }}
        {{# if isDebugPrint }}// include: actor/src/pages/actions/action/call-operation-action/with-input-form.fragment.hbs{{/ if }}
        {{> actor/src/pages/actions/action/call-operation-action/with-input-form.fragment.hbs action=action page=page }}
    {{ else }}
        {{# if isDebugPrint }}// include: actor/src/pages/actions/action/call-operation-action/without-input-form.fragment.hbs{{/ if }}
        {{> actor/src/pages/actions/action/call-operation-action/without-input-form.fragment.hbs action=action page=page }}
    {{/ if }}
}
