{{> fragment.header.hbs }}
// Action: CallOperationAction
// Is Access: {{# if page.dataElement.isAccess }}yes{{ else }}no{{/ if }}
// Is Mapped: {{# if action.operation.isMapped }}yes{{ else }}no{{/ if }}
// Is Static: {{# if action.operation.isStatic }}yes{{ else }}no{{/ if }}
// Input: {{# if action.operation.input }}yes{{ else }}no{{/ if }}
// InputParameterPage: {{# if action.inputParameterPage }}yes{{ else }}no{{/ if }}
// OutputParameterPage: {{# if action.outputParameterPage }}yes{{ else }}no{{/ if }}

import { useTranslation } from 'react-i18next';
import { Button } from '@mui/material';
import type { GridColDef, GridRenderCellParams, GridRowParams, GridSortModel, GridRowSelectionModel, GridValueFormatterParams } from '@mui/x-data-grid';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useTrackService } from '@pandino/react-hooks';
import { useSnackbar } from 'notistack';
import { useJudoNavigation, MdiIcon } from '{{ relativePathFromAction page action 'components' }}';
import { useDialog, useRangeDialog } from '{{ relativePathFromAction page action 'components/dialog' }}';
import { baseColumnConfig, toastConfig } from '{{ relativePathFromAction page action 'config' }}';
import { FilterOption, FilterType } from '{{ relativePathFromAction page action 'components-api' }}';
import { useL10N } from '{{ relativePathFromAction page action 'l10n' }}/l10n-context';
import { useErrorHandler, ERROR_PROCESSOR_HOOK_INTERFACE_KEY, fileHandling, processQueryCustomizer, serviceDateToUiDate, serviceTimeToUiTime, } from '{{ relativePathFromAction page action 'utilities' }}';
{{# if (actionHasInputForm action) }}
    import { {{ pageActionFormComponentName action page }} } from './{{ pageActionFormComponentName action page }}';
{{/ if }}
{{# if (actionHasUnmappedOutputForm action) }}
    import { {{ pageName action.outputParameterPage }} } from '{{ relativePathToPageActionOutputViewComponent action page }}';
{{/ if }}
import {
    {{# each (getApiImportsForCallOperationAction action page) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '{{ relativePathFromAction page action 'generated/data-api' }}';
{{# unless (actionHasInputForm action) }}
    import {
        {{ classServiceName page.dataElement.target }}Impl,
        {{# neq (classServiceName page.dataElement.target) (classServiceName action.dataElement.owner) }}
            {{ classServiceName action.dataElement.owner }}Impl,
        {{/ neq }}
    } from '{{ relativePathFromAction page action 'generated/data-axios'}}';
{{/ unless }}

export type {{ actionFunctionHandlerTypeName action page 'PostHandler' }} = (ownerCallback: () => void{{# if action.outputParameterPage }}, result?: {{ classDataName action.outputParameterPage.dataElement.target 'Stored' }}{{/ if }}) => Promise<void>;

export const {{ getCustomizationActionFunctionHandlerInterfaceKey action page 'PostHandlerHook' }} = '{{ actionFunctionHandlerTypeName action page 'PostHandlerHook' }}';
export type {{ actionFunctionHandlerTypeName action page 'PostHandlerHook' }} = () => {{ actionFunctionHandlerTypeName action page 'PostHandler' }};

export type {{ actionFunctionTypeName action page }} = () => ({{# if action.operation.isMapped }}owner: {{ classDataName action.dataElement.owner 'Stored' }}, {{/ if }}successCallback: () => void) => Promise<void>;

export const {{ actionFunctionHookName action page }}: {{ actionFunctionTypeName action page }} = () => {
    const { t } = useTranslation();
    const { downloadFile, extractFileNameFromToken, uploadFile } = fileHandling();
    const { locale: l10nLocale } = useL10N();
    const handleActionError = useErrorHandler{{# if action.operation.isMapped }}<{{ classDataName action.dataElement.owner '' }}>{{/ if }}(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=CallOperation)(component={{ actionFunctionTypeName action page }}))`);
    const { enqueueSnackbar } = useSnackbar();
    const { openRangeDialog } = useRangeDialog();
    const [createDialog, closeDialog] = useDialog();
    {{# if (actionHasUnmappedOutputForm action) }}
        const [createOutputDialog, closeOutputDialog] = useDialog();
    {{/ if }}
    const { navigate } = useJudoNavigation();
    const title: string = t('{{ idToTranslationKey action.fQName application }}', { defaultValue: '{{ action.label }}' });
    const { service: customPostHandler } = useTrackService<{{ actionFunctionHandlerTypeName action page 'PostHandlerHook' }}>(`(${OBJECTCLASS}=${ {{~ getCustomizationActionFunctionHandlerInterfaceKey action page 'PostHandlerHook' ~}} })`);
    const postHandler: {{ actionFunctionHandlerTypeName action page 'PostHandler' }} | undefined = customPostHandler && customPostHandler();

    {{# if (actionHasInputForm action) }}
        {{> actor/src/pages/actions/action/call-operation-action/with-input-form.fragment.hbs action=action page=page }}
    {{ else }}
        {{> actor/src/pages/actions/action/call-operation-action/without-input-form.fragment.hbs action=action page=page }}
    {{/ if }}
}
