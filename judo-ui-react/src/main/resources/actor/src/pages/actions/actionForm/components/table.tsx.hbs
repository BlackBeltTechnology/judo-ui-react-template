{{> fragment.header.hbs }}

{{# if isDebugPrint }}// include: actor/src/fragments/table/common-imports.fragment.hbs{{/ if }}
{{> actor/src/fragments/table/common-imports.fragment.hbs }}

import { Box, Typography } from '@mui/material';
import {
    {{# each (getApiImportsForFormAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import {
    {{ classServiceName table.dataElement.owner }}Impl,
    {{# neq (classServiceName table.dataElement.owner) (classServiceName ownerPage.dataElement.target) }}
        {{ classServiceName ownerPage.dataElement.target }}Impl,
    {{/ neq }}
} from '~/generated/data-axios';
import { GridLogicOperator } from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}';

export interface {{ tableComponentName table }}Props {
    ownerData: {{ classDataName table.dataElement.owner '' }};
    isOwnerLoading: boolean;
    editMode: boolean;
    isFormUpdateable: () => boolean;
    storeDiff: (attributeName: keyof {{ classDataName table.dataElement.owner '' }}, value: any) => void;
    validation: Map<keyof {{ classDataName table.dataElement.owner '' }}, string>;
}

export const {{ tableComponentName table }} = forwardRef<RefreshableTable, {{ tableComponentName table }}Props>((props, ref) => {
    const { ownerData, isOwnerLoading, editMode, isFormUpdateable, storeDiff } = props;
    const { t } = useTranslation();
    const { openRangeDialog } = useRangeDialog();
    const { downloadFile, extractFileNameFromToken, uploadFile } = fileHandling();
    const { locale: l10nLocale } = useL10N();
    {{# if isDebugPrint }}// include: actor/src/fragments/table/row-selection.form.fragment.hbs{{/ if }}
    {{> actor/src/fragments/table/row-selection.form.fragment.hbs table=table }}

    {{# if isDebugPrint }}// include: actor/src/fragments/page/sort-models.fragment.hbs{{/ if }}
    {{> actor/src/fragments/page/sort-models.fragment.hbs dataElement=table.dataElement defaultSortColumn=table.defaultSortColumn columns=table.columns }}

    const [{{ table.dataElement.name }}FilterModel, set{{ ucFirst table.dataElement.name }}FilterModel] = useState<GridFilterModel>({ items: [] });

    {{# if isDebugPrint }}// include: actor/src/fragments/relation/hook-variables.fragment.hbs{{/ if }}
    {{> actor/src/fragments/relation/hook-variables.fragment.hbs rel=table }}

    {{# if isDebugPrint }}// include: actor/src/fragments/table/row-actions.fragment.hbs{{/ if }}
    {{> actor/src/fragments/table/row-actions.fragment.hbs table=table page=page }}

    return (
        <>
            <StripedDataGrid
                { ...baseTableConfig }
                {{# if isMUILicensePlanPro }}
                    initialState={ { pinnedColumns: { right: ['actions'] } } }
                {{/ if }}
                pageSizeOptions={[{{ calculateTablePageLimit table }}]}
                sx={ {
                    // overflow: 'hidden',
                    display: 'grid',
                    border: (theme) => props.validation.has('{{ table.dataElement.name }}') ? `2px solid ${theme.palette.error.main}` : undefined,
                } }
                slotProps={ {
                  filterPanel: {
                    logicOperators: [GridLogicOperator.And],
                  },
                } }
                getRowId={(row: { __identifier: string }) => row.__identifier}
                loading={ isOwnerLoading }
                rows={ ownerData?.{{ table.dataElement.name }} ?? [] }
                getRowClassName={ (params: GridRowClassNameParams) => {
                    return params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd';
                } }
                columns={[ ...{{ table.dataElement.name }}Columns, ...columnsActionCalculator('{{ createId table.dataElement }}', {{ table.dataElement.name }}RowActions, t, { shownActions: 2 }) ]}
                disableRowSelectionOnClick
                sortModel={ {{ table.dataElement.name }}SortModel }
                onSortModelChange={(newModel: GridSortModel) => {
                    set{{ ucFirst table.dataElement.name }}SortModel(newModel);
                }}
                {{# if isUseInlineColumnFilters }}
                filterModel={ {{ table.dataElement.name }}FilterModel }
                onFilterModelChange={(newModel: GridFilterModel) => {
                    set{{ ucFirst table.dataElement.name }}FilterModel(newModel);
                }}
                {{/ if }}
                components={ {
                    Toolbar: () => (
                        <GridToolbarContainer>
                            {{# each table.actions as |action| }}
                                {{# if action.isAddAction }}
                                    <Button
                                        id="{{ createId table.dataElement }}-add"
                                        startIcon={<MdiIcon path="attachment-plus" />}
                                        variant="text"
                                        onClick={ async () => {
                                            const res = await openRangeDialog<{{ classDataName dataElement.target 'Stored' }}, {{ classDataName dataElement.target 'QueryCustomizer' }}>({
                                                id: '{{ createId dataElement }}',
                                                columns: {{ dataElement.name }}Columns,
                                                defaultSortField: {{ dataElement.name }}SortModel[0],
                                                rangeCall: async (queryCustomizer) =>
                                                    await {{ classServiceName dataElement.owner }}Impl.getRangeFor{{ firstToUpper dataElement.name }}(ownerData, processQueryCustomizer(queryCustomizer)),
                                                single: false,
                                                alreadySelectedItems: ownerData.{{ table.dataElement.name }} ? [...ownerData.{{ table.dataElement.name }}] : undefined,
                                                filterOptions: {{ dataElement.name }}RangeFilterOptions,
                                                initialQueryCustomizer: {{ dataElement.name }}InitialQueryCustomizer,
                                            });

                                            if (res) {
                                                const newList = [
                                                    ...(ownerData.{{ table.dataElement.name }} || []),
                                                    ...(res.value as {{ classDataName table.dataElement.target 'Stored' }}[])
                                                ];
                                                storeDiff('{{ table.dataElement.name }}', newList);
                                            }
                                        } }
                                        disabled={
                                               isOwnerLoading
                                            || {{# if table.enabledBy }}!ownerData.{{ table.enabledBy.name }} ||{{/ if }} {{ boolValue table.dataElement.isReadOnly }}
                                            || !isFormUpdateable()
                                        }
                                    >
                                        {t('judo.pages.table.add', { defaultValue: 'Add' })}
                                    </Button>
                                {{/ if }}
                                {{# if action.isClearAction }}
                                    <Button
                                        id="{{ createId table.dataElement }}-clear"
                                        startIcon={<MdiIcon path="link_off" />}
                                        variant="text"
                                        onClick={ async () => {
                                            storeDiff('{{ table.dataElement.name }}', []);
                                        } }
                                        disabled={
                                               isOwnerLoading
                                            || {{# if table.enabledBy }}!ownerData.{{ table.enabledBy.name }} ||{{/ if }} {{ boolValue table.dataElement.isReadOnly }}
                                            || !isFormUpdateable()
                                            || !ownerData?.{{ table.dataElement.name }}?.length
                                        }
                                    >
                                        {t('judo.pages.table.clear', { defaultValue: 'Clear' })}
                                    </Button>
                                {{/ if }}
                                {{# if action.isFilterRelationAction }}
                                    {{# if isUseInlineColumnFilters }}
                                        <GridToolbarFilterButton componentsProps={ { button: { variant: 'text' } } }  />
                                    {{/ if }}
                                {{/ if }}
                            {{/ each }}
                            {{# if (tableHasRemoveAction table) }}
                                <Button
                                    disabled={
                                           isOwnerLoading
                                        || {{# if table.enabledBy }}!ownerData.{{ table.enabledBy.name }} ||{{/ if }} {{ boolValue table.dataElement.isReadOnly }}
                                        || !isFormUpdateable()
                                        || !selectionModel.length
                                        || !ownerData?.{{ table.dataElement.name }}?.length
                                    }
                                    variant="text"
                                    startIcon={<MdiIcon path="link-off" />}
                                    onClick={ () => {
                                        const newList = (ownerData?.{{ table.dataElement.name }} ?? []).filter(e => !(selectionModel.find(s => s === e.__identifier)));
                                        storeDiff('{{ table.dataElement.name }}', newList);
                                        setSelectionModel([]);
                                    } }>
                                    {t('judo.pages.table.remove.selected', { defaultValue: 'Remove selected' })}
                                </Button>
                            {{/ if }}
                            <div>{/* Placeholder */}</div>
                        </GridToolbarContainer>
                    ),
                } }
            />
            {{> actor/src/fragments/table/error-feedback.fragment.hbs }}
        </>
    );
});
