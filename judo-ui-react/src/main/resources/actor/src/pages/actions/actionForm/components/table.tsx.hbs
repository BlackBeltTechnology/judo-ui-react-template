{{> fragment.header.hbs }}

{{# if isDebugPrint }}// include: actor/src/fragments/table/common-imports.fragment.hbs{{/ if }}
{{> actor/src/fragments/table/common-imports.fragment.hbs }}

import {
    {{# each (getApiImportsForFormAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import {
    {{ classServiceName table.dataElement.owner }}Impl,
    {{# neq (classServiceName table.dataElement.owner) (classServiceName ownerPage.dataElement.target) }}
        {{ classServiceName ownerPage.dataElement.target }}Impl,
    {{/ neq }}
} from '~/generated/data-axios';

export interface {{ tableComponentName table }}Props {
    ownerData: {{ classDataName table.dataElement.owner '' }};
    isOwnerLoading: boolean;
    editMode: boolean;
    isFormUpdateable: () => boolean;
    storeDiff: (attributeName: keyof {{ classDataName table.dataElement.owner '' }}, value: any) => void;
}

export const {{ tableComponentName table }} = forwardRef<RefreshableTable, {{ tableComponentName table }}Props>((props, ref) => {
    const { ownerData, isOwnerLoading, editMode, isFormUpdateable, storeDiff } = props;
    const { t } = useTranslation();
    const { openRangeDialog } = useRangeDialog();
    const { downloadFile, extractFileNameFromToken, uploadFile } = fileHandling();
    const { locale: l10nLocale } = useL10N();

    {{# if isDebugPrint }}// include: actor/src/fragments/page/sort-models.fragment.hbs{{/ if }}
    {{> actor/src/fragments/page/sort-models.fragment.hbs dataElement=table.dataElement defaultSortColumn=table.defaultSortColumn columns=table.columns }}

    {{# if isDebugPrint }}// include: actor/src/fragments/relation/hook-variables.fragment.hbs{{/ if }}
    {{> actor/src/fragments/relation/hook-variables.fragment.hbs rel=table }}

    {{# if isDebugPrint }}// include: actor/src/fragments/table/row-actions.fragment.hbs{{/ if }}
    {{> actor/src/fragments/table/row-actions.fragment.hbs table=table page=page }}

    {{# each table.actions as |action| }}
        {{# unless table.dataElement.isMemberTypeTransient }}
            {{# if action.isAddAction }}
                {{# if isDebugPrint }}// include: actor/src/fragments/action/range-call.fragment.hbs{{/ if }}
                {{> actor/src/fragments/action/range-call.fragment.hbs dataElement=table.dataElement }}
                {{# if isDebugPrint }}// include: actor/src/fragments/action/selection-model.fragment.hbs{{/ if }}
                {{> actor/src/fragments/action/selection-model.fragment.hbs dataElement=table.dataElement }}
            {{/ if }}
        {{/ unless }}
    {{/ each }}

    return (
        <StripedDataGrid
            { ...baseTableConfig }
            pageSizeOptions={[{{ calculateTablePageLimit table }}]}
            sx={ {
                // overflow: 'hidden',
                display: 'grid',
            } }
            getRowId={(row: { __identifier: string }) => row.__identifier}
            loading={ isOwnerLoading }
            rows={ ownerData?.{{ table.dataElement.name }} ?? [] }
            getRowClassName={ (params: GridRowClassNameParams) => {
                return params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd';
            } }
            columns={[ ...{{ table.dataElement.name }}Columns, ...columnsActionCalculator('{{ createId table.dataElement }}', {{ table.dataElement.name }}RowActions, t, { shownActions: 2 }) ]}
            disableRowSelectionOnClick
            sortModel={ {{ table.dataElement.name }}SortModel }
            onSortModelChange={(newModel: GridSortModel) => {
                set{{ ucFirst table.dataElement.name }}SortModel(newModel);
            }}
            components={ {
                Toolbar: () => (
                    <GridToolbarContainer>
                        {{# each table.actions as |action| }}
                            {{# unless table.dataElement.isMemberTypeTransient }}
                                {{# if action.isAddAction }}
                                    <Button
                                        id="{{ createId table.dataElement }}-add"
                                        startIcon={<MdiIcon path="attachment-plus" />}
                                        variant="text"
                                        onClick={ async () => {
                                            const res = await {{ table.dataElement.name }}RangeCall();

                                            if (res) {
                                                storeDiff('{{ table.dataElement.name }}', [
                                                    ...(ownerData.{{ table.dataElement.name }} || []),
                                                    ...(res as {{ classDataName table.dataElement.target 'Stored' }}[])
                                                ]);
                                            }
                                        } }
                                        disabled={
                                               isOwnerLoading
                                            || {{# if child.enabledBy }}!ownerData.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.dataElement.isReadOnly }}
                                            || !isFormUpdateable()
                                        }
                                    >
                                        {t('judo.pages.table.add', { defaultValue: 'Add' })}
                                    </Button>
                                {{/ if }}
                                {{# if action.isClearAction }}
                                    <Button
                                        id="{{ createId table.dataElement }}-clear"
                                        startIcon={<MdiIcon path="link_off" />}
                                        variant="text"
                                        onClick={ async () => {
                                            storeDiff('{{ table.dataElement.name }}', []);
                                        } }
                                        disabled={
                                               isOwnerLoading
                                            || {{# if child.enabledBy }}!ownerData.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.dataElement.isReadOnly }}
                                            || !isFormUpdateable()
                                        }
                                    >
                                        {t('judo.pages.table.clear', { defaultValue: 'Clear' })}
                                    </Button>
                                {{/ if }}
                            {{/ unless }}
                        {{/ each }}
                        <div>{/* Placeholder */}</div>
                    </GridToolbarContainer>
                ),
            } }
        />
    );
});
