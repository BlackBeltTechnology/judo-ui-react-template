// ParameterlessCallOperationAction: {{ getXMIID action }}
const {{ simpleActionDefinitionName action.actionDefinition }} = async ({{# if action.actionDefinition.targetType }}target?: {{ classDataName action.actionDefinition.targetType 'Stored' }}{{/ if }}) => {
  {{# with action.actionDefinition.operation as |operation| }}
  try {
    setIsLoading(true);
    {{# if operation.output }}const { data: result } = {{/ if }}await {{ getServiceImplForPage page }}.{{ operation.name }}{{# if action.actionDefinition.isContainedRelationAction }}{{ operationCallSuffix action }}{{/ if }}(
      {{# if page.container.table }}
        {{# unless operation.isStatic }}
          target!
        {{/ unless }}
      {{ else }}
        {{# unless operation.isStatic }}
          {{# if (actionShouldUseDataAsParam action) }}
            data
          {{ else }}
            {{# if action.actionDefinition.targetType }}
              target!
            {{ else }}
              data
            {{/ if }}
          {{/ if }}
        {{/ unless }}
      {{/ if }}
    );
    if (customActions?.post{{ firstToUpper (simpleActionDefinitionName action.actionDefinition) }}) {
      await customActions.post{{ firstToUpper (simpleActionDefinitionName action.actionDefinition) }}(
        {{# if action.actionDefinition.targetType }}target!,{{/ if }}
        {{# if operation.output }}result,{{/ if }}
        {{# if page.openInDialog }}onClose{{/ if }}
      );
    } else {
      showSuccessSnack(t('judo.action.operation.success', { defaultValue: 'Operation executed successfully' }) as string);
      {{# if (allowRefreshAfterOperationCall action) }}
        {{# if page.openInDialog }}
        if (rootPageId) {
          publish(`refresh:${rootPageId}`);
        } else {
        {{/ if }}
          await refresh();
        {{# if page.openInDialog }}
        }
        {{/ if }}
      {{/ if }}

      {{# if operation.postCallAccessNavigation }}
        try {
          const { data: pcan } = await {{ firstToLower (serviceRelationName operation.postCallAccessNavigation.accessRelation) }}Impl.list(undefined, {
            _identifier: result.__identifier,
          });
          {{# if action.targetPageDefinition.openInDialog }}
            await open{{ pageName operation.postCallAccessNavigation.pageDefinition }}({
              ownerData: pcan[0]
            });
          {{ else }}
            navigate(routeTo{{ pageName operation.postCallAccessNavigation.pageDefinition }}(pcan[0].__signedIdentifier));
          {{/ if }}
        } catch(error) {
          console.error('Could not proceed with post call access navigation', error);
        }
      {{ else }}
        {{# if operation.output }}
          {{# if action.targetPageDefinition.openInDialog }}
            await open{{ pageName action.targetPageDefinition }}({
            {{# and (isPageDataElementUnmappedSingle action.targetPageDefinition) action.targetPageDefinition.container.view }}
              ownerData: produceDataAdjustedOwner(),
              data: result,
            {{ else }}
              ownerData: result,
            {{/ and }}
            });
          {{ else }}
            navigate(routeTo{{ pageName action.targetPageDefinition }}(result.__signedIdentifier));
          {{/ if }}
        {{/ if }}
      {{/ if }}
    }
  } catch (error) {
    handleError(error);
  } finally {
    setIsLoading(false);
  }
  {{/ with }}
};
