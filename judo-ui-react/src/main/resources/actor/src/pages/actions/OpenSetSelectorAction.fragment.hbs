{{# with (getLinkParentForActionDefinition action.actionDefinition) as |link| }}
const {{ simpleActionDefinitionName action.actionDefinition }} = async (): Promise<{{ classDataName (getReferenceClassType link) 'Stored' }} | undefined> => {
  const { result, data: returnedData } = await open{{ pageName action.targetPageDefinition }}({
    {{# unless page.container.table }}
    ownerData: data,
    {{ else }}
    ownerData: getValue(owner.current, dataPath!, data),
    {{/ unless }}
    alreadySelected: {{# with (getRelationTypeForActionTarget action) as |rel| }}
                        {{# if container.table }}
                          []
                        {{ else }}
                          data.{{ rel.name }}{{# if rel.isCollection }} ?? []{{ else }} ? [data.{{ rel.name }}] : []{{/ if }}
                        {{/ if }}
                     {{ else }}
                       undefined
                     {{/ with }}
  });
  if (result === 'submit') {
    if (Array.isArray(returnedData) && returnedData.length) {
      try {
        {{# if link.isEager }}
          storeDiff('{{ link.dataElement.name }}', returnedData[0]);
        {{ else }}
          await {{ getServiceImplForPage page }}.set{{ firstToUpper link.dataElement.name }}(data, returnedData[0]);
          await refresh();
        {{/ if }}
        return returnedData[0];
      } catch(error) {
        console.error(error);
        return undefined;
      }
    }
  }
  return undefined;
};
{{/ with }}
