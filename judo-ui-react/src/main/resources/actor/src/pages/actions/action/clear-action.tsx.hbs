// Action: ClearAction

import type { JudoIdentifiable } from '@judo/data-api-common';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useSnackbar } from '{{ relativePathFromAction page action 'components' }}';
import { useErrorHandler, ERROR_PROCESSOR_HOOK_INTERFACE_KEY } from '{{ relativePathFromAction page action 'utilities' }}';
import {
    {{ classDataName action.dataElement.owner '' }},
} from '{{ relativePathFromAction page action 'generated/data-api' }}';
import {
    {{ classServiceName action.dataElement.owner }}Impl,
} from '{{ relativePathFromAction page action 'generated/data-axios'}}';

export type {{ actionFunctionTypeName action page }} = () => (owner: JudoIdentifiable<{{ classDataName page.dataElement.owner '' }}>, successCallback: () => void) => Promise<void>;

export const {{ actionFunctionHookName action page }}: {{ actionFunctionTypeName action page }} = () => {
    const handleActionError = useErrorHandler<JudoIdentifiable<{{ classDataName page.dataElement.owner '' }}>>(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=ClearAction))`);
    const [enqueueSnackbar] = useSnackbar();

    return async function {{ actionFunctionName action page }} (owner: JudoIdentifiable<{{ classDataName page.dataElement.owner '' }}>, successCallback: () => void) {
        try {
            await {{ classServiceName action.dataElement.owner }}Impl.set{{ firstToUpper action.dataElement.name }}(
                { __signedIdentifier: owner.__signedIdentifier } as JudoIdentifiable<{{ classDataName page.dataElement.owner '' }}>,
                [],
            );

            successCallback();
        } catch (error) {
            handleActionError(error);
        }
    }
};
