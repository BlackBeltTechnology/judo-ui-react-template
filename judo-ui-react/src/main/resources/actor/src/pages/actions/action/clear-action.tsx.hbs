{{> fragment.header.hbs }}
// Action: ClearAction

import type { JudoIdentifiable } from '@judo/data-api-common';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useSnackbar } from 'notistack';
import { useErrorHandler, ERROR_PROCESSOR_HOOK_INTERFACE_KEY } from '~/utilities';
import {
    {{ classDataName action.dataElement.owner '' }},
} from '~/generated/data-api';
import {
    {{ classServiceName action.dataElement.owner }}Impl,
} from '~/generated/data-axios';

export type {{ actionFunctionTypeName action }} = () => (owner: JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>, successCallback: () => void) => Promise<void>;

export const {{ actionFunctionHookName action }}: {{ actionFunctionTypeName action }} = () => {
    const handleActionError = useErrorHandler<JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>>(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=ClearAction))`);
    const { enqueueSnackbar } = useSnackbar();

    return async function {{ actionFunctionName action }} (owner: JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>, successCallback: () => void) {
        try {
            await {{ classServiceName action.dataElement.owner }}Impl.set{{ firstToUpper action.dataElement.name }}(
                { __signedIdentifier: owner.__signedIdentifier } as JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>,
                [],
            );

            successCallback();
        } catch (error) {
            handleActionError(error);
        }
    }
};
