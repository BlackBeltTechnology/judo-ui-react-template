const {{ simpleActionDefinitionName action.actionDefinition }} = async () => {
  {{# if (hasPageRequiredBy page) }}
    {{> actor/src/fragments/page/local-validate.fragment.hbs }}
  {{/ if }}
  {{# if page.openInDialog }}
    if (isDraft) {
      try {
        setIsLoading(true);
        await validate(cleanUpPayload(payloadDiff.current));
        // we send data back in draft mode, because the owner is responsible to handle it in-memory
        onSubmit(data, 'submit-draft');
      } catch (error) {
        if (ownerValidation && !isErrorNestedValidationError(error, '{{ page.dataElement.name }}')) {
          // relation form has no remaining error(s), proceed with submission
          onSubmit(payloadDiff.current, 'submit-draft');
        } else {
          let relationName: string | undefined = (isDraft && ownerValidation) ? '{{ page.dataElement.name }}' : undefined;
          handleError<{{ classDataName (getReferenceClassType page) '' }}>(error, { setValidation }, data, relationName);
        }
      } finally {
        setIsLoading(false);
      }

      return;
    }
  {{/ if }}
  setIsLoading(true);
  try {
    const { data: res } = await {{ getServiceImplForPage page }}.update(cleanUpPayload(payloadDiff.current));
    if (res) {
      showSuccessSnack(t('judo.action.save.success', { defaultValue: 'Changes saved' }));
      {{# and page.openInDialog action.actionDefinition.autoCloseOnSave }}
        onSubmit();
      {{ else }}
        setValidation(new Map<keyof {{ classDataName (getReferenceClassType page) '' }}, string>());
        setEditMode(false);
        {{# with (getRefreshActionDefinitionForContainer page.container) as |actionDefinition| }}
          await actions.{{ simpleActionDefinitionName actionDefinition }}!(getPageQueryCustomizer());
        {{/ with }}
      {{/ and }}
    }
  } catch (error) {
    handleError<{{ classDataName (getReferenceClassType page) '' }}>(error, { setValidation }, data);
  } finally {
    setIsLoading(false);
  }
};
