{{> fragment.header.hbs }}
// Action: ViewAction

import { lazy, Suspense } from 'react';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useTrackService } from '@pandino/react-hooks';
import type { JudoIdentifiable } from '@judo/data-api-common';
import type {
    {{# each (getApiImportsForRowAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import { useJudoNavigation } from '~/components';
import { useDialog } from '~/components/dialog';
{{# if action.target.dataElement.isRefreshable }}
    {{# unless (pageShouldOpenInDialog action.target) }}
        import { routeTo{{ pageName action.target }} } from '~/routes';
    {{/ unless }}
{{/ if }}

export const {{ getCustomizationActionFunctionInterfaceKey action }} = '{{ actionFunctionTypeName action }}';
export type {{ actionFunctionTypeName action }} = () => ({{# if (hasDataElementOwner action.dataElement) }}owner: {{{ getTypeForRelationOwner action.dataElement }}}, {{/ if }}entry: {{ classDataName action.target.dataElement.target 'Stored' }}, successCallback: () => void) => Promise<void>;

{{# if action.target.dataElement.isRefreshable }}
    {{# if (pageShouldOpenInDialog action.target) }}
      const {{ pageName action.target }} = lazy(() => import('~/pages/{{ pageIndexRelativeImportPath action.target }}'));
    {{/ if }}
{{/ if }}



export const {{ actionFunctionHookName action }}: {{ actionFunctionTypeName action }} = () => {
    const [createDialog, closeDialog, closeAllDialogs] = useDialog();
    const { navigate } = useJudoNavigation();
    const { service: useCustomNavigation } = useTrackService<{{ actionFunctionTypeName action }}>(`(${OBJECTCLASS}=${ {{ getCustomizationActionFunctionInterfaceKey action }} })`);

    if (useCustomNavigation) {
        const customNavigation = useCustomNavigation();
        return customNavigation;
    }

    return async function ({{# if (hasDataElementOwner action.dataElement) }}owner: {{{ getTypeForRelationOwner action.dataElement }}}, {{/ if }}entry: {{ classDataName action.target.dataElement.target 'Stored' }}, successCallback: () => void) {
        {{# if action.target.dataElement.isRefreshable }}
            {{# unless (pageShouldOpenInDialog action.target) }}
                closeAllDialogs();
                navigate(routeTo{{ pageName action.target }}(entry.__signedIdentifier));
            {{ else }}
                createDialog({
                    {{# if action.target.dialogSize }}
                        fullWidth: true,
                        maxWidth: '{{ toLower action.target.dialogSize.name }}',
                    {{/ if }}
                    onClose: (event: object, reason: string) => {
                        if (reason !== 'backdropClick') {
                            closeDialog();
                        }
                    },
                    children: (
                        <Suspense>
                          <{{ pageName action.target }}
                              successCallback={ () => {
                                  successCallback();
                              } }
                              cancel={closeDialog}
                              entry={entry}
                          />
                        </Suspense>
                    ),
                });
            {{/ unless }}
        {{ else }}
            // target page is not refreshable
        {{/ if }}
    }
};
