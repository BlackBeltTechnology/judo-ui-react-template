const {{ simpleActionDefinitionName action.actionDefinition }} = async (openCreated?: boolean) => {
  try {
    {{# unless page.dataElement.isAccess }}
    if (isDraft) {
      try {
        setIsLoading(true);
        const validationData = simpleCloneDeep(owner.current);
        setValue(validationData, dataPath!, data);
        await validate(validationData);
        onSubmit(data, 'submit-draft');
      } catch (error) {
        if (ownerValidation && !isErrorNestedValidationError(error, dataPath)) {
          // relation form has no remaining error(s), proceed with submission
          onSubmit(data, 'submit-draft');
        } else {
          handleError<{{ classDataName (getReferenceClassType page) '' }}>(error, { setValidation }, owner.current, dataPath!);
        }
      } finally {
        setIsLoading(false);
      }

      return;
    }
    {{/ unless }}
    setIsLoading(true);
    const queryCustomizer: { _mask?: string } | undefined = maskRequest ? {
      _mask: maskRequest,
    } : undefined;
    const { data: res } = await {{ getServiceImplForPage page }}.create{{# if action.targetDataElement }}{{ firstToUpper action.targetDataElement.name }}{{/ if }}({{# unless action.ownerDataElement.isAccess }}owner.current, {{/ unless }}data, queryCustomizer);
    if (customActions?.post{{ firstToUpper (simpleActionDefinitionName action.actionDefinition) }}) {
      await customActions.post{{ firstToUpper (simpleActionDefinitionName action.actionDefinition) }}(data, res, onSubmit, onClose, openCreated);
    } else {
      showSuccessSnack(t('judo.action.create.success', { defaultValue: 'Create successful' }));
      await onSubmit(res, isDraft ? 'submit-draft' : 'submit', openCreated);
    }
  } catch (error) {
     handleError<{{ classDataName (getReferenceClassType page) '' }}>(error, { setValidation }, owner.current, dataPath);
  } finally {
    setIsLoading(false);
  }
};
