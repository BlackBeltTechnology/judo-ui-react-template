const {{ simpleActionDefinitionName action.actionDefinition }} = async () => {
  try {
    {{# unless page.dataElement.isAccess }}
    if (isDraft) {
      try {
        setIsLoading(true);
        await validate(cleanUpPayload(payloadDiff.current));
        onSubmit(payloadDiff.current, true);
      } catch (error) {
        handleError<{{ classDataName (getReferenceClassType page) '' }}>(error, { setValidation }, data, isDraft ? '{{ page.dataElement.name }}' : undefined);
      } finally {
        setIsLoading(false);
      }

      return;
    }
    {{/ unless }}
    setIsLoading(true);
    const payload: typeof payloadDiff.current = cleanUpPayload(payloadDiff.current);
    const res = await {{ getServiceImplForPage page }}.create{{# if action.targetDataElement }}{{ firstToUpper action.targetDataElement.name }}{{/ if }}({{# unless action.ownerDataElement.isAccess }}ownerData, {{/ unless }}payload);
    if (customActions?.post{{ firstToUpper (simpleActionDefinitionName action.actionDefinition) }}) {
      await customActions.post{{ firstToUpper (simpleActionDefinitionName action.actionDefinition) }}(data, res, onSubmit, onClose);
    } else {
      showSuccessSnack(t('judo.action.create.success', { defaultValue: 'Create successful' }));
      onSubmit(res);
    }
  } catch (error) {
     handleError<{{ classDataName (getReferenceClassType page) '' }}>(error, { setValidation }, data);
  } finally {
    setIsLoading(false);
  }
};
