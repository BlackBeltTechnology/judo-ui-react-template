// Action: CreateAction

import { useState, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import {
    Button,
    DialogActions,
    DialogContent,
    DialogContentText,
    DialogTitle,
    Grid,
} from '@mui/material';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useSnackbar } from '{{ relativePathFromAction page action 'components' }}';
import type { DialogOption } from '{{ relativePathFromAction page action 'components/dialog' }}';
import { useDialog } from '{{ relativePathFromAction page action 'components/dialog' }}';
import { FilterOption, FilterType } from '{{ relativePathFromAction page action 'components-api' }}';
import { useErrorHandler, ERROR_PROCESSOR_HOOK_INTERFACE_KEY } from '{{ relativePathFromAction page action 'utilities' }}';

import {
    {{# each (getApiImportsForCreateAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '{{ relativePathFromAction page action 'generated/data-api' }}';
import {
    {{ dataElementRelationName action.target.dataElement }}Impl,
    {{ classServiceName action.target.dataElement.target }}Impl,
} from '{{ relativePathFromAction page action 'generated/data-axios'}}';
import { {{ pageActionFormComponentName action page }} } from './{{ pageActionFormComponentName action page }}';

export type {{ actionFunctionTypeName action page }} = () => ({{# unless (isActionAccess action) }}owner: {{ classDataName page.dataElement.target 'Stored' }},{{/ unless }}successCallback: (result: {{ classDataName action.target.dataElement.target 'Stored' }}) => void) => void;

export const {{ actionFunctionHookName action page }}: {{ actionFunctionTypeName action page }} = () => {
    const [createDialog, closeDialog] = useDialog();
    {{# unless (actionHasVisualElements action) }}
        const handleActionError = useErrorHandler(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Create)(component={{ actionFunctionTypeName action page }}))`);
    {{/ unless }}
    const [enqueueSnackbar] = useSnackbar();

    return function {{ actionFunctionName action page }} ({{# unless (isActionAccess action) }}owner: {{ classDataName page.dataElement.target 'Stored' }},{{/ unless }}successCallback: (result: {{ classDataName action.target.dataElement.target 'Stored' }}) => void) {
        {{# if (actionHasVisualElements action) }}
            createDialog({
                fullWidth: true,
                maxWidth: 'lg',
                onClose: (event: object, reason: string) => {
                    if (reason !== 'backdropClick') {
                        closeDialog();
                    }
                },
                children: (
                    <{{ pageActionFormComponentName action page }}
                        successCallback={(result) => { closeDialog(); successCallback(result); }}
                        cancel={closeDialog}
                        {{# unless (isActionAccess action) }}
                            owner={owner}
                        {{/ unless }}
                    />
                ),
            });
        {{ else }}
            (async () => {
                try {
                    const res = await {{ dataElementRelationName action.target.dataElement }}Impl.create{{ ucFirst action.target.dataElement.name }}({{# if (hasDataElementOwner action.dataElement) }}owner, {{/ if }} {});

                    if (res) {
                        successCallback(res);
                    }
                } catch (error) {
                    handleActionError(error);
                }
            })();
        {{/ if }}
    }
}
