{{> fragment.header.hbs }}
// Action: CreateAction

import { useState, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import {
    Button,
    DialogActions,
    DialogContent,
    DialogContentText,
    DialogTitle,
    Grid,
} from '@mui/material';
import { LoadingButton } from '@mui/lab';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useSnackbar } from 'notistack';
import type { JudoIdentifiable } from '@judo/data-api-common';
import { useJudoNavigation } from '~/components';
import type { DialogOption } from '~/components/dialog';
import { useDialog } from '~/components/dialog';
import { FilterOption, FilterType } from '~/components-api';
import { useErrorHandler, ERROR_PROCESSOR_HOOK_INTERFACE_KEY } from '~/utilities';
import { toastConfig } from '~/config';

import {
    {{# each (getApiImportsForCreateAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import {
    {{ dataElementRelationName action.target.dataElement }}Impl,
    {{ classServiceName action.target.dataElement.target }}Impl,
} from '~/generated/data-axios';
import { {{ pageActionFormComponentName action }} } from './{{ pageActionFormComponentName action }}';

export type {{ actionFunctionTypeName action }} = () => ({{# unless (isActionAccess action) }}owner: JudoIdentifiable<{{ classDataName action.dataElement.target '' }}>,{{/ unless }}successCallback: () => void) => void;

export const {{ actionFunctionHookName action }}: {{ actionFunctionTypeName action }} = () => {
    const [createDialog, closeDialog] = useDialog();
    const { t } = useTranslation();
    const { navigate } = useJudoNavigation();
    {{# unless (actionHasVisualElements action) }}
        const handleActionError = useErrorHandler(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Create)(component={{ actionFunctionTypeName action }}))`);
    {{/ unless }}
    const { enqueueSnackbar } = useSnackbar();

    return function {{ actionFunctionName action }} ({{# unless (isActionAccess action) }}owner: JudoIdentifiable<{{ classDataName action.dataElement.target '' }}>,{{/ unless }}successCallback: () => void) {
        {{# if (actionHasVisualElements action) }}
            createDialog({
                fullWidth: true,
                maxWidth: 'lg',
                onClose: (event: object, reason: string) => {
                    if (reason !== 'backdropClick') {
                        closeDialog();
                    }
                },
                children: (
                    <{{ pageActionFormComponentName action }}
                        successCallback={() => {
                            closeDialog();
                            enqueueSnackbar(t('judo.action.create.success', { defaultValue: 'Create successful' }), {
                                variant: 'success',
                                ...toastConfig.success,
                            });
                            successCallback();
                        }}
                        cancel={closeDialog}
                        {{# unless (isActionAccess action) }}
                            owner={owner}
                        {{/ unless }}
                    />
                ),
            });
        {{ else }}
            (async () => {
                // Action did not have any inputs, therefore we auto call the underlying operation.
                try {
                    const res = await {{ dataElementRelationName action.target.dataElement }}Impl.create{{ ucFirst action.target.dataElement.name }}({{# if (hasDataElementOwner action.dataElement) }}owner, {{/ if }} {} as unknown as any);

                    if (res) {
                        successCallback();
                    }
                } catch (error) {
                    handleActionError(error);
                }
            })();
        {{/ if }}
    }
}
