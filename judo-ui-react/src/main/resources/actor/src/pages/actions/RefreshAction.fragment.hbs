{{# if action.targetDataElement }}
const {{ simpleActionDefinitionName action.actionDefinition }} = async (queryCustomizer: {{ classDataName action.targetDataElement.target 'QueryCustomizer' }}): Promise<JudoRestResponse<{{ classDataName action.targetDataElement.target 'Stored' }}{{# if action.targetDataElement.isCollection }}[]{{/ if }}>> => {
  return {{ getServiceImplForPage page }}.list{{ firstToUpper action.targetDataElement.name }}({{{ refreshActionDataParameter action }}}, queryCustomizer{{# with (getTableParentForActionDefinition action.actionDefinition) as |table| }}{{# if table.showTotalCount }}, { [X_JUDO_COUNT_RECORDS]: true }{{/ if }}{{/ with }});
}
{{ else }}
const {{ simpleActionDefinitionName action.actionDefinition }} = async (queryCustomizer: {{ classDataName (getReferenceClassType page) 'QueryCustomizer' }}): Promise<JudoRestResponse<{{ classDataName (getReferenceClassType page) 'Stored' }}{{# if page.container.table }}[]{{/ if }}>> => {
  try {
    setIsLoading(true);
    setEditMode(false);
    {{# if page.container.table }}
      {{# with (getTableParentForActionDefinition action.actionDefinition) as |table| }}
      return {{ getServiceImplForPage page }}.list({{# if (pageHasSignedId page) }}{ __signedIdentifier: signedIdentifier } as JudoIdentifiable<any>{{ else }}{{# if page.openInDialog }}ownerData{{ else }}undefined{{/ if }}{{/ if }}, queryCustomizer{{# if table.showTotalCount }}, { [X_JUDO_COUNT_RECORDS]: 'true' }{{/ if }});
      {{/ with }}
    {{ else }}
      const response = await {{ getServiceImplForPage page }}.refresh({{{ refreshActionDataParameter action }}}, getPageQueryCustomizer());
      const { data: result } = response;
      setData(result);
      setLatestViewData(result);
      // re-set payloadDiff
      payloadDiff.current = {
          __identifier: result.__identifier,
          __signedIdentifier: result.__signedIdentifier,
          __version: result.__version,
          __entityType: result.__entityType,
      } as Record<keyof {{ classDataName (getReferenceClassType page) 'Stored' }}, any>;
      if (customActions?.post{{ firstToUpper (simpleActionDefinitionName action.actionDefinition) }}) {
        await customActions?.post{{ firstToUpper (simpleActionDefinitionName action.actionDefinition) }}(result{{# unless page.container.table }}, storeDiff, setValidation{{/ unless }});
      }
      return response;
    {{/ if }}
  } catch (error) {
    handleError(error);
    setLatestViewData(null);
    return Promise.reject(error);
  } finally {
    setIsLoading(false);
    {{# if page.container.view }}
    setRefreshCounter((prevCounter) => prevCounter + 1);
    {{/ if }}
  }
};
{{/ if }}
