const {{ simpleActionDefinitionName action.actionDefinition }} = async () => {
  const { result, data: returnedData } = await open{{ pageName action.targetPageDefinition }}({
    ownerData: getValue(owner.current, dataPath!, data),
    alreadySelected: {{# with (getRelationTypeForActionTarget action) as |rel| }}
                        {{# if page.container.table }}
                          []
                        {{ else }}
                          data.{{ rel.name }}{{# if rel.isCollection }} ?? []{{ else }} ? [data.{{ rel.name }}] : []{{/ if }}
                        {{/ if }}
                     {{ else }}
                       undefined
                     {{/ with }}
  });
  if (result === 'submit') {
    if (Array.isArray(returnedData) && returnedData.length) {
      {{# with (getTableParentForActionDefinition action.actionDefinition) as |table| }}
        {{# if table.isEager }}
          storeDiff('{{ table.dataElement.name }}', [...(data.{{ table.dataElement.name }} || []), ...returnedData]);
        {{ else }}
          try {
            setIsLoading(true);
            await {{ getServiceImplForPage page }}.add{{ firstToUpper action.targetDataElement.name }}(
              owner.current,
              returnedData
            );
            await refresh();
          } catch(e) {
            console.error(e);
          } finally {
            setIsLoading(false);
          }
        {{/ if }}
      {{/ with }}
    }
  }
};

