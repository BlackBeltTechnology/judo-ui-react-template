const {{ simpleActionDefinitionName action.actionDefinition }} = async (target: {{ classDataName action.actionDefinition.targetType 'Stored' }}, isDraft?: boolean) => {
  {{# if page.container.form }}
  if (!isDraft) {
    try {
      await {{ getServiceImplForPage page }}.validateCreate({{# unless page.dataElement.isAccess }}ownerData, {{/ unless }}cleanUpPayload(payloadDiff.current));
      setValidation(new Map());
    } catch(error) {
      handleError<{{ classDataName (getReferenceClassType page) '' }}>(error, { setValidation }, data);
      return;
    }
  }
  {{/ if }}
  if (isDraft) {
    {{# with (getOpenFormActionPairForOpenPageAction page action) as |openFormAction| }}
      const { result, data: returnedData } = await open{{ pageName openFormAction.targetPageDefinition }}(
        {{# if (pageHasSignedId page) }}
          { __signedIdentifier: signedIdentifier } as JudoIdentifiable<any>
        {{ else }}
          {{# if page.openInDialog }}
            ownerData
          {{ else }}
            data
          {{/ if }}
        {{/ if }},
        target,
        true,
        validate{{ firstToUpper openFormAction.targetDataElement.name }}
      );
      // we might need to differentiate result handling between operation inputs and crud relation creates
      if (result === 'submit-draft' && returnedData) {
        {{# if action.targetDataElement.isCollection }}
          const existingIndex = (payloadDiff.current.{{ action.targetDataElement.name }} || []).findIndex((r: { __identifier?: string }) => r.__identifier === returnedData.__identifier);
          if (existingIndex > -1) {
            payloadDiff.current.{{ action.targetDataElement.name }}[existingIndex] = {
              ...returnedData,
            };
          }
          storeDiff('{{ action.targetDataElement.name }}', [...(payloadDiff.current.{{ action.targetDataElement.name }} || [])]);
        {{ else }}
          storeDiff('{{ action.targetDataElement.name }}', {
            ...returnedData
          });
        {{/ if }}
        return;
      }
    {{/ with }}
  } else {
  {{# if action.targetPageDefinition.openInDialog }}
    await open{{ pageName action.targetPageDefinition }}(target!);
    {{# with (getRefreshActionDefinitionForContainer page.container) as |actionDefinition| }}
      {{# if page.container.view }}
        if (!editMode) {
          await actions.{{ simpleActionDefinitionName actionDefinition }}!(processQueryCustomizer(getPageQueryCustomizer()));
        }
      {{/ if }}
      {{# if page.container.table }}
        setRefreshCounter((prev) => prev + 1);
      {{/ if }}
    {{/ with }}
  {{ else }}
    {{# if action.targetPageDefinition }}
      {{# if (pageHasSignedId action.targetPageDefinition) }}
      // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
      {{/ if }}
      navigate(routeTo{{ pageName action.targetPageDefinition }}({{# if (pageHasSignedId action.targetPageDefinition) }}(target{{# if page.container.view }} || data{{ else }}!{{/ if }}).__signedIdentifier{{/ if }}));
      {{# if page.openInDialog }}
        onClose();
      {{/ if }}
    {{ else }}
      // There was no .targetPageDefinition for this action. Target Page is most likely empty in the model!
    {{/ if }}
  {{/ if }}
  }
};
