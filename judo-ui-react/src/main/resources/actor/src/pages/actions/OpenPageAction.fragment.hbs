const {{ simpleActionDefinitionName action.actionDefinition }} = async (target: {{ classDataName action.actionDefinition.targetType 'Stored' }}, isDraftParam?: boolean) => {
  {{# if (isActionParentEagerTable action) }}
    const itemIndex = {{# with (getTableParentForActionDefinition action.actionDefinition) as |table| }}(data.{{ table.relationName }} || []).findIndex(r => r.__identifier === target.__identifier)!{{/ with }};
  {{/ if }}
  {{# and (isActionParentEagerElement action) action.targetPageDefinition.openInDialog }}
    if (isDraftParam) {
      const { result, data: returnedData } = await open{{ pageName action.targetPageDefinition }}({
        ownerData: {{# if (pageHasSignedId page) }}
                     { __signedIdentifier: signedIdentifier } as any
                   {{ else }}
                     {{# if page.openInDialog }}
                       ownerData
                     {{ else }}
                       data
                     {{/ if }}
                   {{/ if }},
        templateDataOverride: target,
        {{# if (isActionParentEagerElement action) }}
        isDraft: true,
        ownerValidation: validate,
        dataPath: `${dataPath ? (dataPath + '.') : ''}{{ action.targetPageDefinition.dataElement.name }}{{# if (isActionParentEagerTable action) }}[${itemIndex!}]{{/ if }}`
        {{/ if }}
      });
      // we might need to differentiate result handling between operation inputs and crud relation creates
      if (result === 'submit-draft' && returnedData) {
        {{# if action.targetDataElement.isCollection }}
          const existingIndex = (data.{{ action.targetDataElement.name }} || []).findIndex((r: { __identifier?: string }) => r.__identifier === returnedData.__identifier);
          if (existingIndex > -1) {
            // we need to create a copy to keep order, and because mui datagrid freezes elements, and crashes on reference updates
            const updatedList = [...(data.{{ action.targetDataElement.name }} || [])];
            updatedList[existingIndex] = {
              ...returnedData,
            };
            storeDiff('{{ action.targetDataElement.name }}', updatedList);
          }
        {{ else }}
          storeDiff('{{ action.targetDataElement.name }}', {
            ...returnedData
          });
        {{/ if }}
        return;
      }
      if (result === 'delete' && returnedData) {
        {{# if action.targetDataElement.isCollection }}
          const existingIndex = (data.{{ action.targetDataElement.name }} || []).findIndex((r: { __identifier?: string }) => r.__identifier === returnedData.__identifier);
          if (existingIndex > -1) {
            // we need to create a copy to keep order, and because mui datagrid freezes elements, and crashes on reference updates
            const updatedList = [...(data.{{ action.targetDataElement.name }} || [])];
            updatedList.splice(existingIndex, 1);
            storeDiff('{{ action.targetDataElement.name }}', updatedList);
          }
        {{ else }}
          storeDiff('{{ action.targetDataElement.name }}', null);
        {{/ if }}
        return;
      }
      if (result === 'close') {
        return;
      }
    } else {
  {{/ and }}
  {{# if action.targetPageDefinition.openInDialog }}
    await open{{ pageName action.targetPageDefinition }}({
      ownerData: target!,
    });
    await refresh();
  {{ else }}
    {{# if action.targetPageDefinition }}
      {{# if (pageHasSignedId action.targetPageDefinition) }}
      // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
      {{/ if }}
      navigate(routeTo{{ pageName action.targetPageDefinition }}({{# if (pageHasSignedId action.targetPageDefinition) }}((target as {{ classDataName action.actionDefinition.targetType 'Stored' }}){{# if page.container.view }} || data{{ else }}!{{/ if }}).__signedIdentifier{{/ if }}));
      {{# if page.openInDialog }}
        onSubmit();
      {{/ if }}
    {{ else }}
      // There was no .targetPageDefinition for this action. Target Page is most likely empty in the model!
    {{/ if }}
  {{/ if }}
  {{# and (isActionParentEagerElement action) action.targetPageDefinition.openInDialog }}
    }
  {{/ and }}
};
