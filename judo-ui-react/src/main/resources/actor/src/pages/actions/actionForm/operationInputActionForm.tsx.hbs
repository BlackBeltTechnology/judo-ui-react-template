// Action: CallOperationAction

import { useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react';
import { useTranslation } from 'react-i18next';
import {
    Button,
    IconButton,
    DialogActions,
    DialogContent,
    DialogContentText,
    DialogTitle,
    Paper,
    Box,
    Container,
    Grid,
    InputAdornment,
    TextField,
    MenuItem,
    Typography,
    Card,
    CardContent,
} from '@mui/material';
import { DatePicker, DateTimePicker, TimePicker } from '@mui/x-date-pickers';
import { DataGrid, GridRowId, GridSortModel,GridSortItem, GridSelectionModel, GridToolbarContainer, GridRenderCellParams, GridRowParams, GridColDef } from '@mui/x-data-grid';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { JudoIdentifiable } from '@judo/data-api-common';
import type { Dayjs } from 'dayjs';
import {
    MdiIcon,
    ModeledTabs,
    TrinaryLogicCombobox,
    AggregationInput,
    useSnackbar,
    useRangeDialog,
    columnsActionCalculator,
} from '{{ relativePathFromAction ownerPage action 'components' }}';
import { FilterOption, FilterType } from '{{ relativePathFromAction ownerPage action 'components-api' }}';
import {
    {{# each (getApiImportsForCallOperationAction action ownerPage) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '{{ relativePathFromAction ownerPage action 'generated/data-api' }}';
import {
    {{ classServiceName action.inputParameterPage.dataElement.target }}Impl,
    {{ classServiceName action.dataElement.owner }}Impl,
} from '{{ relativePathFromAction ownerPage action 'generated/data-axios'}}';
import { useErrorHandler, ERROR_PROCESSOR_HOOK_INTERFACE_KEY, fileHandling, processQueryCustomizer, TableRowAction, uiDateToServiceDate, stringToBooleanSelect, booleanToStringSelect } from '{{ relativePathFromAction ownerPage action 'utilities' }}';
import { baseTableConfig, baseColumnConfig, toastConfig } from '{{ relativePathFromAction ownerPage action 'config' }}';

{{# with action.inputParameterPage as |page| }}
    export interface {{ pageActionFormComponentName action ownerPage }}Props {
        successCallback: ({{# if action.outputParameterPage }}result?: {{ classDataName action.outputParameterPage.dataElement.target 'Stored' }}{{/ if }}) => void;
        cancel: () => void;
        {{# if action.operation.isMapped }}
            owner: {{ classDataName action.dataElement.owner 'Stored' }};
        {{/ if }}
    }

    export function {{ pageActionFormComponentName action ownerPage }}({
        successCallback,
        cancel,
        {{# if action.operation.isMapped }}
            owner,
        {{/ if }}
    } : {{ pageActionFormComponentName action ownerPage }}Props) {
        const { t } = useTranslation();
        const { openRangeDialog } = useRangeDialog();
        const { downloadFile, uploadFile } = fileHandling();

        const handleFetchError = useErrorHandler(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Fetch))`);
        const handleActionError = useErrorHandler<{{ classDataName action.inputParameterPage.dataElement.target '' }}>(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=CallOperation)(component={{ pageActionFormComponentName action ownerPage }}))`);
        const [enqueueSnackbar] = useSnackbar();
        const [isLoading, setIsLoading] = useState<boolean>(false);
        const [data, setData] = useState<{{ classDataName action.inputParameterPage.dataElement.target '' }}>({} as unknown as {{ classDataName action.inputParameterPage.dataElement.target '' }});
        const [validation, setValidation] = useState<Map<string, string>>(new Map());
        const [editMode] = useState<boolean>(true);
        const storeDiff: (attributeName: string, value: any) => void = useCallback((attributeName: string, value: any) => {
            setData({ ...data, [attributeName]: value });
        }, [data]);
        const title: string = t('{{ idToTranslationKey page.fQName application }}', { defaultValue: '{{ page.label }}' });

        {{# if (hasVisualReferences action.inputParameterPage) }}
            {{# each (getPageTables action.inputParameterPage) as |table| }}
                {{> actor/src/fragments/relation/relation-variables.fragment.hbs rel=table }}
                {{> actor/src/fragments/action/range-call.fragment.hbs dataElement=table.dataElement action=action }}
                {{> actor/src/fragments/action/selection-model.fragment.hbs dataElement=table.dataElement }}
            {{/ each }}
            {{# each (getPageWritableLinks action.inputParameterPage) as |link| }}
                {{> actor/src/fragments/relation/relation-variables.fragment.hbs rel=link }}
                {{> actor/src/fragments/action/range-call.fragment.hbs dataElement=link.dataElement action=action }}
                {{> actor/src/fragments/action/selection-model.fragment.hbs dataElement=link.dataElement }}
            {{/ each }}
        {{/ if }}
        {{# each (getPageTables action.inputParameterPage) as |table| }}
            const {{ table.dataElement.name }}RowActions: TableRowAction<{{ classDataName table.dataElement.target 'Stored' }}>[] = [
                {{# each table.rowActions as |action| }}
                    {{# if action.isRemoveAction }}
                        {
                            label: t('judo.pages.table.remove', { defaultValue: 'Remove' }) as string,
                            icon: <MdiIcon path="{{ action.icon.name }}" />,
                            action: async (row: {{ classDataName table.dataElement.target 'Stored' }}) => {
                                const index = (data.{{ action.dataElement.name }} || []).findIndex((e: {{ classDataName table.dataElement.target 'Stored' }}) => e.__signedIdentifier === row.__signedIdentifier);
                                setData({
                                    ...data,
                                    ['{{ action.dataElement.name }}']: [...(data.{{ action.dataElement.name }} || [])].splice(index, 1),
                                });
                            },
                        },
                    {{/ if }}
                {{/ each }}
            ];
        {{/ each }}
        {{# if action.operation.input.target.isTemplateable }}
            const fetchData = async () => {
                setIsLoading(true);

                try {
                    const res = await {{ classServiceName action.inputParameterPage.dataElement.target }}Impl.getTemplate();
                    setData(res);
                } catch(e) {
                    handleFetchError(e);
                } finally {
                    setIsLoading(false);
                }
            };

            useEffect(() => {
                fetchData();
            }, []);
        {{/ if }}

        // TODO: implement confirmation handling
        const submit = async () => {
            setIsLoading(true);

            try {
                {{# if action.outputParameterPage }}
                    const res = await {{ classServiceName action.dataElement.owner }}Impl.{{ action.dataElement.name }}({{# if action.operation.isMapped }}owner, {{/ if }}data);

                    if (res) {
                        successCallback(res);
                    }
                {{ else }}
                    await {{ classServiceName action.dataElement.owner }}Impl.{{ action.dataElement.name }}({{# if action.operation.isMapped }}owner, {{/ if }}data);

                    successCallback();
                {{/ if }}
            } catch (error) {
                handleActionError(error, { setValidation }, data);
            } finally {
                setIsLoading(false);
            }
        };

        return (
            {{# with (getDataContainerForPage page) as |rootChild| }}
                <>
                    <DialogTitle>
                        {title}
                        <IconButton
                            aria-label="close"
                            onClick={ () => cancel() }
                            sx={ {
                                position: 'absolute',
                                right: 8,
                                top: 8,
                                color: (theme) => theme.palette.grey[500],
                            } }
                        >
                            <MdiIcon path="close" />
                        </IconButton>
                    </DialogTitle>
                    <DialogContent dividers>
                        <Grid container xs={12} sm={12} spacing={2} direction="{{# if rootChild.isDirectionHorizontal }}row{{ else }}column{{/ if }}" alignItems="{{ alignItems rootChild }}" justifyContent="{{ justifyContent rootChild }}">
                            {{# each rootChild.children as |child| }}
                                {{# unless (excludeWidgetFromTree child) }}
                                    {{> (getWidgetTemplate child) }}
                                {{/ unless }}
                            {{/ each }}
                        </Grid>
                    </DialogContent>
                    <DialogActions>
                        <Button variant="text" onClick={ () => cancel() } disabled={isLoading}>
                            {{# if (getBackButtonForOperationInputPage action.inputParameterPage) }}
                                {{# with (getBackButtonForOperationInputPage action.inputParameterPage) as |backButton| }}
                                    { t('{{ idToTranslationKey action.fQName application }}', { defaultValue: '{{ backButton.label }}' }) as string }
                                {{/ with }}
                            {{ else }}
                                { t('judo.pages.cancel', { defaultValue: 'Cancel' }) as string }
                            {{/ if }}
                        </Button>
                        <Button variant="contained" onClick={ () => submit() } disabled={isLoading}>
                            {{# if (getSaveButtonForOperationInputPage action.inputParameterPage) }}
                                {{# with (getSaveButtonForOperationInputPage action.inputParameterPage) as |saveButton| }}
                                    { t('{{ idToTranslationKey action.fQName application }}', { defaultValue: '{{ saveButton.label }}' }) as string }
                                {{/ with }}
                            {{ else }}
                                { t('judo.pages.submit', { defaultValue: 'Submit' }) as string }
                            {{/ if }}
                        </Button>
                    </DialogActions>
                </>
            {{/ with }}
        );
    }
{{/ with }}
