{{> fragment.header.hbs }}
// Action: CallOperationAction

{{# if isDebugPrint }}// include: actor/src/fragments/page/common-form-imports.fragment.hbs{{/ if }}
{{> actor/src/fragments/page/common-form-imports.fragment.hbs }}

import {
    {{# each (getApiImportsForCallOperationAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import {
    {{ classServiceName page.dataElement.target }}Impl,
    {{ classServiceName action.dataElement.owner }}Impl,
} from '~/generated/data-axios';

{{# each page.originalPageContainer.links as |link| }}
    import { {{ linkComponentName link }} } from './components/{{ linkComponentName link }}';
{{/ each }}
{{# each page.originalPageContainer.tables as |table| }}
    import { {{ tableComponentName table }} } from './components/{{ tableComponentName table }}';
{{/ each }}

{{# each (getVisualElementsWithCustomImplementation page) as |ve| }}
    export const {{ getCustomizationComponentInterfaceKey ve }} = '{{ getCustomizationComponentInterface ve }}';
    export interface {{ getCustomizationComponentInterface ve }} extends FC<CustomFormVisualElementProps<{{ classDataName page.dataElement.target '' }}>> {}
{{/ each }}

export interface {{ pageActionFormComponentName action }}Props {
    successCallback: ({{# if action.outputParameterPage }}result?: {{ classDataName action.outputParameterPage.dataElement.target 'Stored' }}{{/ if }}) => void;
    cancel: () => void;
    {{# if action.operation.isMapped }}
        owner: {{ classDataName action.dataElement.owner 'Stored' }};
    {{/ if }}
}

export function {{ pageActionFormComponentName action }}({
    successCallback,
    cancel,
    {{# if action.operation.isMapped }}
        owner,
    {{/ if }}
} : {{ pageActionFormComponentName action }}Props) {
    const { t } = useTranslation();
    const { openRangeDialog } = useRangeDialog();
    const { downloadFile, extractFileNameFromToken, uploadFile } = fileHandling();
    const { locale: l10nLocale } = useL10N();

    const handleFetchError = useErrorHandler(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Fetch))`);
    const handleActionError = useErrorHandler<{{ classDataName page.dataElement.target '' }}>(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=CallOperation)(component={{ pageActionFormComponentName action }}))`);
    const { enqueueSnackbar } = useSnackbar();
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [data, setData] = useState<{{ classDataName page.dataElement.target '' }}>({} as unknown as {{ classDataName page.dataElement.target '' }});
    const [validation, setValidation] = useState<Map<keyof {{ classDataName page.dataElement.target '' }}, string>>(new Map<keyof {{ classDataName page.dataElement.target '' }}, string>());
    const [editMode, setEditMode] = useState<boolean>(true);
    const [payloadDiff, setPayloadDiff] = useState<Record<keyof {{ classDataName page.dataElement.target '' }}, any>>({} as unknown as Record<keyof {{ classDataName page.dataElement.target '' }}, any>);
    const storeDiff: (attributeName: keyof {{ classDataName page.dataElement.target '' }}, value: any) => void = useCallback((attributeName: keyof {{ classDataName page.dataElement.target '' }}, value: any) => {
        {{# if isDebugPrint }}// include: actor/src/fragments/page/store-diff-body.hbs{{/ if }}
        {{> actor/src/fragments/page/store-diff-body.hbs classType=page.dataElement.target }}
    }, [data]);
    const title: string = t('{{ idToTranslationKey page.fQName application }}', { defaultValue: '{{ page.label }}' });

    {{# if isDebugPrint }}// include: actor/src/fragments/page/input-form-flags.hbs{{/ if }}
    {{> actor/src/fragments/page/input-form-flags.hbs }}

    {{# if action.operation.input.target.isTemplateable }}
        const fetchData = async () => {
            setIsLoading(true);

            try {
                const res = await {{ classServiceName page.dataElement.target }}Impl.getTemplate();
                setData(res);
                setPayloadDiff({
                    ...res,
                } as Record<keyof {{ classDataName page.dataElement.target '' }}, any>);
            } catch(e) {
                handleFetchError(e);
            } finally {
                setIsLoading(false);
            }
        };

        useEffect(() => {
            fetchData();
        }, []);
    {{/ if }}

    // TODO: implement confirmation handling
    const submit = async () => {
        setIsLoading(true);

        try {
            {{# if action.outputParameterPage }}
                const res = await {{ classServiceName action.dataElement.owner }}Impl.{{ action.dataElement.name }}({{# if action.operation.isMapped }}owner, {{/ if }}payloadDiff);

                if (res) {
                    successCallback(res);
                }
            {{ else }}
                await {{ classServiceName action.dataElement.owner }}Impl.{{ action.dataElement.name }}({{# if action.operation.isMapped }}owner, {{/ if }}payloadDiff);

                successCallback();
            {{/ if }}
        } catch (error) {
            handleActionError(error, { setValidation }, data);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        {{# with (getDataContainerForPage page) as |rootChild| }}
            <>
                <DialogTitle>
                    {title}
                    <IconButton
                        id="{{ createId action }}-dialog-close"
                        aria-label="close"
                        onClick={ () => cancel() }
                        sx={ {
                            position: 'absolute',
                            right: 8,
                            top: 8,
                            color: (theme) => theme.palette.grey[500],
                        } }
                    >
                        <MdiIcon path="close" />
                    </IconButton>
                </DialogTitle>
                <DialogContent dividers>
                    <Grid container xs={12} sm={12} spacing={2} direction="{{# if rootChild.isDirectionHorizontal }}row{{ else }}column{{/ if }}" alignItems="{{ alignItems rootChild }}" justifyContent="{{ justifyContent rootChild }}">
                        {{# each rootChild.children as |child| }}
                            {{# unless (excludeWidgetFromTree child) }}
                                {{# if isDebugPrint }}{/* include: getWidgetTemplate() */}{{/ if }}
                                {{> (getWidgetTemplate child) }}
                            {{/ unless }}
                        {{/ each }}
                    </Grid>
                </DialogContent>
                <DialogActions>
                    <Button
                        id="{{ createId action }}-action-form-action-cancel"
                        variant="text"
                        onClick={ () => cancel() } disabled={isLoading}
                    >
                        {{# if (getBackButtonForOperationInputPage page) }}
                            {{# with (getBackButtonForOperationInputPage page) as |backButton| }}
                                {{# if backButton.icon }}
                                    <MdiIcon path="{{ backButton.icon.name }}" />
                                {{ else }}
                                    <MdiIcon path="close-thick" />
                                {{/ if }}
                                { t('{{ idToTranslationKey action.fQName application }}', { defaultValue: '{{ backButton.label }}' }) as string }
                            {{/ with }}
                        {{ else }}
                            <MdiIcon path="close-thick" />
                            { t('judo.pages.cancel', { defaultValue: 'Cancel' }) as string }
                        {{/ if }}
                    </Button>
                    <LoadingButton
                        loading={isLoading}
                        loadingPosition="start"
                        id="{{ createId action }}-action-form-action-submit"
                        variant="contained"
                        onClick={ () => submit() }
                        startIcon={
                            {{# if (getSaveButtonForOperationInputPage page) }}
                                {{# with (getSaveButtonForOperationInputPage page) as |saveButton| }}
                                    {{# if saveButton.icon }}
                                        <MdiIcon path="{{ saveButton.icon.name }}" />
                                    {{ else }}
                                        <MdiIcon path="check-bold" />
                                    {{/ if }}
                                {{/ with }}
                            {{ else }}
                                <MdiIcon path="check-bold" />
                            {{/ if }}
                        }
                    >
                        {{# if (getSaveButtonForOperationInputPage page) }}
                            {{# with (getSaveButtonForOperationInputPage page) as |saveButton| }}
                                <span>{ t('{{ idToTranslationKey action.fQName application }}', { defaultValue: '{{ saveButton.label }}' }) as string }</span>
                            {{/ with }}
                        {{ else }}
                            <span>{ t('judo.pages.submit', { defaultValue: 'Submit' }) as string }</span>
                        {{/ if }}
                    </LoadingButton>
                </DialogActions>
            </>
        {{/ with }}
    );
}
