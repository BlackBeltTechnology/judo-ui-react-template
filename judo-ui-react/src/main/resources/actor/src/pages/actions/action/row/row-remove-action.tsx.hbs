{{> fragment.header.hbs }}
// Action: RemoveAction

import type { JudoIdentifiable } from '@judo/data-api-common';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useSnackbar } from 'notistack';
import { useErrorHandler, ERROR_PROCESSOR_HOOK_INTERFACE_KEY } from '~/utilities';
import {
    {{# each (getApiImportsForRowAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import {
    {{ classServiceName action.dataElement.owner }}Impl,
} from '~/generated/data-axios';

export type {{ actionFunctionTypeName action }} = () => (
    owner: JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>,
    selected: {{ classDataName action.dataElement.target 'Stored' }},
    successCallback: () => void,
    errorCallback?: (error: any) => void,
) => Promise<void>;

export const {{ actionFunctionHookName action }}: {{ actionFunctionTypeName action }} = () => {
    const { enqueueSnackbar } = useSnackbar();
    const handleActionError = useErrorHandler<JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>>(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=RowRemoveAction))`);

    return async function {{ actionFunctionName action }} (
        owner: JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>,
        selected: {{ classDataName action.dataElement.target 'Stored' }},
        successCallback: () => void,
        errorCallback?: (error: any) => void,
    ) {
        try {
            await {{ classServiceName action.dataElement.owner }}Impl.remove{{ firstToUpper action.dataElement.name }}(
                { __signedIdentifier: owner.__signedIdentifier } as JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>,
                [selected],
            );

            successCallback();
        } catch (error) {
            if (errorCallback) {
                errorCallback(error);
            } else {
                handleActionError(error);
            }
        }
    }
};
