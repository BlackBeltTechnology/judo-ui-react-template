{{> fragment.header.hbs }}
// Action: RemoveAction

import type { JudoIdentifiable } from '@judo/data-api-common';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useSnackbar } from 'notistack';
import { useErrorHandler, ERROR_PROCESSOR_HOOK_INTERFACE_KEY } from '{{ relativePathFromAction page action 'utilities' }}';
import {
    {{# each (getApiImportsForRowAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '{{ relativePathFromAction page action 'generated/data-api' }}';
import {
    {{ classServiceName action.dataElement.owner }}Impl,
} from '{{ relativePathFromAction page action 'generated/data-axios'}}';

export type {{ actionFunctionTypeName action }} = () => (owner: JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>, selected: {{ classDataName action.dataElement.target 'Stored' }}, successCallback: () => void) => Promise<void>;

export const {{ actionFunctionHookName action }}: {{ actionFunctionTypeName action }} = () => {
    const { enqueueSnackbar } = useSnackbar();
    const handleActionError = useErrorHandler<JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>>(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=RowRemoveAction))`);

    return async function {{ actionFunctionName action }} (owner: JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>, selected: {{ classDataName action.dataElement.target 'Stored' }}, successCallback: () => void) {
        try {
            await {{ classServiceName action.dataElement.owner }}Impl.remove{{ firstToUpper action.dataElement.name }}(
                { __signedIdentifier: owner.__signedIdentifier } as JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>,
                [selected],
            );

            successCallback();
        } catch (error) {
            handleActionError(error);
        }
    }
};
