{{> fragment.header.hbs }}
// Action: DeleteAction

import { useTranslation } from 'react-i18next';
import type { JudoIdentifiable } from '@judo/data-api-common';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useSnackbar } from 'notistack';
import { useErrorHandler, ERROR_PROCESSOR_HOOK_INTERFACE_KEY } from '~/utilities';
import { useConfirmDialog } from '~/components/dialog';
import { toastConfig } from '~/config';
import {
    {{# each (getApiImportsForRowAction action) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import {
    {{ dataElementRelationName action.dataElement }}Impl,
    {{# neq (dataElementRelationName action.dataElement) (classServiceName action.dataElement.target) }}
        {{ classServiceName action.dataElement.target }}Impl,
    {{/ neq }}
} from '~/generated/data-axios';

export type {{ actionFunctionTypeName action }} = () => (
    {{# if (hasDataElementOwner action.dataElement) }}owner: {{{ getTypeForRelationOwner action.dataElement }}}, {{/ if }}
    selected: {{ classDataName action.dataElement.target 'Stored' }},
    successCallback: () => void,
    errorCallback?: (error: any) => void,
    silentMode?: boolean,
) => Promise<void>;

export const {{ actionFunctionHookName action }}: {{ actionFunctionTypeName action }} = () => {
    const { t } = useTranslation();
    const { enqueueSnackbar } = useSnackbar();
    const { openConfirmDialog } = useConfirmDialog();
    const handleActionError = useErrorHandler{{# if (hasDataElementOwner action.dataElement) }}<JudoIdentifiable<{{ classDataName action.dataElement.owner '' }}>>{{/ if }}(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=RowDeleteAction))`);

    return async function {{ actionFunctionName action }} (
        {{# if (hasDataElementOwner action.dataElement) }}owner: {{{ getTypeForRelationOwner action.dataElement }}}, {{/ if }}
        selected: {{ classDataName action.dataElement.target 'Stored' }},
        successCallback: () => void,
        errorCallback?: (error: any) => void,
        silentMode?: boolean,
    ) {
        try {
            const confirmed = !silentMode ? await openConfirmDialog(
                'row-delete-action',
                t('judo.modal.confirm.confirm-delete', { defaultValue: 'Are you sure you would like to delete the selected element?' }),
                t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
            ) : true;

            if (confirmed) {
                await {{ classServiceName action.dataElement.target }}Impl.delete(selected);
                if (!silentMode) {
                  enqueueSnackbar(t('judo.action.delete.success', { defaultValue: 'Delete successful' }), {
                      variant: 'success',
                      ...toastConfig.success,
                  });
                }
                successCallback();
            }
        } catch (error) {
            if (errorCallback) {
                errorCallback(error);
            } else {
                handleActionError(error);
            }
        }
    }
};
