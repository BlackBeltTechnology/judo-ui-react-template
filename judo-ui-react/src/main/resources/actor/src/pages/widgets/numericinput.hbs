{{# if child.hiddenBy }} { !data.{{ child.hiddenBy.name }} && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            payloadDiff={payloadDiff}
        >
    {{/ if }}
    <TextField
        {{# if child.attributeType.isRequired }} required {{/ if }}
        name="{{ child.attributeType.name }}"
        id="{{ createId child }}"
        {{# if (shouldElementHaveAutoFocus child) }}
            autoFocus
        {{/ if }}
        label={ t('{{ getTranslationKeyForVisualElement child }}', { defaultValue: '{{ child.label }}' }) as string }
        type="number"
        value={ data.{{ child.attributeType.name }} }
        className={ !editMode ? 'JUDO-viewMode' : undefined }
        disabled={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isReadOnly }} || !isFormUpdateable() }
        error={ !!validation.get('{{ child.attributeType.name }}') }
        helperText={ validation.get('{{ child.attributeType.name }}') }
        onChange={ (event) => {
            storeDiff('{{ child.attributeType.name }}', Number(event.target.value));
        } }
        InputLabelProps={ { shrink: true } }
        InputProps={ {
            {{# if child.icon }}
                startAdornment: (
                    <InputAdornment position="start">
                        <MdiIcon path="{{ child.icon.name }}" />
                    </InputAdornment>
                ),
            {{/ if }}
        } }
    />
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
