{{# if child.hiddenBy }} { !data.{{ child.hiddenBy.name }} && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            payloadDiff={payloadDiff}
        >
    {{/ if }}
    <DatePicker
        {{# if (shouldElementHaveAutoFocus child) }}
            autoFocus
        {{/ if }}
        slotProps={ {
            textField: {
                id: '{{ createId child }}',
                helperText: validation.get('{{ child.attributeType.name }}'),
                error: !!validation.get('{{ child.attributeType.name }}'),
                {{# if child.icon }}
                    InputProps: {
                        startAdornment: (
                            <InputAdornment position="start">
                                <MdiIcon path="{{ child.icon.name }}" />
                            </InputAdornment>
                        ),
                    },
                {{/ if }}
            },
        } }
        onError={ (newError: DateValidationError, value: any) => {
            // https://mui.com/x/react-date-pickers/validation/#show-the-error
            setValidation((prevValidation) => {
                const copy = new Map<keyof {{ classDataName page.dataElement.target '' }}, string>(prevValidation);
                copy.set('{{ child.attributeType.name }}', newError === 'invalidDate' ? t('judo.error.validation-failed.PATTERN_VALIDATION_FAILED', {
                    defaultValue: 'Value does not match the pattern requirements.',
                }) as string : '');
                return copy;
            });
        } }
        className={!editMode ? 'JUDO-viewMode' : undefined}
        views={['year', 'month', 'day']}
        label={ t('{{ idToTranslationKey child.fQName application }}', { defaultValue: '{{ child.label }}' }) as string }
        value={ serviceDateToUiDate(data.{{ child.attributeType.name }} ?? null) }
        readOnly={ {{ boolValue child.attributeType.isReadOnly }} }
        disabled={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} !isFormUpdateable() }
        onChange={ (newValue?: any | null) => {
            setEditMode(true);
            storeDiff('{{ child.attributeType.name }}', newValue);
        } }
    />
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
