{{# if child.hiddenBy }} { !data.{{ child.hiddenBy.name }} && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            payloadDiff={payloadDiff}
        >
    {{/ if }}
    <TimePicker
        renderInput={ (props: any) => (
            <TextField
                {{# if child.attributeType.isRequired }} required {{/ if }}
                {...props}
                id="{{ createId child }}"
                className={ !editMode ? 'JUDO-viewMode' : undefined }
                disabled={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isReadOnly }} || !isFormUpdateable() }
                error={!!validation.get('{{ child.attributeType.name }}')}
                helperText={validation.get('{{ child.attributeType.name }}')}
            />
        ) }
        {{# if (shouldElementHaveAutoFocus child) }}
            autoFocus
        {{/ if }}
        label={ t('{{ idToTranslationKey child.fQName application }}', { defaultValue: '{{ child.label }}' }) as string }
        value={ data.{{ child.attributeType.name }} ?? null }
        readOnly={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isReadOnly }} || !isFormUpdateable() }
        onChange={ (newValue: string | null | undefined) => {
            setEditMode(true);
            storeDiff('{{ child.attributeType.name }}', newValue);
        } }
        {{# if child.icon }}
            InputProps={ {
                startAdornment: (
                    <InputAdornment position="start">
                        <MdiIcon path="{{ child.icon.name }}" />
                    </InputAdornment>
                ),
            } }
        {{/ if }}
        />
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
