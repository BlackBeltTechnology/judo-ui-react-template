{{# if child.hiddenBy }} { !data.{{ child.hiddenBy.name }} && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            payloadDiff={payloadDiff}
        >
    {{/ if }}
    <BinaryInput
        required={ {{# if child.requiredBy }}data.{{ child.requiredBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isRequired  }} }
        id="{{ createId child }}"
        label={t('{{ getTranslationKeyForVisualElement child }}', { defaultValue: '{{ child.label }}' }) as string}
        {{# if child.icon }}
            icon="{{ child.icon.name }}"
            {{# neq child.attributeType.dataType.mimeTypes.size 0 }}
                mimeType={ {
                    type: '{{ child.attributeType.dataType.mimeTypes.[0].type }}',
                    subType: '{{ child.attributeType.dataType.mimeTypes.[0].subType }}',
                } }
            {{/ neq }}
        {{/ if }}
        editMode={editMode}
        validation={validation}
        data={data}
        attributeName="{{ child.attributeType.name }}"
        attributePath="{{ attributePath child.attributeType }}"
        disabled={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} isLoading }
        readonly={ {{ boolValue child.attributeType.isReadOnly }} || !isFormUpdateable() }
        {{# unless child.attributeType.isReadOnly }}
            deleteCallback={ async () => {
                storeDiff('{{ child.attributeType.name }}', null);
                {{# if child.onBlur }}
                    const eagerCopy = { ...data, ['{{ child.attributeType.name }}']: null };
                    {{ child.name }}OnBlurAction && {{ child.name }}OnBlurAction(eagerCopy, storeDiff, editMode, setEditMode, setValidation);
                {{/ if }}
            } }
        {{/unless}}
        uploadCallback={ async (uploadedData: { token: string }) => {
            storeDiff('{{ child.attributeType.name }}', uploadedData.token);
            {{# if child.onBlur }}
                {{ child.name }}OnBlurAction && {{ child.name }}OnBlurAction(data, storeDiff, editMode, setEditMode, setValidation);
            {{/ if }}
        } }
    />
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
