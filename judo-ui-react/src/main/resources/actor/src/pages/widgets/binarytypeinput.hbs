{{# if child.hiddenBy }} { !data.{{ child.hiddenBy.name }} && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            payloadDiff={payloadDiff}
        >
    {{/ if }}
    { editMode
        ? (
            <TextField
                {{# if child.attributeType.isRequired }} required {{/ if }}
                name="{{ child.attributeType.name }}"
                id="{{ createId child }}"
                label={ t('{{ idToTranslationKey child.fQName application }}', { defaultValue: '{{ child.label }}' }) as string }
                type="file"
                error={ !!validation.get('{{ child.attributeType.name }}') }
                helperText={ validation.get('{{ child.attributeType.name }}') }
                onChange={ async (event: any) => {
                    try {
                        const uploadedData = await uploadFile(data, '{{ child.attributeType.name }}', event.target.files, '{{ attributePath child.attributeType }}');
                        if (uploadedData) {
                            if (uploadedData.error) {
                                enqueueSnackbar(t('judo.files.upload-error', { defaultValue: uploadedData.error }) as string, {
                                    variant: 'error',
                                    ...toastConfig.error,
                                });
                                console.error(uploadedData);
                                return;
                            }
                            storeDiff('{{ child.attributeType.name }}', uploadedData.token);
                            enqueueSnackbar(t('judo.files.upload-success', { defaultValue: 'File uploaded successfully.' }) as string, {
                                variant: 'success',
                                ...toastConfig.success,
                            });
                        }
                    } catch(err) {
                        enqueueSnackbar(t('judo.files.upload-error', { defaultValue: 'An error occurred during file upload!' }) as string, {
                            variant: 'error',
                            ...toastConfig.error,
                        });
                        console.error(err);
                    }
                } }
                className={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isReadOnly }} || !editMode ? 'Mui-readOnly' : undefined }
                InputLabelProps={ { shrink: true } }
                InputProps={ {
                    readOnly: {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isReadOnly }} || !editMode,
                    {{# if child.icon }}
                        startAdornment: (
                            <InputAdornment position="start">
                                <MdiIcon path="{{ child.icon.name }}" {{# neq child.attributeType.dataType.mimeTypes.size 0 }}mimeType={ { type: '{{ child.attributeType.dataType.mimeTypes.[0].type }}', subType: '{{ child.attributeType.dataType.mimeTypes.[0].subType }}' } }{{/ neq }} />
                            </InputAdornment>
                        ),
                    {{/ if }}
                } }
            />
          )
        : (
            <Button id="{{ createId child }}-download" variant="contained" disabled={ !data?.{{ child.attributeType.name }} } onClick={ () => downloadFile(data, '{{ child.attributeType.name }}') }>
                {{# if child.icon }}
                    <MdiIcon path="{{ child.icon.name }}" {{# neq child.attributeType.dataType.mimeTypes.size 0 }}mimeType={ { type: '{{ child.attributeType.dataType.mimeTypes.[0].type }}', subType: '{{ child.attributeType.dataType.mimeTypes.[0].subType }}' } }{{/ neq }} />
                {{/ if }}
                { t('{{ idToTranslationKey child.fQName application }}', { defaultValue: '{{ child.label }}' }) as string }
            </Button>
          )
    }
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
