{{# if child.hiddenBy }} { !data.{{ child.hiddenBy.name }} && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            payloadDiff={payloadDiff}
        >
    {{/ if }}
    <Grid id="{{ createId child }}" container direction="column" alignItems="stretch" justifyContent="flex-start">
        <DataGrid
            { ...baseTableConfig }
            getRowId={(row: { __identifier: string }) => row.__identifier}
            loading={isLoading}
            rows={data?.{{ child.dataElement.name }} ?? []}
            columns={[ ...{{ child.dataElement.name }}Columns, ...columnsActionCalculator('{{ createId child.dataElement }}', {{ child.dataElement.name }}RowActions, { shownActions: 2 }) ]}
            disableSelectionOnClick
            {{# each child.rowActions as |action| }}
                {{# if action.isViewAction }}
                    onRowClick={ (params: GridRowParams<{{ classDataName child.dataElement.target 'Stored' }}>) => {
                        if (!editMode) {
                            {{ actionFunctionName action action.target }}(params.row);
                        }
                    } }
                {{/ if }}
            {{/ each }}
            sortModel={ {{ child.dataElement.name }}SortModel }
            onSortModelChange={(newModel: GridSortModel) => {
                set{{ ucFirst child.dataElement.name }}SortModel(newModel);
            }}
            components={ {
                Toolbar: () => (
                    <GridToolbarContainer>
                        {{# each child.actions as |action| }}
                            {{# unless page.isPageTypeOperationInput }}
                                {{# if action.isCreateAction }}
                                    <Button
                                        id="{{ createId action }}"
                                        variant="text"
                                        onClick={ () => {{ actionFunctionName action page }}({{# unless (isActionAccess action) }}data, {{/ unless }}() => fetchData()) }
                                        disabled={isLoading || !{{ boolValue page.dataElement.isUpdatable }} || editMode}
                                    >
                                        <MdiIcon path="file_document_plus" />
                                        {t('judo.pages.table.create', { defaultValue: 'Create' })}
                                    </Button>
                                {{/ if }}
                            {{/ unless }}
                        {{/ each }}
                        {{# if child.dataElement.isAddable }}
                            <Button
                                id="{{ createId child.dataElement }}-add"
                                variant="text"
                                onClick={ async () => {
                                    const res = await {{ child.dataElement.name }}RangeCall();

                                    if (res) {
                                        storeDiff('{{ child.dataElement.name }}', [
                                            ...(data.{{ child.dataElement.name }} || []),
                                            ...(res as {{ classDataName child.dataElement.target 'Stored' }}[])
                                        ]);

                                        {{# if page.dataElement.isUpdatable }}
                                            if (!editMode) {
                                                setEditMode(true);
                                            }
                                        {{/ if }}
                                    }
                                } }
                                disabled={ isLoading || !{{ boolValue page.dataElement.isUpdatable }} }
                            >
                                <MdiIcon path="attachment-plus" />
                                {t('judo.pages.table.add', { defaultValue: 'Add' })}
                            </Button>
                        {{/ if }}
                        {{# if child.dataElement.isClearable }}
                            <Button
                                id="{{ createId child.dataElement }}-clear"
                                variant="text"
                                onClick={ async () => {
                                    storeDiff('{{ child.dataElement.name }}', []);

                                    {{# if page.dataElement.isUpdatable }}
                                        if (!editMode) {
                                            setEditMode(true);
                                        }
                                    {{/ if }}
                                } }
                                disabled={ isLoading || !{{ boolValue page.dataElement.isUpdatable }} }
                            >
                                <MdiIcon path="link_off" />
                                {t('judo.pages.table.clear', { defaultValue: 'Clear' })}
                            </Button>
                        {{/ if }}
                        <div>{/* Placeholder */}</div>
                    </GridToolbarContainer>
                ),
            } }
        />
    </Grid>
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
