{{# if child.hiddenBy }} { !data.{{ child.hiddenBy.name }} && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    <Grid id="{{ createId child }}" container direction="column" alignItems="stretch" justifyContent="flex-start">
        <DataGrid
            { ...baseTableConfig }
            getRowId={(row: { __identifier: string }) => row.__identifier}
            loading={isLoading}
            rows={data?.{{ child.dataElement.name }} ?? []}
            columns={[ ...{{ child.dataElement.name }}Columns, ...columnsActionCalculator('{{ createId child.dataElement }}', {{ child.dataElement.name }}RowActions, { shownActions: 2 }) ]}
            disableSelectionOnClick
            {{# each child.rowActions as |action| }}
                {{# if action.isViewAction }}
                    onRowClick={ (params: GridRowParams<{{ classDataName child.dataElement.target 'Stored' }}>) => {{ actionFunctionName action action.target }}(params.row) }
                {{/ if }}
            {{/ each }}
            sortModel={ {{ child.dataElement.name }}SortModel }
            onSortModelChange={(newModel: GridSortModel) => {
                set{{ ucFirst child.dataElement.name }}SortModel(newModel);
            }}
            components={ {
                Toolbar: () => (
                    {{# if (tableHasActions child) }}
                        <GridToolbarContainer>
                            {{# each child.actions as |action| }}
                                {{# if page.isPageTypeOperationInput }}
                                    {{# if action.isClearAction }}
                                        <Button
                                            id="{{ createId action }}"
                                            onClick={ () => {
                                                setData({
                                                    ...data,
                                                    ['{{ action.dataElement.name }}']: [],
                                                });
                                            } }
                                            disabled={isLoading}
                                        >
                                            {{# if action.icon }}
                                                <MdiIcon path="{{ action.icon.name }}" />
                                            {{/ if }}
                                            {t('judo.pages.table.clear', { defaultValue: 'Clear' })}
                                        </Button>
                                    {{/ if }}
                                    {{# if action.isAddAction }}
                                        <Button
                                            id="{{ createId action }}"
                                            onClick={ async () => {
                                                const res = await {{ action.dataElement.name }}RangeCall();

                                                if (res) {
                                                    setData({
                                                        ...data,
                                                        ['{{ action.dataElement.name }}']: [...(res as {{ classDataName action.dataElement.target 'Stored' }}[])],
                                                    });
                                                }
                                            } }
                                            disabled={isLoading}
                                        >
                                            {{# if action.icon }}
                                                <MdiIcon path="{{ action.icon.name }}" />
                                            {{/ if }}
                                            {t('judo.pages.table.add', { defaultValue: 'Add' })}
                                        </Button>
                                    {{/ if }}
                                {{ else }}
                                    {{# if action.isCreateAction }}
                                        <Button
                                            id="{{ createId action }}"
                                            onClick={ () => {{ actionFunctionName action page }}({{# unless (isActionAccess action) }}data, {{/ unless }}() => fetchData()) }
                                            disabled={isLoading || editMode}
                                        >
                                            {{# if action.icon }}
                                                <MdiIcon path="{{ action.icon.name }}" />
                                            {{/ if }}
                                            {t('judo.pages.table.create', { defaultValue: 'Create' })}
                                        </Button>
                                    {{/ if }}
                                {{/ if }}
                            {{/ each }}
                        </GridToolbarContainer>
                    {{ else }}
                        <div>{/* No actions defined */}</div>
                    {{/ if }}
                ),
            } }
        />
    </Grid>
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
