{{# if child.hiddenBy }} { !data.{{ child.hiddenBy.name }} && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            payloadDiff={payloadDiff}
        >
    {{/ if }}
    <AggregationInput
        name="{{ child.dataElement.name }}"
        id="{{ createId child }}"
        label={ t('{{ idToTranslationKey child.fQName application }}', { defaultValue: '{{ child.label }}' }) as string {{# if child.attributeType.isRequired }} + " *" {{/ if }} }
        labelList={[
            {{# each child.parts as |part| }}
                data.{{ child.dataElement.name }}?.{{ part.attributeType.name }}?.toString() ?? '',
            {{/ each }}
        ]}
        value={ data.{{ child.dataElement.name }} }
        error={ !!validation.get('{{ child.dataElement.name }}') }
        helperText={ validation.get('{{ child.dataElement.name }}') }
        {{# if child.icon }}
            icon={<MdiIcon path="{{ child.icon.name }}" />}
        {{/ if }}
        readonly={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.dataElement.isReadOnly }} || !editMode }
        {{# each child.actions as |action| }}
            {{# if action.isViewAction }}
                onView={ async () => {{ actionFunctionName action page }}({{# unless (isActionAccess action) }}data?.{{ child.dataElement.name }}!{{/ unless }}) }
            {{/ if }}
            {{# if action.isCreateAction }}
                onCreate={ async () => {{ actionFunctionName action page }}({{# unless (isActionAccess action) }}data, {{/ unless }}(res) => {
                    storeDiff('{{ child.dataElement.name }}', res as {{ classDataName child.dataElement.target 'Stored' }});
                    {{# if page.dataElement.isUpdatable }}
                        saveData();
                    {{/ if }}
                }) }
            {{/ if }}
            {{# if action.isDeleteAction }}
                onDelete={ async () => {{ actionFunctionName action page }}({{# unless (isActionAccess action) }}data, {{/ unless }}data?.{{ child.dataElement.name }}!, () => {
                    try {
                        if (!editMode) {
                            fetchData();
                        }
                    } catch (e) {
                        console.error(e);
                    }
                }) }
            {{/ if }}
        {{/ each }}
        {{# or child.dataElement.isRemovable }}
            onRemove={ async () => storeDiff('{{ child.dataElement.name }}', null) }
        {{/ or }}
        {{# if child.dataElement.isSetable }}
            onSet={ async () => {
                const res = await openRangeDialog<{{ classDataName child.dataElement.target 'Stored' }}, {{ classDataName child.dataElement.target 'QueryCustomizer' }}>({
                    id: '{{ createId child.dataElement }}',
                    columns: {{ child.dataElement.name }}Columns,
                    defaultSortField: ({{{ getDefaultSortParamsForLink child }}} as GridSortItem[])[0],
                    rangeCall: async (queryCustomizer) =>
                    await {{ classServiceName child.dataElement.owner }}Impl.getRangeFor{{ firstToUpper child.dataElement.name }}(data, processQueryCustomizer(queryCustomizer)),
                    single: true,
                    alreadySelectedItems: data.{{ child.dataElement.name }}?.__identifier as GridRowId,
                    filterOptions: {{ child.dataElement.name }}RangeFilterOptions,
                    initialQueryCustomizer: {{ child.dataElement.name }}InitialQueryCustomizer,
                });

                if (res === undefined) return;

                storeDiff('{{ child.dataElement.name }}', res as {{ classDataName child.dataElement.target 'Stored' }});
            } }
        {{/ if }}
        {{# if child.dataElement.isUnsetable }}
            onUnset={ async () => {
                if (editMode) {
                    storeDiff('{{ child.dataElement.name }}', null);
                } else {
                    alert('Unset action on Link Component in View Mode not implemented yet')
                }
            } }
        {{/ if }}
    />
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
