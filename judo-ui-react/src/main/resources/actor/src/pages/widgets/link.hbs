{{# if child.hiddenBy }} { !data.{{ child.hiddenBy.name }} && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            payloadDiff={payloadDiff}
        >
    {{/ if }}
    <{{ linkComponentName child }}
        ownerData={data}
        readOnly={ {{ boolValue child.dataElement.isReadOnly }} || !isFormUpdateable() }
        disabled={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} isLoading }
        editMode={editMode}
        {{# if (isPageRefreshable page) }}
            fetchOwnerData={fetchData}
        {{/ if }}
        onChange={ (value: {{ classDataName child.dataElement.target '' }} | {{ classDataName child.dataElement.target 'Stored' }} | null) => {
            storeDiff('{{ child.dataElement.name }}', value);
            {{# if child.onBlur }}
                const eagerCopy: {{ classDataName child.dataElement.owner '' }} = { ...data, ['{{ child.dataElement.name }}' as keyof {{ classDataName child.dataElement.owner '' }}]: value };
                {{ child.name }}OnBlurAction && {{ child.name }}OnBlurAction(eagerCopy, storeDiff, editMode, setEditMode, setValidation, async () => {await submit();});
            {{/ if }}
        } }
        validation={validation}
    />
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
