{{# if child.hiddenBy }} { !data.{{ child.hiddenBy.name }} && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    <TextField
        {{# if child.attributeType.isRequired }} required {{/ if }}
        name="{{ child.attributeType.name }}"
        id="{{ createId child }}"
        label={ t('{{ idToTranslationKey child.fQName application }}', { defaultValue: '{{ child.label }}' }) as string }
        value={ data.{{ child.attributeType.name }} }
        multiline
        minRows={ {{ child.row }} }
        error={ !!validation.get('{{ child.attributeType.name }}') }
        helperText={ validation.get('{{ child.attributeType.name }}') }
        onChange={ (event) => storeDiff('{{ child.attributeType.name }}', event.target.value) }
        className={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isReadOnly }} || !editMode ? 'Mui-readOnly' : undefined }
        InputLabelProps={ { shrink: true } }
        InputProps={ {
            readOnly: {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isReadOnly }} || !editMode,
            {{# if child.icon }}
                startAdornment: (
                    <InputAdornment position="start">
                        <MdiIcon path="{{ child.icon.name }}" />
                    </InputAdornment>
                ),
            {{/ if }}
        } }
    />
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
