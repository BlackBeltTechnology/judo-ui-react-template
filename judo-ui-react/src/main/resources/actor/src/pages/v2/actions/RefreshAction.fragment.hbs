const {{ simpleActionDefinitionName action.actionDefinition }} = async (queryCustomizer: {{ classDataName (getReferenceClassType page) 'QueryCustomizer' }}): Promise<{{ classDataName (getReferenceClassType page) 'Stored' }}{{# if page.container.table }}[]{{/ if }}> => {
  try {
    setIsLoading(true);
    setEditMode(false);
    {{# if page.container.table }}
      return {{ getServiceImplForPage page }}.list({{# if (pageHasSignedId page) }}{{# if page.openInDialog }}data{{ else }}{ __signedIdentifier: signedIdentifier } as JudoIdentifiable<any>{{/ if }}{{ else }}undefined{{/ if }}, queryCustomizer);
    {{ else }}
      const result = await {{ getServiceImplForPage page }}.refresh(
        {{# if (pageHasSignedId page) }}
          {{# if page.openInDialog }}
            targetData
          {{ else }}
            { __signedIdentifier: signedIdentifier } as JudoIdentifiable<any>
          {{/ if }}
        {{ else }}
          {{# if (isSingleAccessPage page) }}
            singletonHost.current
          {{ else }}
            undefined
          {{/ if }}
        {{/ if }},
        pageQueryCustomizer
      );

      setData(result);

      // re-set payloadDiff
      payloadDiff.current = {
          __identifier: result.__identifier,
          __signedIdentifier: result.__signedIdentifier,
          __version: result.__version,
          __entityType: result.__entityType,
      } as Record<keyof {{ classDataName (getReferenceClassType page) 'Stored' }}, any>;

      return result;
    {{/ if }}
  } catch (e) {
    handleFetchError(e);
    return Promise.reject(e);
  } finally {
    setIsLoading(false);
    setRefreshCounter((prevCounter) => prevCounter + 1);
  }
};
