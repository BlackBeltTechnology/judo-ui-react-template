{{> fragment.header.hbs }}
// Page name: {{ page.name }}
// Page owner name: {{ page.owner.name }}
// Page DataElement name: {{ page.dataElement.name }}
// Page DataElement owner name: {{ page.dataElement.owner.name }}

{{# if isDebugPrint }}// include: actor/src/fragments/page/common-view-imports.fragment.hbs{{/ if }}
{{> actor/src/fragments/page/common-view-imports.fragment.hbs }}

import {
    {{# each (getApiImportsForViewPage page) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import {
    {{ dataElementRelationName page.dataElement }}Impl,
    {{ classServiceName page.dataElement.target }}Impl,
} from '~/generated/data-axios';

import {
{{# each (getButtonActions page) as |action| }}
    {{ actionFunctionHookName action }},
{{/ each }}
} from './actions';

import { PageActions } from './components/PageActions';
{{# each page.originalPageContainer.links as |link| }}
    import { {{ linkComponentName link }} } from './components/{{ linkComponentName link }}';
{{/ each }}
{{# each page.originalPageContainer.tables as |table| }}
    import { {{ tableComponentName table }} } from './components/{{ tableComponentName table }}';
{{/ each }}

{{# each (getVisualElementsWithCustomImplementation page) as |ve| }}
    export const {{ getCustomizationComponentInterfaceKey ve }} = '{{ getCustomizationComponentInterface ve }}';
    export interface {{ getCustomizationComponentInterface ve }} extends FC<CustomFormVisualElementProps<{{ classDataName page.dataElement.target '' }}>> {}
{{/ each }}

export type {{ pageName page }}PostRefreshAction = (
    data: {{ classTypeName page.dataElement.target }},
    storeDiff: (attributeName: keyof {{ classDataName page.dataElement.target '' }}, value: any) => Promise<{{ classTypeName page.dataElement.target }}>,
    setEditMode: Dispatch<SetStateAction<boolean>>,
    setValidation: Dispatch<SetStateAction<Map<keyof {{ classDataName page.dataElement.target '' }}, string>>>,
) => Promise<void>;

export const {{ camelCaseNameToInterfaceKey (pageName page) }}_POST_REFRESH_HOOK_INTERFACE_KEY = '{{ pageName page }}PostRefreshHook';
export type {{ pageName page }}PostRefreshHook = () => {{ pageName page }}PostRefreshAction;

{{# if isDebugPrint }}// include: actor/src/fragments/page/on-blur-declaration.fragment.hbs{{/ if }}
{{> actor/src/fragments/page/on-blur-declaration.fragment.hbs page=page }}

/**
 * Name: {{ page.name }}
 * Is Access: {{ boolValue page.dataElement.isAccess }}
 * Is Dashboard: {{ boolValue page.isPageTypeDashboard }}
 * Type: View
 * Edit Mode Available: {{ boolValue page.dataElement.isUpdatable }}
 **/
export default function {{ pageName page }}() {
    const { t } = useTranslation();
    const { navigate, back } = useJudoNavigation();
    {{# if (isSingleAccessPage page) }}
        const [signedIdentifier, setSignedIdentifier] = useState<string>();
    {{ else }}
        const { signedIdentifier } = useParams();
    {{/ if }}

    const { openRangeDialog } = useRangeDialog();
    const { downloadFile, extractFileNameFromToken, uploadFile } = fileHandling();
    const { locale: l10nLocale } = useL10N();

    const handleFetchError = useErrorHandler(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Fetch))`);
    {{# if page.dataElement.isUpdatable }}
        const handleUpdateError = useErrorHandler<{{ classDataName page.dataElement.target '' }}>(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Update)(component={{ pageName page }}))`);
    {{/ if }}
    {{# if page.dataElement.isDeletable }}
        const handleDeleteError = useErrorHandler<{{ classDataName page.dataElement.target '' }}>(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Delete)(component={{ pageName page }}))`);
    {{/ if }}
    const { enqueueSnackbar } = useSnackbar();
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [refreshCounter, setRefreshCounter] = useState<number>(0);
    const [data, setData] = useState<{{ classDataName page.dataElement.target 'Stored' }}>({} as unknown as {{ classDataName page.dataElement.target 'Stored' }});
    const [payloadDiff, setPayloadDiff] = useState<Record<keyof {{ classDataName page.dataElement.target 'Stored' }}, any>>({} as unknown as Record<keyof {{ classDataName page.dataElement.target 'Stored' }}, any>);
    const [editMode, setEditMode] = useState<boolean>(false);
    {{# if isDebugPrint }}// include: actor/src/fragments/page/store-diff-body.hbs{{/ if }}
    {{> actor/src/fragments/page/store-diff-body.hbs classType=page.dataElement.target suffix='' }}
    const [validation, setValidation] = useState<Map<keyof {{ classDataName page.dataElement.target '' }}, string>>(new Map<keyof {{ classDataName page.dataElement.target '' }}, string>());

    const queryCustomizer: {{ classDataName page.dataElement.target 'QueryCustomizer' }} = {
        _mask: '{{ page.formattedMask }}',
    };

    const { service: postRefreshHook } = useTrackService<{{ pageName page }}PostRefreshHook>(`(${OBJECTCLASS}=${ {{~ camelCaseNameToInterfaceKey (pageName page) }}_POST_REFRESH_HOOK_INTERFACE_KEY})`);
    const postRefreshAction: {{ pageName page }}PostRefreshAction | undefined = postRefreshHook && postRefreshHook();

    {{# each (getButtonActions page) as |action| }}
        const {{ actionFunctionName action }} = {{ actionFunctionHookName action }}();
    {{/ each }}

    {{# if (titleComesFromAttribute page) }}
        const title: string = data.{{ page.titleAttribute.name }} as string;
    {{ else }}
        const title: string = t('{{ getTranslationKeyForPage page }}', { defaultValue: '{{ page.label }}' });
    {{/ if }}

    {{# if isDebugPrint }}// include: actor/src/fragments/page/on-blur-hook-call.fragment.hbs{{/ if }}
    {{> actor/src/fragments/page/on-blur-hook-call.fragment.hbs page=page }}

    {{# if isDebugPrint }}// include: actor/src/fragments/page/mapped-form-flags.hbs{{/ if }}
    {{> actor/src/fragments/page/mapped-form-flags.hbs }}

    useConfirmationBeforeChange(editMode, t('judo.form.navigation.confirmation', { defaultValue: 'You have potential unsaved changes in your form, are you sure you would like to navigate away?' }));

    {{# if (isSingleAccessPage page) }}
        async function init() {
            setIsLoading(true);

            try {
                const res = await {{ dataElementRelationName page.dataElement }}Impl.get{{ ucFirst page.dataElement.name }}('{}');

                setIsLoading(false);

                if (res?.__signedIdentifier) {
                    setData(res);
                    setSignedIdentifier(res.__signedIdentifier);
                } else {
                    {{# if page.dataElement.isCreatable }}
                        navigate('/{{ page.dataElement.name }}/create');
                    {{ else }}
                        navigate('*');
                    {{/ if }}

                }
            } catch (error) {
                handleFetchError(error);
            } finally {
                setIsLoading(false);
            }
        }

        useEffect(() => {
            init();
        }, []);
    {{/ if }}

    async function fetchData(): Promise<{{ classDataName page.dataElement.target 'Stored' }} | undefined> {
        setIsLoading(true);
        let res: {{ classDataName page.dataElement.target 'Stored' }} | undefined;

        try {
            res = await {{ classServiceName page.dataElement.target }}Impl.refresh(
                { __signedIdentifier: signedIdentifier } as {{ classDataName page.dataElement.target 'Stored' }},
                processQueryCustomizer(queryCustomizer),
            );

            setData(res);
            setPayloadDiff({
                __identifier: res.__identifier,
                __signedIdentifier: res.__signedIdentifier,
                __version: res.__version,
                __entityType: res.__entityType,
            } as Record<keyof {{ classDataName page.dataElement.target 'Stored' }}, any>);
            if (postRefreshAction) {
                try {
                    await postRefreshAction(res, storeDiff, setEditMode, setValidation);
                } catch(error) {
                    console.error(error);
                }
            }
        } catch (error) {
            handleFetchError(error);
        } finally {
            setIsLoading(false);
            setRefreshCounter((prevCounter) => prevCounter + 1);
        }

        return res;
    }

    {{# if page.dataElement.isUpdatable }}
        async function submit() {
            {{# if (hasPageRequiredBy page) }}
                {{> actor/src/fragments/page/local-validate.fragment.hbs }}
            {{/ if }}

            setIsLoading(true);

            try {
                const res = await {{ classServiceName page.dataElement.target }}Impl.update(payloadDiff);

                if (res) {
                    enqueueSnackbar(t('judo.action.save.success', { defaultValue: 'Changes saved' }), {
                        variant: 'success',
                        ...toastConfig.success,
                    });
                    setValidation(new Map<keyof {{ classDataName page.dataElement.target '' }}, string>());
                    await fetchData();
                    setEditMode(false);
                }
            } catch (error) {
                handleUpdateError(error, { setValidation }, data);
            } finally {
                setIsLoading(false);
            }
        }
    {{/ if }}

    {{# if page.dataElement.isDeletable }}
        async function deleteData() {
            setIsLoading(true);

            try {
                await {{ classServiceName page.dataElement.target }}Impl.delete(data as {{ classDataName page.dataElement.target 'Stored' }});

                {{# if (isSingleAccessPage page) }}
                    navigate('/{{ page.dataElement.name }}/create');
                {{ else }}
                    back();
                {{/ if }}
            } catch (error) {
                handleDeleteError(error, undefined, data);
            } finally {
                setIsLoading(false);
            }
        }
    {{/ if }}

    {{# if (isSingleAccessPage page) }}
        useEffect(() => {
            if (signedIdentifier) {
                fetchData();
            }
        }, [signedIdentifier]);
    {{ else }}
        useEffect(() => {
            fetchData();
        }, []);
    {{/ if }}

    return (
        <>
            {{# with (getDataContainerForPage page) as |rootChild| }}
                <PageHeader title={title}>
                    <PageActions
                        data={data}
                        fetchData={fetchData}
                        editMode={editMode}
                        setEditMode={setEditMode}
                        isLoading={isLoading}
                        {{# if page.dataElement.isUpdatable }}submit={submit}{{/ if }}
                        {{# if page.dataElement.isDeletable }}deleteData={deleteData}{{/ if }}
                    />
                </PageHeader>
                <Container component="main" maxWidth="xl">
                    <PageContainerTransition>
                        <Box sx={mainContainerPadding}>
                            <Grid className="access-page-data" container spacing={2} direction="{{# if rootChild.isDirectionHorizontal }}row{{ else }}column{{/ if }}" alignItems="{{ alignItems rootChild }}" justifyContent="{{ justifyContent rootChild }}">
                                {{# each rootChild.children as |child| }}
                                    {{# if isDebugPrint }}{/* include: getWidgetTemplate() */}{{/ if }}
                                    {{> (getWidgetTemplate child) }}
                                {{/ each }}
                            </Grid>
                        </Box>
                    </PageContainerTransition>
                </Container>
            {{/ with }}
        </>
    );
}
