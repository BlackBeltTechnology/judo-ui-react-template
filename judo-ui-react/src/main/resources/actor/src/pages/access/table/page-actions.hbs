import { useTranslation } from 'react-i18next';
import { Button, Grid } from '@mui/material';
import { LoadingButton } from '@mui/lab';
import { MdiIcon } from '~/components';
import type { {{ classDataName page.dataElement.target 'Stored' }} } from '~/generated/data-api';
import {
    {{# each (getOnlyPageActions page) as |action| }}
        {{# unless action.isFilterAction }}
            {{ actionFunctionHookName action }},
        {{/ unless }}
    {{/ each }}
} from '../actions';

export interface PageActionsProps {
    isLoading: boolean;
    fetchData: () => Promise<{{ classDataName page.dataElement.target 'Stored' }}[] | undefined>;
}

export function PageActions (props: PageActionsProps) {
    const { isLoading, fetchData } = props;
    const { t } = useTranslation();

    {{# each (getOnlyPageActions page) as |action| }}
        {{# unless action.isFilterAction }}
            const {{ actionFunctionName action }} = {{ actionFunctionHookName action }}();
        {{/ unless }}
    {{/ each }}

    return (
        <>
            {{# each (getUniquePageActions page) as |action| }}
                {{# if action.isCreateAction }}
                    <Grid className="page-action" item>
                        <Button id="page-action-create" startIcon={<MdiIcon path="file_document_plus" />} onClick={ () => {{ actionFunctionName action }}(() => fetchData()) } disabled={isLoading}>
                            {t('judo.pages.table.create', { defaultValue: 'Create' })}
                        </Button>
                    </Grid>
                {{/ if }}
                {{# if action.isRefreshAction }}
                    <Grid className="page-action" item>
                        <LoadingButton loading={isLoading} loadingPosition="start" id="page-action-refresh" startIcon={<MdiIcon path="refresh" />} onClick={ () => {{ actionFunctionName action }}(async () => {await fetchData();}) } disabled={isLoading}>
                            {t('judo.pages.table.refresh', { defaultValue: 'Refresh' })}
                        </LoadingButton>
                    </Grid>
                {{/ if }}
            {{/ each }}
        </>
    );
}
