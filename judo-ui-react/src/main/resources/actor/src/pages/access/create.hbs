{{> fragment.header.hbs }}
// Page name: {{ page.name }}
// Page owner name: {{ page.owner.name }}
// Page DataElement name: {{ page.dataElement.name }}
// Page DataElement owner name: {{ page.dataElement.owner.name }}

import { useEffect, useState, useCallback, FC } from 'react';
import { useTranslation } from 'react-i18next';
import { Paper, Box, Button, Container, Grid, InputAdornment, TextField, MenuItem, Typography, Card, CardContent, Divider, RadioGroup, FormControlLabel, Radio } from '@mui/material';
import { DatePicker, DateTimePicker, TimePicker } from '@mui/x-date-pickers';
import { useSnackbar } from 'notistack';
import { v1 as uuidv1 } from 'uuid';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { ComponentProxy } from '@pandino/react-hooks';
import { {{ getMuiDataGridImportsForPage page }} } from '@mui/x-data-grid';
import { JudoIdentifiable } from '@judo/data-api-common';
import {
    MdiIcon,
    ModeledTabs,
    PageHeader,
    CustomBreadcrumb,
    useJudoNavigation,
} from '{{ relativePathFromPage page 'components' }}';
import { useRangeDialog } from '{{ relativePathFromPage page 'components/dialog' }}';
import { AggregationInput, AssociationButton, BinaryInput, CollectionAssociationButton, TrinaryLogicCombobox } from '{{ relativePathFromPage page 'components/widgets' }}';
import { useErrorHandler, ERROR_PROCESSOR_HOOK_INTERFACE_KEY, processQueryCustomizer, fileHandling, uiDateToServiceDate, serviceDateToUiDate, booleanToStringSelect, stringToBooleanSelect } from '{{ relativePathFromPage page 'utilities' }}';
import { baseTableConfig, toastConfig, dividerHeight } from '{{ relativePathFromPage page 'config' }}';
import { CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY, CustomFormVisualElementProps } from '{{ relativePathFromPage page 'custom' }}';
import { useL10N } from '{{ relativePathFromPage page 'l10n' }}/l10n-context';
import {
    {{# each (getApiImportsForCreatePage page) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '{{ relativePathFromPage page 'generated/data-api' }}';
import {
    {{ dataElementRelationName page.dataElement }}Impl,
    {{ classServiceName page.dataElement.target }}Impl,
} from '{{ relativePathFromPage page 'generated/data-axios'}}';
import { mainContainerPadding } from '{{ relativePathFromPage page 'theme' }}';
import { use{{ pageName page }} } from './hooks/use{{ pageName page }}';

{{# each (getVisualElementsWithCustomImplementation page) as |ve| }}
    export const {{ getCustomizationComponentInterfaceKey ve }} = '{{ getCustomizationComponentInterface ve }}';
    export interface {{ getCustomizationComponentInterface ve }} extends FC<CustomFormVisualElementProps<{{ classDataName page.dataElement.target '' }}>> {}
{{/ each }}

/**
 * Name: {{ page.name }}
 * Is Access: {{ boolValue page.relationType.isAccess }}
 * Is Dashboard: {{ boolValue page.isPageTypeDashboard }}
 * Type: Create
 **/
export default function {{ pageName page }}() {
    const { t } = useTranslation();
    const { navigate, back } = useJudoNavigation();
    const { openRangeDialog } = useRangeDialog();
    const handleFetchError = useErrorHandler(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Fetch))`);
    const handleCreateError = useErrorHandler<{{ classDataName page.dataElement.target '' }}>(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Create)(component={{ pageName page }}))`);
    const { downloadFile, extractFileNameFromToken, uploadFile } = fileHandling();
    const { locale: l10nLocale } = useL10N();
    const {
        {{# each (getPageTables page) as |table| }}
            {{ table.dataElement.name }}Columns,
            {{ table.dataElement.name }}RangeFilterOptions,
            {{ table.dataElement.name }}InitialQueryCustomizer,
        {{/ each }}
        {{# each (getPageWritableLinks page) as |link| }}
            {{ link.dataElement.name }}Columns,
            {{ link.dataElement.name }}RangeFilterOptions,
            {{ link.dataElement.name }}InitialQueryCustomizer,
        {{/ each }}
    } = use{{ pageName page }}();

    const { enqueueSnackbar } = useSnackbar();
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [data, setData] = useState<{{ classDataName page.dataElement.target '' }}>({
      __referenceId: uuidv1(),
    } as unknown  as {{ classDataName page.dataElement.target '' }});
    const [payloadDiff, setPayloadDiff] = useState<Record<keyof {{ classDataName page.dataElement.target '' }}, any>>({} as unknown as Record<keyof {{ classDataName page.dataElement.target '' }}, any>);
    const storeDiff: (attributeName: keyof {{ classDataName page.dataElement.target '' }}, value: any) => void = useCallback((attributeName: keyof {{ classDataName page.dataElement.target '' }}, value: any) => {
        {{# if debugPrint }}// include: actor/src/fragments/page/store-diff-body.hbs{{/ if }}
        {{> actor/src/fragments/page/store-diff-body.hbs classType=page.dataElement.target }}
    }, [data]);
    const [editMode, setEditMode] = useState<boolean>(true);
    const [validation, setValidation] = useState<Map<keyof {{ classDataName page.dataElement.target ''}}, string>>(new Map());
    {{# each (getPageTables page) as |table| }}
        {{# if debugPrint }}// include: actor/src/fragments/page/sort-models.fragment.hbs{{/ if }}
        {{> actor/src/fragments/page/sort-models.fragment.hbs dataElement=table.dataElement defaultSortColumn=table.defaultSortColumn columns=table.columns }}
        {{# if table.dataElement.isAddable }}
            {{# if debugPrint }}// include: actor/src/fragments/action/range-call.fragment.hbs{{/ if }}
            {{> actor/src/fragments/action/range-call.fragment.hbs dataElement=table.dataElement }}
            {{# if debugPrint }}// include: actor/src/fragments/action/selection-model.fragment.hbs{{/ if }}
            {{> actor/src/fragments/action/selection-model.fragment.hbs dataElement=table.dataElement }}
        {{/ if }}
    {{/ each }}
    const title: string = t('{{ idToTranslationKey page.fQName application }}', { defaultValue: '{{ page.label }}' });

    {{# if debugPrint }}// include: actor/src/fragments/page/input-form-flags.hbs{{/ if }}
    {{> actor/src/fragments/page/input-form-flags.hbs }}

    {{# if page.dataElement.target.isTemplateable }}
        const fetchData = async () => {
            setIsLoading(true);

            try {
                const res = await {{ classServiceName page.dataElement.target }}Impl.getTemplate();
                setData((prevData) => ({ ...prevData, ...res }));
                setPayloadDiff({
                    ...res,
                } as Record<keyof {{ classDataName page.dataElement.target '' }}, any>);
            } catch (error) {
                handleFetchError(error);
            } finally {
                setIsLoading(false);
            }
        };

        useEffect(() => {
            fetchData();
        }, []);
    {{/ if }}

    const saveData = async () => {
        setIsLoading(true);

        try {
            const res = await {{ dataElementRelationName page.dataElement }}Impl.create{{ ucFirst page.dataElement.name }}(payloadDiff);

            if (res) {
                back();
            }
        } catch (error) {
            handleCreateError(error, { setValidation }, data);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            {{# with (getDataContainerForPage page) as |rootChild| }}
                <PageHeader title={title}>
                    <Grid item>
                        <Button id="page-action-save" onClick={async () => await saveData()} disabled={isLoading}>
                            <MdiIcon path="save" />
                            {t('judo.pages.save', { defaultValue: 'Save' })}
                        </Button>
                    </Grid>
                </PageHeader>
                <Container component="main" maxWidth="xl">
                    <Box sx={mainContainerPadding}>
                        <Grid container xs={12} sm={12} spacing={2} direction="{{# if rootChild.isDirectionHorizontal }}row{{ else }}column{{/ if }}" alignItems="{{ alignItems rootChild }}" justifyContent="{{ justifyContent rootChild }}">
                            {{# each rootChild.children as |child| }}
                                {{# if debugPrint }}// include: getWidgetTemplate(){{/ if }}
                                {{> (getWidgetTemplate child) }}
                            {{/ each }}
                        </Grid>
                    </Box>
                </Container>
            {{/ with }}
        </>
    );
}
