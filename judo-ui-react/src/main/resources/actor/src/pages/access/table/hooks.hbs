{{> fragment.header.hbs }}
// Hook: Access Table

import type { {{ getMuiDataGridImportsForHooks }} } from '@mui/x-data-grid';
import { Button } from '@mui/material';
import { useTranslation } from 'react-i18next';
import { FilterType } from '~/components-api';
import type { FilterOption } from '~/components-api';
import { MdiIcon, useJudoNavigation } from '~/components';
import { fileHandling, serviceDateToUiDate, serviceTimeToUiTime, PersistedTableData, TableRowAction } from '~/utilities';
import {
    {{ classDataName page.dataElement.target 'Stored' }},
} from '~/generated/data-api';
import { baseColumnConfig, toastConfig } from '~/config';
import { useL10N } from '~/l10n/l10n-context';
import {
    {{# each (getUniquePageActions page) as |action| }}
        {{# unless action.isFilterAction }}
            {{ actionFunctionHookName action }},
        {{/ unless }}
    {{/ each }}
} from '../actions';

export const use{{ pageName page }} = (fetchData: () => Promise<void>) => {
    const { navigate } = useJudoNavigation();
    const { t } = useTranslation();
    const { downloadFile, extractFileNameFromToken, uploadFile } = fileHandling();
    const { locale: l10nLocale } = useL10N();

    {{# each (getUniquePageActions page) as |action| }}
        {{# unless action.isFilterAction }}
            const {{ actionFunctionName action }} = {{ actionFunctionHookName action }}();
        {{/ unless }}
    {{/ each }}

    {{# with (getTableForTablePage page) as |table| }}
        const columns: GridColDef<{{ classDataName page.dataElement.target 'Stored' }}>[] = [
            {{# each table.columns as |column| }}
                {
                    ...baseColumnConfig,
                    field: '{{ column.attributeType.name }}',
                    headerName: t('{{ idToTranslationKey column.fQName application }}', { defaultValue: '{{ column.label }}' }) as string,
                    headerClassName: 'data-grid-column-header',
                    {{# if debugPrint }}// include: actor/src/fragments/relation/column.fragment.hbs{{/ if }}
                    {{> actor/src/fragments/relation/column.fragment.hbs column=column dataElement=table.dataElement name=table.name }}
                },
            {{/ each }}
        ];

        const filterOptions: FilterOption[] = [
            {{# each table.filters as |filter| }}
                {{# if debugPrint }}// include: actor/src/fragments/table/filter-option.fragment.hbs{{/ if }}
                {{> actor/src/fragments/table/filter-option.fragment.hbs filter=filter application=application }}
            {{/ each }}
        ];

        const rowActions: TableRowAction<{{ classDataName table.dataElement.target 'Stored' }}>[] = [
            {{# each table.rowActions as |action| }}
                {{# if action.isDeleteAction }}
                    {
                    id: '{{ createId action }}',
                        label: t('judo.pages.table.delete', { defaultValue: 'Delete' }) as string,
                        icon: <MdiIcon path="{{ action.icon.name }}" />,
                        action: async (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{ actionFunctionName action }}(row, () => fetchData()),
                        disabled: (row: {{ classDataName table.dataElement.target 'Stored' }}) => !row.__deleteable,
                    },
                {{/ if }}
                {{# if action.isCallOperationAction }}
                    {
                        id: '{{ createId action }}',
                        label: t('{{ idToTranslationKey action.fQName application }}', { defaultValue: '{{ action.label }}' }) as string,
                        icon: <MdiIcon path="{{ action.icon.name }}" />,
                        action: async (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{ actionFunctionName action }} ({{# if action.operation.isMapped }}row, {{/ if }}() => fetchData()),
                    },
                {{/ if }}
            {{/ each }}
        ];
    {{/ with }}

    return {
        columns,
        filterOptions,
        rowActions,
    };
};
