{{> fragment.header.hbs }}
// Page name: {{ page.name }}
// Page owner name: {{ page.owner.name }}
// Page DataElement name: {{ page.dataElement.name }}
// Page DataElement owner name: {{ page.dataElement.owner.name }}

{{# if isDebugPrint }}// include: actor/src/fragments/page/common-table-imports.fragment.hbs{{/ if }}
{{> actor/src/fragments/page/common-table-imports.fragment.hbs }}

import { PageActions } from './components/PageActions';
{{# each page.originalPageContainer.tables as |table| }}
    import { {{ tableComponentName table }} } from './components/{{ tableComponentName table }}';
{{/ each }}

/**
 * Name: {{ page.name }}
 * Is Access: false
 * Type: Table
 **/
export default function {{ pageName page }}() {
    const tableRef = useRef<RefreshableTable>(null);
    const { t } = useTranslation();
    const { signedIdentifier } = useParams();
    const { locale: l10nLocale } = useL10N();
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const title: string = t('{{ getTranslationKeyForPage page }}', { defaultValue: '{{ page.label }}' });

    const handleFetchData = async () => {
        tableRef.current?.fetchData();
    };

    {{# with (getTableForTablePage page) as |table| }}
        return (
            <>
                <PageHeader title={title}>
                    <PageActions fetchData={handleFetchData} isLoading={isLoading} signedIdentifier={signedIdentifier} />
                </PageHeader>
                <Container component="main" maxWidth="xl">
                    <PageContainerTransition>
                        <Box sx={mainContainerPadding}>
                            <Grid container spacing={2}>
                                <Grid item xs={12}>
                                    <Card>
                                        <CardContent id="{{ createId page }}-data-grid">
                                            <{{ tableComponentName table }}
                                                ref={ tableRef }
                                                ownerData= { { __signedIdentifier: signedIdentifier! } }
                                                isOwnerLoading={ isLoading }
                                                setIsOwnerLoading={ setIsLoading }
                                            />
                                        </CardContent>
                                    </Card>
                                </Grid>
                            </Grid>
                        </Box>
                    </PageContainerTransition>
                </Container>
            </>
        );
    {{/ with }}
}
