import { useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import { Button, Grid } from '@mui/material';
import type { JudoIdentifiable } from '@judo/data-api-common';
import { MdiIcon, useJudoNavigation } from '~/components';
import {
    {{# each (getApiImportsForViewPage page) as |imp| }}
        {{ imp }},
    {{/ each }}
} from '~/generated/data-api';
import {
    {{# each (getOnlyPageActions page) as |action| }}
        {{ actionFunctionHookName action }},
    {{/ each }}
} from '../actions';

export interface PageActionsProps {
    isLoading: boolean;
    tableRef: any;
    signedIdentifier?: string;
}

export function PageActions (props: PageActionsProps) {
    const { isLoading, tableRef, signedIdentifier } = props;
    const { t } = useTranslation();

    {{# each (getOnlyPageActions page) as |action| }}
        {{# unless action.isFilterAction }}
            const {{ actionFunctionName action }} = {{ actionFunctionHookName action }}();
        {{/ unless }}
    {{/ each }}

    {{# with (getTableForTablePage page) as |table| }}
        return (
            <>
                {{# each (getUniquePageActions page) as |action| }}
                    {{# if action.isRefreshAction }}
                        <Grid className="page-action" item>
                            <Button id="page-action-refresh" onClick={ () => {{ actionFunctionName action }}(() => tableRef.current?.fetchData()) } disabled={isLoading}>
                                <MdiIcon path="refresh" />
                                {t('judo.pages.table.refresh', { defaultValue: 'Refresh' })}
                            </Button>
                        </Grid>
                    {{/ if }}
                    {{# if action.isAddAction }}
                        <Grid className="page-action" item>
                            <Button id="page-action-add" onClick={ () => {{ actionFunctionName action }}({ __signedIdentifier: signedIdentifier } as JudoIdentifiable<{{ classDataName table.dataElement.owner '' }}>, () => tableRef.current?.fetchData()) } disabled={isLoading}>
                                <MdiIcon path="attachment-plus" />
                                {t('judo.pages.table.add', { defaultValue: 'Add' })}
                            </Button>
                        </Grid>
                    {{/ if }}
                    {{# if action.isClearAction }}
                        <Grid className="page-action" item>
                            <Button id="page-action-clear" onClick={ () => {{ actionFunctionName action }}({ __signedIdentifier: signedIdentifier } as JudoIdentifiable<{{ classDataName table.dataElement.owner '' }}>, () => tableRef.current?.fetchData()) } disabled={isLoading}>
                                <MdiIcon path="link_off" />
                                {t('judo.pages.table.clear', { defaultValue: 'Clear' })}
                            </Button>
                        </Grid>
                    {{/ if }}
                    {{# if action.isCreateAction }}
                        <Grid className="page-action" item>
                            <Button id="page-action-create" onClick={ () => {{ actionFunctionName action }}({ __signedIdentifier: signedIdentifier } as JudoIdentifiable<{{ classDataName table.dataElement.owner '' }}>, () => tableRef.current?.fetchData()) } disabled={isLoading}>
                                <MdiIcon path="file_document_plus" />
                                {t('judo.pages.table.create', { defaultValue: 'Create' })}
                            </Button>
                        </Grid>
                    {{/ if }}
                {{/ each }}
            </>
        );
    {{/ with }}
}
