{{> fragment.header.hbs }}

import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { User, WebStorageStateStore } from 'oidc-client-ts';

const securityStore: { authority?: string, clientId?: string, name?: string } = {};

export function storeMeta(meta: any): void {
  securityStore.authority = meta.issuer;
  securityStore.clientId = meta.clientId;
  securityStore.name = meta.name;
}

export const storageKey = () => `oidc.user:${securityStore.name!}:${securityStore.clientId!}`;

// We need to store the user per realm, not per actor.
const store: Storage = {
 ...window.sessionStorage,
 getItem(key: string): string | null {
   return window.sessionStorage.getItem(storageKey());
 },
 setItem(key: string, value: string) {
   window.sessionStorage.setItem(storageKey(), value);
 },
 removeItem(key: string) {
    window.sessionStorage.removeItem(storageKey());
  },
}

export const clearSecurityStorage = () => store.removeItem(storageKey());

export const userStore = new WebStorageStateStore({ store: store as Storage });

export function getUser(): any {
  const { name } = securityStore;

  const oidcStorage = window.sessionStorage.getItem(storageKey());
  if (!oidcStorage) {
    return null;
  }

  return User.fromStorageString(oidcStorage);
}

export const axiosRequestInterceptor = (config: AxiosRequestConfig) => {
  try {
    if (!config.url?.endsWith('~meta')) {
      const user = getUser();
      const accessToken = user?.access_token;

      if (accessToken && config.headers) {
        config.headers!.Authorization = `Bearer ${accessToken}`;
      }
    }
  } catch (_) {}

  return config;
}

export const axiosResponseInterceptor = (response: AxiosResponse) => {
  return response;
};

export const axiosResponseErrorHandler = (error: AxiosError<{code:string}>) => {
  if (error.response && error.response.status === 401 && error.response.data.code === "INVALID_TOKEN" ) {
    clearSecurityStorage();
    window.location.reload();
  }
  return Promise.reject(error);
};
