{{> fragment.header.hbs }}

{{# if application.authentication }}
    import { createContext, useContext, useState, useEffect } from 'react';
    import type { ReactNode } from 'react';
    import { useAuth } from 'react-oidc-context';
    import { {{ classDataName application.principal 'Stored' }} } from '../generated/data-api';
    import { accessServiceImpl } from '../generated/data-axios';

    export interface PrincipalContext {
        principal: {{ classDataName application.principal 'Stored' }};
        setPrincipal: (principal: {{ classDataName application.principal 'Stored' }}) => void;
        getPrincipal: () => Promise<{{ classDataName application.principal 'Stored' }}>;
    }

    const PrincipalContext = createContext<PrincipalContext>({} as unknown as PrincipalContext);

    export const PrincipalProvider = ({ children }: { children: ReactNode }) => {
        const [principal, setPrincipal] = useState<{{ classDataName application.principal 'Stored' }}>({} as unknown as {{ classDataName application.principal 'Stored' }});
        const { isAuthenticated } = useAuth();

        async function fetchData(): Promise<{{ classDataName application.principal 'Stored' }} | undefined> {
            let res: {{ classDataName application.principal 'Stored' }} | undefined;

            try {
                const res = await accessServiceImpl.getPrincipal();
                setPrincipal({ ...res });
            } catch (e) {
                console.error(e);
            }

            return res;
        }

        const getPrincipal = (): Promise<{{ classDataName application.principal 'Stored' }}> => accessServiceImpl.getPrincipal();

        useEffect(() => {
            if (isAuthenticated) {
                fetchData();
            } else {
                setPrincipal({} as unknown as {{ classDataName application.principal 'Stored' }});
            }
        }, [isAuthenticated]);

        return (
            <PrincipalContext.Provider value={ { principal, setPrincipal, getPrincipal } }>
                {children}
            </PrincipalContext.Provider>
        );
    };

    export const usePrincipal = () => {
        const { principal, setPrincipal, getPrincipal } = useContext(PrincipalContext);

        return { principal, setPrincipal, getPrincipal };
    };
{{ else }}
    // nothing to export, application has no Principal
    export default {};
{{/ if }}
