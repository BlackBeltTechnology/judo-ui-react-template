{{> fragment.header.hbs }}

import type { ReactNode } from 'react';
import { useEffect } from 'react';
import { useAuth, hasAuthParams } from 'react-oidc-context';
import { useTranslation } from 'react-i18next';
import { useSearchParams } from 'react-router-dom';
{{# if application.authentication }}
  import { getUser, clearSecurityStorage } from '../auth';
{{/ if }}

export const Auth = ({ children }: { children?: ReactNode }) => {
  const { isAuthenticated, isLoading, activeNavigator, signinRedirect, events } = useAuth();
  const { t } = useTranslation();

  {{# if application.authentication }}
  // check current token's user name with given parameter (when defined)
  useEffect(() => {
    const search = window.location.search;
    const params = new URLSearchParams(search);
    const forcedUser = params.get('user');

    if (forcedUser != null) {
      // Get current user name from token
      const { profile } = getUser();
      const tokenUser = profile?.preferred_username;
      if (tokenUser != null && tokenUser === forcedUser) {
        clearSecurityStorage();
        window.location.reload();
      }
    }
  }, [useSearchParams, getUser]);
  {{/ if }}

  // automatically sign-in
  useEffect(() => {
    if (!hasAuthParams() && !isAuthenticated && !activeNavigator && !isLoading) {
      signinRedirect();
    }
  }, [isAuthenticated, activeNavigator, isLoading, signinRedirect]);

  useEffect(() => {
    // workaround for oidc redirect issue where query string params are filled before the hash...
    if (isAuthenticated && !activeNavigator && !isLoading) {
      if (window.location.href.includes(window.location.pathname + '?')) {
        window.location.replace(window.location.href.replace(window.location.search, ''));
      }
    }
  }, [isAuthenticated, activeNavigator, isLoading]);

  useEffect(() => {
    return events.addAccessTokenExpired(() => {
      const res = confirm(t('judo.security.session-expired', { defaultValue: 'Session expired. The application must be reloaded in order to refresh it.' }) as string)
      if (res) {
        window.location.reload();
      }
    });
  }, [events]);

  if (activeNavigator) {
    return <div>Signing you in/out...</div>;
  }

  if (!isAuthenticated) {
    return <div>Unable to log in</div>;
  }

  return (
    <>
      {children}
    </>
  );
}
