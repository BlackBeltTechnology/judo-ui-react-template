{{> fragment.header.hbs }}

import Autocomplete from '@mui/material/Autocomplete';
import Button from '@mui/material/Button';
import ButtonGroup from '@mui/material/ButtonGroup';
import Box from '@mui/material/Box';
import CircularProgress from '@mui/material/CircularProgress';
import Grid from '@mui/material/Grid';
import IconButton from '@mui/material/IconButton';
import InputAdornment from '@mui/material/InputAdornment';
import TextField from '@mui/material/TextField';
import ClickAwayListener from '@mui/material/ClickAwayListener';
import Grow from '@mui/material/Grow';
import Paper from '@mui/material/Paper';
import Popper from '@mui/material/Popper';
import MenuItem from '@mui/material/MenuItem';
import MenuList from '@mui/material/MenuList';
import { debounce } from '@mui/material/utils';
import { useTranslation } from 'react-i18next';
import type { JudoStored } from '~/services/data-api/common';
import { useState, useEffect, useMemo, useRef } from 'react';
import type { ReactNode } from 'react';
import { clsx } from 'clsx';
import { debounceInputs } from '~/config';
import { exists } from '../../utilities';
import { AggregationInputButtonProps } from '../../utilities/application';
import { MdiIcon } from '../MdiIcon';

interface AggregationInputProps {
  name: string;
  id: string;
  required?: boolean;
  label?: string;
  ownerData: any;
  error?: boolean;
  helperText?: string;
  readOnly?: boolean;
  disabled?: boolean;
  editMode?: boolean;
  icon?: ReactNode;
  autoCompleteAttribute: string;
  onAutoCompleteSearch?: (searchText: string) => Promise<JudoStored<any>[]>,
  onAutoCompleteSelect: (target?: JudoStored<any> | null) => void;
  isInlineCreatable?: boolean;
  aggregationInputButtonProps: AggregationInputButtonProps[];
}

export const AggregationInput = ({
  name,
  id,
  required,
  label,
  ownerData,
  error = false,
  helperText,
  readOnly = false,
  disabled = false,
  editMode = true,
  icon,
  autoCompleteAttribute,
  onAutoCompleteSearch,
  onAutoCompleteSelect,
  isInlineCreatable,
  aggregationInputButtonProps,
}: AggregationInputProps) => {
  const [options, setOptions] = useState<JudoStored<any>[]>([]);
  const [loading, setLoading] = useState(false);
  const [allowFetch, setAllowFetch] = useState(false);
  const [value, setValue] = useState<any>(ownerData[name] || null);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const anchorRef = useRef<HTMLDivElement>(null);

  const { t } = useTranslation();

  useEffect(() => {
    setValue(ownerData[name] || null);
  }, [ownerData[name]]);

  const onSet = useMemo(() => aggregationInputButtonProps.find(a => a.name === 'set'), [aggregationInputButtonProps]);

  const onDelete = useMemo(() => aggregationInputButtonProps.find(a => a.name === 'delete'), [aggregationInputButtonProps]);

  const onUnSet = useMemo(() => aggregationInputButtonProps.find(a => a.name === 'unset'), [aggregationInputButtonProps]);

  const handleSearch = async (searchText: string) => {
    try {
      if (onAutoCompleteSearch) {
        setLoading(true);
        const data = await onAutoCompleteSearch(searchText);
        setOptions(data);
      }
    } catch (error) {
      // Handle error
    } finally {
      setLoading(false);
    }
  };

  const onInputChange = useMemo(
    () => debounce(
    (event: any, value: string, reason: string) => {
      if (allowFetch && reason !== 'reset') {
        handleSearch(value);
      }
    },
    debounceInputs,
  ), [ownerData, allowFetch]);

  const handleDropdownToggle = () => {
    setDropdownOpen((prevOpen) => !prevOpen);
  };

  const handleDropdownClose = (event: Event) => {
    if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {
      return;
    }

    setDropdownOpen(false);
  };
  const effectiveReadOnly = readOnly || !onAutoCompleteSearch || !onSet?.onClick;

  return (
    <Grid container item direction="row" justifyContent="stretch" alignContent="stretch">
      <Box sx={ { padding: 0, flexGrow: 1 } }>
        <Autocomplete
          freeSolo={true}
          forcePopupIcon={!!onAutoCompleteSearch}
          id={id}
          disabled={!effectiveReadOnly && disabled}
          readOnly={effectiveReadOnly}
          onOpen={ () => {
            if (!readOnly) {
              setOptions([]); // always start with a clean slate
              setAllowFetch(true);
              handleSearch('');
            }
          } }
          isOptionEqualToValue={ (option: any, value: any) => option[autoCompleteAttribute] === value[autoCompleteAttribute] }
          getOptionLabel={ (option) => option[autoCompleteAttribute as keyof JudoStored<any>] as string || '' }
          options={options}
          value={ownerData[name] || null}
          clearOnBlur={true}
          loading={loading}
          disableClearable={true}
          renderInput={ (params) => (
            <TextField
              {...params}
              name={name}
              id={id}
              required={required}
              label={label}
              error={error}
              helperText={helperText}
              className={ clsx({
                  'JUDO-viewMode': !editMode,
                  'JUDO-required': required,
              }) }
              onFocus={event => {
                event.target.select();
              }}
              InputProps={ {
                ...params.InputProps,
                readOnly: readOnly || !onSet?.onClick,
                startAdornment: icon && <InputAdornment position="start" style={ { marginTop: 0 } }>{icon}</InputAdornment>,
                endAdornment: (
                  <InputAdornment position="end">
                    <ButtonGroup
                      ref={anchorRef}
                      aria-label="link button group"
                      className={clsx({
                        'AggregationInputButtonGroup': true,
                        'AggregationFilled': exists(value),
                      })}
                    >
                      {loading ? <CircularProgress color="inherit" size='1rem' className="AggregationInputLoading" /> : null}
                      { aggregationInputButtonProps.filter(a => a.name === 'set' || a.name === 'view' || a.name === 'create').map( (aggregationInputButtonProp: AggregationInputButtonProps) => 
                          aggregationInputButtonProp.visible && aggregationInputButtonProp.visible(value, aggregationInputButtonProp.onClick) && (
                            <IconButton
                              className={aggregationInputButtonProp.className}
                              disabled={aggregationInputButtonProp.disabled}
                              onClick={(event: any) => {
                                handleDropdownClose(event);
                                aggregationInputButtonProp.onClick!();
                              }}
                              title={aggregationInputButtonProp.title}
                            >
                              <MdiIcon path={aggregationInputButtonProp.iconName} />
                            </IconButton>
                          )
                        )
                      }
                      {exists(value) && (onDelete?.onClick || onSet?.onClick || onUnSet?.onClick) && (
                        <IconButton className={`${name}-dropdown`} disabled={disabled} onClick={handleDropdownToggle}>
                          <MdiIcon path="chevron-down" />
                        </IconButton>
                      )}
                    </ButtonGroup>
                  </InputAdornment>
                ),
              } }
            />
          ) }
          onInputChange={onInputChange}
          onChange={ (event, target) => {
            setValue(target);
            onAutoCompleteSelect(target);
          } }
        />
      </Box>
      <Popper
        sx={ {
          zIndex: 1,
        } }
        open={dropdownOpen}
        anchorEl={anchorRef.current}
        role={undefined}
        transition
        disablePortal
      >
        {({ TransitionProps, placement }) => (
        <Grow
          {...TransitionProps}
          style={ {
            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',
          } }
        >
          <Paper>
            <ClickAwayListener onClickAway={handleDropdownClose}>
              <MenuList id={`${name}-menu`} autoFocusItem>
                { aggregationInputButtonProps.filter(a => a.name === 'set' || a.name === 'delete' || a.name === 'unset').map( (aggregationInputButtonProp: AggregationInputButtonProps) => 
                    aggregationInputButtonProp.dropDownButtonIsVisible && aggregationInputButtonProp.dropDownButtonIsVisible(value, aggregationInputButtonProp.onClick) && (
                      <MenuItem
                        className={aggregationInputButtonProp.className}
                        disabled={aggregationInputButtonProp.disabled}
                        onClick={(event: any) => {
                          handleDropdownClose(event);
                          aggregationInputButtonProp.onClick!();
                        }}
                      >
                        <MdiIcon path={aggregationInputButtonProp.iconName} sx={ { mr: 2 } } />
                        {aggregationInputButtonProp.title}
                      </MenuItem>
                    )
                  )
                }
              </MenuList>
            </ClickAwayListener>
          </Paper>
        </Grow>
        )}
      </Popper>
    </Grid>
  );
};
