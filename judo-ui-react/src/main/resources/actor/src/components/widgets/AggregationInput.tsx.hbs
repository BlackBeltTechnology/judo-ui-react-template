{{> fragment.header.hbs }}

import { Autocomplete, Box, CircularProgress, Grid, IconButton, InputAdornment, TextField } from '@mui/material';
import { debounce } from '@mui/material/utils';
import { useTranslation } from 'react-i18next';
import type { JudoStored } from '@judo/data-api-common';
import { useState, useEffect, useMemo } from 'react';
import type { ReactNode } from 'react';
import { debounceInputs } from '~/config';
import { exists } from '../../utilities';
import { MdiIcon } from '../MdiIcon';

interface AggregationInputProps {
  name: string;
  id: string;
  label?: string;
  ownerData: any;
  error?: boolean | undefined;
  helperText?: string | undefined;
  disabled?: boolean | undefined;
  editMode: boolean | undefined;
  labelList: string[];
  icon?: ReactNode;
  onCreate?: () => Promise<void> | undefined;
  onDelete?: () => Promise<void> | undefined;
  onEdit?: () => Promise<void> | undefined;
  onRemove?: () => Promise<void> | undefined;
  onSet?: () => Promise<void> | undefined;
  onUnset?: () => Promise<void> | undefined;
  onView?: () => Promise<void> | undefined;
  autoCompleteAttribute: string;
  onAutoCompleteSearch?: (searchText: string) => Promise<JudoStored<any>[]>,
  onAutoCompleteSelect: (target?: JudoStored<any> | null) => void;
}

export const AggregationInput = ({
  name,
  id,
  label,
  ownerData,
  error = false,
  helperText,
  disabled = false,
  editMode = true,
  labelList,
  icon,
  onCreate,
  onDelete,
  onEdit,
  onRemove,
  onSet,
  onUnset,
  onView,
  autoCompleteAttribute,
  onAutoCompleteSearch,
  onAutoCompleteSelect,
}: AggregationInputProps) => {
  const [options, setOptions] = useState<JudoStored<any>[]>([]);
  const [loading, setLoading] = useState(false);
  const [allowFetch, setAllowFetch] = useState(false);
  const [value, setValue] = useState<any>(ownerData[name] || null);

  const { t } = useTranslation();

  useEffect(() => {
    setValue(ownerData[name] || null);
  }, [ownerData[name]]);

  const handleSearch = async (searchText: string) => {
    try {
      if (onAutoCompleteSearch) {
        const data = await onAutoCompleteSearch(searchText);
        setOptions(data);
      }
    } catch (error) {
      // Handle error
    }
  };

  const onInputChange = useMemo(
    () => debounce(
    (event: any, value: string) => {
      if (allowFetch) {
        handleSearch(value);
      }
    },
    debounceInputs,
  ), [ownerData]);

  return (
    <Grid container item direction="row" justifyContent="stretch" alignContent="stretch">
      <Box sx={ { padding: 0, flexGrow: 1 } }>
        <Autocomplete
          freeSolo={true}
          forcePopupIcon={!!onAutoCompleteSearch}
          id={id}
          disabled={disabled || !onSet}
          readOnly={!onAutoCompleteSearch}
          onOpen={ () => {
            setAllowFetch(true);
            handleSearch('');
          } }
          isOptionEqualToValue={ (option: any, value: any) => option[autoCompleteAttribute] === value[autoCompleteAttribute] }
          getOptionLabel={ (option) => option[autoCompleteAttribute as keyof JudoStored<any>] as string || '' }
          options={options}
          value={ownerData[name] || null}
          clearOnBlur={true}
          loading={loading}
          disableClearable={onUnset === undefined && onRemove === undefined}
          renderInput={ (params) => (
            <TextField
              {...params}
              name={name}
              id={id}
              label={label}
              error={error}
              helperText={helperText}
              className={!editMode ? 'JUDO-viewMode' : undefined}
              InputProps={ {
                ...params.InputProps,
                readOnly: !onSet || disabled,
                startAdornment: icon && <InputAdornment position="start" style={ { marginTop: 0 } }>{icon}</InputAdornment>,
                endAdornment: (
                  <>
                    {loading ? <CircularProgress color="inherit" size={20} /> : null}
                    {params.InputProps.endAdornment}
                  </>
                ),
              } }
            />
          ) }
          onInputChange={onInputChange}
          onChange={ (event, target) => {
            setValue(target);
            onAutoCompleteSelect(target);
          } }
        />
      </Box>
      {onSet && (
        <IconButton className={`${name}-set`} disabled={disabled} onClick={onSet} title={t('judo.component.AggregationInput.open-filter', { defaultValue: 'Open filter dialog' }) as string}>
          <MdiIcon path="magnify" />
        </IconButton>
      )}
      {exists(value) && onView && (
        <IconButton className={`${name}-view`} disabled={disabled || editMode} onClick={onView} title={t('judo.component.AggregationInput.navigate', { defaultValue: 'Navigate to element' }) as string}>
          <MdiIcon path="eye" />
        </IconButton>
      )}
      {exists(value) && onEdit && (
        <IconButton className={`${name}-edit`} disabled={disabled || editMode} onClick={onEdit} title={t('judo.component.AggregationInput.open-editor', { defaultValue: 'Edit' }) as string}>
          <MdiIcon path="pencil" />
        </IconButton>
      )}
      {exists(value) && onDelete && (
        <IconButton className={`${name}-delete`} disabled={disabled || editMode} onClick={onDelete} title={t('judo.component.AggregationInput.delete', { defaultValue: 'Delete' }) as string}>
          <MdiIcon path="delete" />
        </IconButton>
      )}
      {/*exists(value) && onRemove && (
        <IconButton className={`${name}-remove`} disabled={disabled} onClick={onRemove} title={t('judo.component.AggregationInput.remove', { defaultValue: 'Remove' }) as string}>
            <MdiIcon path="link_off" />
        </IconButton>
      )*/}
      {/*exists(value) && onUnset && (
        <IconButton className={`${name}-unset`} disabled={disabled} onClick={onUnset} title={t('judo.component.AggregationInput.unset', { defaultValue: 'Unset' }) as string}>
            <MdiIcon path="link_off" />
        </IconButton>
      )*/}
      {!exists(value) && onCreate && (
        <IconButton className={`${name}-create`} disabled={disabled || editMode} onClick={onCreate} title={t('judo.component.AggregationInput.create', { defaultValue: 'Create' }) as string}>
          <MdiIcon path="file_document_plus" />
        </IconButton>
      )}
    </Grid>
  );
};
