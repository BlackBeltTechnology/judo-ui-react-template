{{> fragment.header.hbs }}

import type { ReactNode, SyntheticEvent } from 'react';
import { useState, useEffect } from 'react';
import { Tabs, Tab, Box } from '@mui/material';
import { MdiIcon } from './MdiIcon';

export interface TabPanelProps {
    id: string;
    children?: ReactNode;
    index: number;
    value: number;
}

export function TabPanel(props: TabPanelProps) {
    const { id, children, value, index, ...other } = props;

    return (
        <div
            role="tabpanel"
            hidden={value !== index}
            id={id}
            aria-labelledby={`simple-tab-${index}`}
            {...other}
        >
            {value === index && (
                <Box sx={ { p: (theme) => theme.spacing(3) } }>
                    {children}
                </Box>
            )}
        </div>
    );
}

export interface ChildTabProps {
    id: string;
    name: string;
    label?: string;
    icon?: string;
    disabled?: boolean | null;
    hidden?: boolean | null;
}

export interface ModeledTabsProps {
    id: string;
    ownerData?: Record<any, any>;
    childTabs: ChildTabProps[];
    children: ReactNode;
    orientation?: 'horizontal' | 'vertical';
}

export function ModeledTabs({ id, ownerData, childTabs, children, orientation }: ModeledTabsProps) {
    const [value, setValue] = useState<number>(0);
    const border = orientation === 'vertical' ? 'borderRight' : 'borderBottom';
    const additionalBoxSx = orientation === 'vertical' ? { flexGrow: 1, display: 'flex' } : {};

    useEffect(() => {
        if (ownerData && ownerData.__identifier) {
            sessionStorage.setItem(`${id}-${ownerData.__identifier}`, String(value))
        }
    }, [value]);

    useEffect(() => {
        if (ownerData && ownerData.__identifier) {
            setValue(Number(sessionStorage.getItem(`${id}-${ownerData.__identifier}`) || '0'));
        }
    }, [ownerData]);

    return (
        <Box id={id} sx={ { width: '100%', ...additionalBoxSx } }>
            <Tabs
                orientation={orientation}
                variant="scrollable"
                value={value}
                onChange={ (event: SyntheticEvent, newValue: number) => setValue(newValue) }
                textColor="secondary"
                indicatorColor="secondary"
                sx={ { [border]: 1, borderColor: 'divider' } }
            >
                {childTabs.filter(c => !c.hidden).map((c: any, index: number) => (
                <Tab id={`${c.id}-tab`} key={c.id} label={c.label} icon={c.icon ? <MdiIcon path={c.icon} sx={ { m: '0 0.5rem' } } /> : '' } iconPosition="start" disabled={c.disabled} />
                ))}
            </Tabs>
            {childTabs.filter(c => !c.hidden).map((c: any, index: number) => (
                <TabPanel id={`${c.id}-tab-panel`} key={c.id} value={value} index={index}>
                    {Array.isArray(children) ? children[index] : ''}
                </TabPanel>
            ))}
        </Box>
    );
}
