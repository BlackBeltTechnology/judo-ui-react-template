///////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    S O U R C E
// ------------------------------
// Path expression: {{{ cleanup template.pathExpression }}}
// Template name: {{ template.templateName }}

import { createRoot } from 'react-dom/client';
import axios from 'axios';
import { HashRouter, Route, Routes } from 'react-router-dom';
import Pandino from '@pandino/pandino';
import loaderConfiguration from '@pandino/loader-configuration-dom';
import { PandinoProvider } from '@pandino/react-hooks';
{{# if application.authentication }}
    import { AuthProvider } from 'react-oidc-context';
    import { axiosRequestInterceptor, Auth, storeMeta, getUser, appBaseUri } from './auth';
{{/ if }}
import { applicationCustomizer } from './custom';
import { accessServiceImpl, judoAxiosProvider } from './generated/data-axios';
import App from './App';
import { routes } from './routes';

{{# if application.authentication }}
  axios.interceptors.request.use(axiosRequestInterceptor);
{{/ if }}

const API_DEFAULT_BASE_URL: string = process.env.API_DEFAULT_BASE_URL || window.location.origin;
const API_RELATIVE_PATH: string = process.env.API_RELATIVE_PATH || '/api';
// precedence: explicit file -> explicit api -> window.location.origin
const FILE_DEFAULT_BASE_URL: string = process.env.FILE_DEFAULT_BASE_URL || API_DEFAULT_BASE_URL;

const pandino = new Pandino({
  ...loaderConfiguration,
});

await pandino.init();
await pandino.start();

await applicationCustomizer.customize(pandino.getBundleContext());

judoAxiosProvider.init({
  axios,
  basePathFactory: () => API_DEFAULT_BASE_URL + API_RELATIVE_PATH,
  filePathFactory: () => FILE_DEFAULT_BASE_URL + '/{{ modelName application.actor.fQName }}',
});

const root = createRoot(document.getElementById('root') as HTMLElement);

{{# if application.authentication }}
  const meta = await accessServiceImpl.getMetaData();
  const { clientId, defaultScopes, issuer } = meta.security[0];
  storeMeta({ issuer, clientId });

  const oidcConfig = {
    authority: issuer,
    client_id: clientId,
    redirect_uri: appBaseUri,
    automaticSilentRenew: true,
  };
{{/ if }}

root.render(
    <PandinoProvider ctx={pandino.getBundleContext()}>
        {{# if application.authentication }}
            <AuthProvider {...oidcConfig} >
                <Auth>
        {{/ if }}
                    <HashRouter>
                        <Routes>
                            <Route path="/" element={<App />}>
                                {routes.map((route) => (
                                    <Route key={route.path} path={route.path} element={route.element} />
                                ))}
                            </Route>
                        </Routes>
                    </HashRouter>,
        {{# if application.authentication }}
                </Auth>
            </AuthProvider>
        {{/ if }}
    </PandinoProvider>,
);
