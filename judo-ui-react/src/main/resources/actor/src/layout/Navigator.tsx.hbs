///////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    S O U R C E
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Template name: {{ template.templateName }}

import { useCallback } from 'react';
import {
  Divider,
  Drawer,
  DrawerProps,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  ListSubheader,
  Icon,
} from '@mui/material';
import { useTranslation } from 'react-i18next';
{{# if application.authentication }}
  import { useAuth } from 'react-oidc-context';
  import { usePrincipal } from '../auth';
{{/ if }}
import { Hero, Logo, useJudoNavigation, MdiIcon } from '../components';
import type { MenuItem, HeroProps, LogoProps } from '../components-api';

export interface NavigatorProps {
  items: Array<MenuItem>;
  heroProps: HeroProps;
  logoProps: LogoProps;
}

function ActionItem(props: MenuItem) {
  const { t } = useTranslation();
  const { clearNavigate } = useJudoNavigation();
  const { label, to, icon } = props;

  return (
    <ListItemButton onClick={ () => to && clearNavigate(to) }>
      {icon
        ? <ListItemIcon>
            <MdiIcon path={icon} />
          </ListItemIcon>
        : null
      }
        <ListItemText primary={t(`menuTree.${label}`, { defaultValue: label })} />
    </ListItemButton>
  );
}

export function Navigator(props: DrawerProps & NavigatorProps) {
  const { items, heroProps, logoProps, ...other } = props;
  const { t } = useTranslation();
  {{# if application.authentication }}
    const { removeUser, isAuthenticated } = useAuth();
    const doLogout = useCallback(() => {
      removeUser();
    }, [isAuthenticated]);
    const { principal } = usePrincipal();
  {{/ if }}

  return (
    <Drawer variant="permanent" {...other}>
      <Logo {...logoProps} />
      <Hero {...heroProps} />
      <Divider variant="middle" />
      <List component="nav">
        {items.map(item => item.items && item.items.length ? <List component="nav" key={item.label} subheader={
          <ListSubheader component="div" id="nested-list-subheader">
            {t(`menuTree.${item.label}`, { defaultValue: item.label })}
          </ListSubheader>
        }>
          {item.items.map(subItem => <ActionItem key={subItem.label} {...subItem} />)}
        </List> : <ActionItem key={item.label} {...item} />)}
      </List>
      {items.length ? <Divider variant="middle" /> : null}
      {{# if application.authentication }}
        <List>
          <ListItem disablePadding>
            <ListItemButton onClick={ () => doLogout() }>
              <ListItemIcon>
                <MdiIcon path="logout" />
              </ListItemIcon>
              <ListItemText primary={t('judo.security.logout', { defaultValue: 'Logout' })} />
            </ListItemButton>
          </ListItem>
        </List>
      {{/ if }}
    </Drawer>
  );
}
