{{> fragment.header.hbs }}

import { Outlet } from 'react-router-dom';
import { useTheme } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';
import Box from '@mui/material/Box';
import Container from '@mui/material/Container';
{{# if application.authentication }}
import Grid from '@mui/material/Grid';
import { useTranslation } from 'react-i18next';
import { usePrincipal } from "~/auth";
{{/ if }}
import { useConfig } from '~/hooks';
import { MenuOrientation, DRAWER_WIDTH } from '~/config';
import { density } from '~/theme';
import { Drawer } from './Drawer';
import { Header } from './Header';
import { Footer } from './Footer';

export const Layout = () => {
  const theme = useTheme();
  const matchDownXL = useMediaQuery(theme.breakpoints.down('xl'));
  const downLG = useMediaQuery(theme.breakpoints.down('lg'));
  {{# if application.authentication }}
  const { t } = useTranslation();
  const { principal } = usePrincipal();
  {{/ if }}

  const { container, miniDrawer, menuOrientation, onChangeMiniDrawer } = useConfig();

  const isHorizontal = menuOrientation === MenuOrientation.HORIZONTAL && !downLG;

  {{# if application.authentication }}
  const principalLoaded = () => principal && principal.__signedIdentifier;
  {{/ if }}

  return (
    {{# if application.authentication }}
    principalLoaded() ? (
    {{/ if }}
    <Box sx={ { display: 'flex', width: '100%' } }>
      <Header />
      {!isHorizontal ? <Drawer /> : null}

      <Box component="main" sx={ { width: `calc(100% - ${DRAWER_WIDTH}px)`, flexGrow: 1, p: { xs: 2, sm: 3 } } }>
        <Container
          maxWidth={container ? 'xl' : false}
          sx={ {
            ...(container && { px: { xs: 0, sm: 2 } }),
            position: 'relative',
            minHeight: 'calc(100vh - 110px)',
            display: 'flex',
            flexDirection: 'column',
            mt: density.mainMarginTop ?? 12,
          } }
        >
          <Outlet />
          <Footer />
        </Container>
      </Box>
    </Box>
    {{# if application.authentication }}
    ) : (
      <Grid container spacing={0} direction="column" alignItems="center" justifyContent="center" sx={ { minHeight: '100vh' } }>
        <Grid item xs={3}>
          {t('judo.security.loading-principal', { defaultValue: 'Loading principal data...' })}
        </Grid>
      </Grid>
    )
    {{/ if }}
  );
};
