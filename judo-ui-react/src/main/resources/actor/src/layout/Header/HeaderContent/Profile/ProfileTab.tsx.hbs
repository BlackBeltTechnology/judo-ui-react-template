import { useCallback, useState } from 'react';
import type { ChangeEvent, MouseEvent } from 'react';
import {
  Button,
  DialogActions,
  DialogContent,
  DialogTitle,
  FormControl,
  FormControlLabel,
  Grid,
  IconButton,
  List,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Radio,
  RadioGroup,
} from '@mui/material';
import { useTranslation } from 'react-i18next';
{{# if application.authentication }}
  import { useAuth } from 'react-oidc-context';
{{/ if }}
{{# if (otherApplicationsAvailable application applications) }}
    import { generateAlternativeApplications, changeApplication } from '~/utilities/application';
    import { useDialog } from '~/components/dialog';
{{/ if }}
import { MdiIcon } from '~/components';

interface Props {
  handleLogout: () => void;
}

const ProfileTab = ({ handleLogout }: Props) => {
  const { t } = useTranslation();
  {{# if (otherApplicationsAvailable application applications) }}
    const [createDialog, closeDialog] = useDialog();
    const alternativeApplications: Record<string, string> = generateAlternativeApplications(t);
    const [selectedApp, setSelectedApp] = useState<string>(Object.keys(alternativeApplications)[0]);
  {{/ if }}
  const [selectedIndex, setSelectedIndex] = useState(0);
  const handleListItemClick = (event: MouseEvent<HTMLDivElement>, index: number) => {
    setSelectedIndex(index);
  };
  {{# if application.authentication }}
    const { signoutRedirect, isAuthenticated } = useAuth();

    const doLogout = useCallback(() => {
      const redirectUrl = window.location.href.split('#')[0];
      signoutRedirect({
        post_logout_redirect_uri: redirectUrl,
      });
    }, [isAuthenticated]);
  {{/ if }}
  {{# if (otherApplicationsAvailable application applications) }}
    const openChangerDialog = useCallback(() => {
      createDialog({
        fullWidth: true,
        maxWidth: 'sm',
        onClose: (event: object, reason: string) => {
          if (reason !== 'backdropClick') {
            closeDialog();
          }
        },
        children: (
          <>
            <DialogTitle>
              {t('judo.applications.available_applications', { defaultValue: 'Available applications' })}
              <IconButton
                id="GodView-dialog-close"
                aria-label="close"
                onClick={() => {
                  closeDialog();
                } }
                sx={ {
                  position: 'absolute',
                  right: 8,
                  top: 8,
                  color: (theme) => theme.palette.grey[500],
                } }
              >
                <MdiIcon path="close" />
              </IconButton>
            </DialogTitle>
            <DialogContent dividers>
              <Grid container spacing={2} direction="row" alignItems="stretch" justifyContent="flex-start">
                <Grid item>
                  <FormControl>
                    <RadioGroup
                      name="radio-buttons-group"
                      value={selectedApp}
                      onChange={(event: ChangeEvent<HTMLInputElement>) => setSelectedApp((event.target as HTMLInputElement).value)}
                    >
                      {Object.keys(alternativeApplications).map((key) => (
                        <FormControlLabel key={key} value={key} control={<Radio />} label={alternativeApplications[key]} />
                      ))}
                    </RadioGroup>
                  </FormControl>
                </Grid>
              </Grid>
            </DialogContent>
            <DialogActions>
              <Grid className="page-action" item>
                <Button
                  id="application-changer-close"
                  variant="text"
                  onClick={ () => {
                    closeDialog();
                  } }
                >
                  {t('judo.pages.close', { defaultValue: 'Close' })}
                </Button>
              </Grid>
              <Grid className="page-action" item>
                <Button
                  id="application-changer-submit"
                  onClick={ () => {
                    changeApplication(selectedApp);
                    closeDialog();
                  } }
                  startIcon={<MdiIcon path="swap-horizontal" />}
                >
                  {t('judo.applications.change', { defaultValue: 'Change Application' })}
                </Button>
              </Grid>
            </DialogActions>
          </>
        ),
      });
    }, []);
  {{/ if }}

  return (
    <List component="nav" sx={ { p: 0, '& .MuiListItemIcon-root': { minWidth: 32 } } }>
      {/*<ListItemButton*/}
      {/*  selected={selectedIndex === 0}*/}
      {/*  onClick={(event: MouseEvent<HTMLDivElement>) => handleListItemClick(event, 0)}*/}
      {/*>*/}
      {/*  <ListItemIcon>*/}
      {/*    <MdiIcon path="pencil-outline" />*/}
      {/*  </ListItemIcon>*/}
      {/*  <ListItemText primary="Edit Profile" />*/}
      {/*</ListItemButton>*/}
      {/*<ListItemButton*/}
      {/*  selected={selectedIndex === 1}*/}
      {/*  onClick={(event: MouseEvent<HTMLDivElement>) => handleListItemClick(event, 1)}*/}
      {/*>*/}
      {/*  <ListItemIcon>*/}
      {/*    <MdiIcon path="account-outline" />*/}
      {/*  </ListItemIcon>*/}
      {/*  <ListItemText primary="View Profile" />*/}
      {/*</ListItemButton>*/}

      {/*<ListItemButton*/}
      {/*  selected={selectedIndex === 3}*/}
      {/*  onClick={(event: MouseEvent<HTMLDivElement>) => handleListItemClick(event, 3)}*/}
      {/*>*/}
      {/*  <ListItemIcon>*/}
      {/*    <MdiIcon path="account-outline" />*/}
      {/*  </ListItemIcon>*/}
      {/*  <ListItemText primary="Social Profile" />*/}
      {/*</ListItemButton>*/}
      {/*<ListItemButton*/}
      {/*  selected={selectedIndex === 4}*/}
      {/*  onClick={(event: MouseEvent<HTMLDivElement>) => handleListItemClick(event, 4)}*/}
      {/*>*/}
      {/*  <ListItemIcon>*/}
      {/*    <MdiIcon path="wallet-outline" />*/}
      {/*  </ListItemIcon>*/}
      {/*  <ListItemText primary="Billing" />*/}
      {/*</ListItemButton>*/}
      {{# if (otherApplicationsAvailable application applications) }}
      <ListItemButton selected={selectedIndex === 9} onClick={openChangerDialog}>
        <ListItemIcon>
          <MdiIcon path="swap-horizontal" />
        </ListItemIcon>
        <ListItemText primary={t('judo.applications.change', { defaultValue: 'Change Application' })} />
      </ListItemButton>
      {{/ if }}
      {{# if application.authentication }}
      <ListItemButton selected={selectedIndex === 2} onClick={doLogout}>
        <ListItemIcon>
          <MdiIcon path="logout" />
        </ListItemIcon>
        <ListItemText primary={t('judo.security.logout', { defaultValue: 'Logout' })} />
      </ListItemButton>
      {{/ if }}
    </List>
  );
};

export default ProfileTab;
