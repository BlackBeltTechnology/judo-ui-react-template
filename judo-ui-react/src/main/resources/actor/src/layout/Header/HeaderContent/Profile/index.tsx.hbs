{{> fragment.header.hbs }}

import { useRef, useState, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import { useTheme } from '@mui/material/styles';
import Avatar from '@mui/material/Avatar';
import Divider from '@mui/material/Divider';
import Box from '@mui/material/Box';
import ButtonBase from '@mui/material/ButtonBase';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import ClickAwayListener from '@mui/material/ClickAwayListener';
import Grid from '@mui/material/Grid';
import List from '@mui/material/List';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import Paper from '@mui/material/Paper';
import Popper from '@mui/material/Popper';
import Stack from '@mui/material/Stack';
import Typography from '@mui/material/Typography';
{{# if application.authentication }}
  import { useAuth } from 'react-oidc-context';
  {{# if application.profilePage }}
    import type { JudoIdentifiable } from '~/services/data-api/common/JudoIdentifiable';
    import { {{ getServiceImplForPage application.profilePage }} } from '~/services/data-axios';
    {{# if application.profilePage.openInDialog }}
      import { use{{ pageName application.profilePage }} } from '~/dialogs/{{ pagePath application.profilePage }}';
    {{ else }}
      import { {{ calculateNavigationRoute application.profilePage }} } from '~/routes';
    {{/ if }}
  {{/ if }}
{{/ if }}
import { ThemeMode } from '~/config';
import { MdiIcon{{# if (otherApplicationsAvailable application applications) }}, useApplicationSelector{{/ if }}{{# if application.profilePage }}, useJudoNavigation{{/ if }} } from '~/components';
import { useHeroProps } from '~/hooks';
import { Transitions } from '../../../Transitions';

export const Profile = () => {
  const { t } = useTranslation();
  const theme = useTheme();
  const heroProps = useHeroProps();
  {{# if application.authentication }}
    {{# if application.profilePage }}
      {{# if application.profilePage.openInDialog }}
        const getSingletonPayload = async (): Promise<JudoIdentifiable<any>> => {
          const { data: sp } = await {{ getServiceImplForPage application.profilePage }}.refreshFor{{ firstToUpper application.profilePage.dataElement.name }}({
            _mask: '{}',
          });
          return sp;
        }
        const open{{ pageName application.profilePage }} = use{{ pageName application.profilePage }}();
        const openProfilePage = async () => {
          const profileData = await getSingletonPayload();
          setOpen(false);
          await open{{ pageName application.profilePage }}(profileData);
        };
      {{ else }}
        const { navigate } = useJudoNavigation();
        const openProfilePage = async () => {
          setOpen(false);
          navigate(routeTo{{ pageName application.profilePage }}());
        };
      {{/ if }}
    {{/ if }}
    const { signoutRedirect, isAuthenticated } = useAuth();
    const doLogout = useCallback(() => {
      const redirectUrl = window.location.href.split('#')[0];
      signoutRedirect({
        post_logout_redirect_uri: redirectUrl,
      });
    }, [isAuthenticated]);
  {{/ if }}
  {{# if (otherApplicationsAvailable application applications) }}
  const openApplicationSelector = useApplicationSelector();
  {{/ if }}

  const anchorRef = useRef<any>(null);
  const [open, setOpen] = useState(false);
  const handleToggle = () => {
    setOpen((prevOpen) => !prevOpen);
  };

  const handleClose = (event: MouseEvent | TouchEvent) => {
    if (anchorRef.current?.contains(event.target)) {
      return;
    }
    setOpen(false);
  };

  const iconBackColorOpen = theme.palette.mode === ThemeMode.DARK ? 'grey.200' : 'grey.300';

  return (
    <Box sx={ { flexShrink: 0, ml: 0.75 } }>
      <ButtonBase
        sx={ {
          p: 0.25,
          bgcolor: open ? iconBackColorOpen : 'transparent',
          borderRadius: 1,
          '&:hover': { bgcolor: theme.palette.mode === ThemeMode.DARK ? 'secondary.light' : 'secondary.lighter' },
          '&:focus-visible': {
            outline: `2px solid ${theme.palette.secondary.dark}`,
            outlineOffset: 2,
          },
        } }
        aria-label="open profile"
        ref={anchorRef}
        aria-controls={open ? 'profile-grow' : undefined}
        aria-haspopup="true"
        onClick={handleToggle}
      >
        <Stack direction="row" spacing={2} alignItems="center" sx={ { p: 0.5 } }>
          <Avatar alt="profile user" src={heroProps.imgSrc} />
          <Typography variant="subtitle1">{heroProps.preferredUsername}</Typography>
        </Stack>
      </ButtonBase>
      <Popper
        placement="bottom-end"
        open={open}
        anchorEl={anchorRef.current}
        role={undefined}
        transition
        disablePortal
        popperOptions={ {
          modifiers: [
            {
              name: 'offset',
              options: {
                offset: [0, 9],
              },
            },
          ],
        } }
      >
        {({ TransitionProps }) => (
          <Transitions type="grow" position="top-right" in={open} {...TransitionProps}>
            <Paper
              sx={ {
                width: 290,
                minWidth: 240,
                maxWidth: 290,
                [theme.breakpoints.down('md')]: {
                  maxWidth: 250,
                },
              } }
            >
              <ClickAwayListener onClickAway={handleClose}>
                <Card>
                  <CardContent sx={ { px: 2.5, pt: 3 } }>
                    <Grid container justifyContent="space-between" alignItems="center">
                      <Grid item>
                        <Stack direction="row" spacing={1.25} alignItems="center">
                          <Avatar alt="profile user" src={heroProps.imgSrc} sx={ { width: 32, height: 32 } } />
                          <Stack>
                            <Typography variant="h6">{heroProps.preferredUsername}</Typography>
                            <Typography variant="body2" color="textSecondary">
                              {t('applications.{{ application.actor.simpleName }}', { defaultValue: '{{ application.actor.simpleName }}' })}
                            </Typography>
                          </Stack>
                        </Stack>
                      </Grid>
                    </Grid>
                  </CardContent>

                  <List component="nav" sx={ { p: 0, '& .MuiListItemIcon-root': { minWidth: 32 } } }>
                    {{# if (otherApplicationsAvailable application applications) }}
                      <ListItemButton onClick={openApplicationSelector}>
                        <ListItemIcon>
                          <MdiIcon path="swap-horizontal" />
                        </ListItemIcon>
                        <ListItemText primary={t('judo.applications.change', { defaultValue: 'Change Application' })} />
                      </ListItemButton>
                    {{/ if }}
                    {{# if application.authentication }}
                      {{# if application.profilePage }}
                      <ListItemButton onClick={openProfilePage}>
                        <ListItemIcon>
                          <MdiIcon path="cog-outline" />
                        </ListItemIcon>
                        <ListItemText primary={t('judo.profile.profile', { defaultValue: 'Profile' })} />
                      </ListItemButton>
                      <Divider />
                      {{/ if }}
                      <ListItemButton onClick={doLogout}>
                        <ListItemIcon>
                          <MdiIcon path="logout" />
                        </ListItemIcon>
                        <ListItemText primary={t('judo.security.logout', { defaultValue: 'Logout' })} />
                      </ListItemButton>
                    {{/ if }}
                  </List>
                </Card>
              </ClickAwayListener>
            </Paper>
          </Transitions>
        )}
      </Popper>
    </Box>
  );
};
