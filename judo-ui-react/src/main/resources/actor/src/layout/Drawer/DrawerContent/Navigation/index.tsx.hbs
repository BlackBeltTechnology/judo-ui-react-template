{{> fragment.header.hbs }}

import { useEffect, useState } from 'react';
import { useTheme } from '@mui/material/styles';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import useMediaQuery from '@mui/material/useMediaQuery';
{{# if application.authentication }}
  import { usePrincipal } from '~/auth';
  import { {{ classDataName application.principal 'Stored' }} } from '~/services/data-api';
{{/ if }}
import { useConfig } from '~/hooks';
import { MenuOrientation } from '~/config';
import { NavGroup } from './NavGroup';
import { NavItem } from './NavItem';
import { menus } from './menu-items';
import { NavItemType } from './NavItem';
import { ScrollableMenu } from './ScrollableMenu';

export const Navigation = () => {
  const theme = useTheme();
  const downLG = useMediaQuery(theme.breakpoints.down('lg'));
  const { menuOrientation, miniDrawer } = useConfig();
  const [menuItems, setMenuItems] = useState<NavItemType[]>(menus);

  {{# if application.authentication }}
    const { principal } = usePrincipal();

    const isHidden = (menuItem: NavItemType): boolean => {
      return menuItem.hiddenBy ? !!principal[menuItem.hiddenBy as keyof {{ classDataName application.principal 'Stored' }}] : false;
    };
  {{ else }}
    const isHidden = (menuItem: NavItemType): boolean => false;
  {{/ if }}

  const handlerMenuItems = (source: NavItemType[], target: NavItemType[]) => {
    for (const item of source) {
      if (!isHidden(item)) {
        const clone: NavItemType = {
          ...item,
          children: Array.isArray(item.children) && item.children.length ? [] : undefined,
        };
        target.push(clone);

        if (Array.isArray(item.children) && item.children.length) {
          handlerMenuItems(item.children, clone.children!);
        }
      }
    }
  };

  useEffect(() => {
    const filteredMenus: NavItemType[] = [];
    handlerMenuItems(menus, filteredMenus);
    setMenuItems(filteredMenus);
  }, [{{# if application.authentication }}principal{{/ if }}]);

  const isHorizontal = menuOrientation === MenuOrientation.HORIZONTAL && !downLG;
  let lastItemIndex = menuItems.length - 1;

  const navGroups = menuItems.slice(0, lastItemIndex + 1).map((item) => {
    switch (item.type) {
      case 'group':
        return (
          <NavGroup key={item.id} item={item} />
        );
      case 'item':
        return <NavItem key={item.id} item={item} level={1} />;
      default:
        return (
          <Typography key={item.id} variant="h6" color="error" align="center">
            Invalid item type: {item.type}!
          </Typography>
        );
    }
  });
  return (
    <Box
      sx={ {
        pt: !miniDrawer ? (isHorizontal ? 0 : 2) : 0,
        '& > ul:first-of-type': { mt: 0 },
        display: isHorizontal ? { xs: 'block', lg: 'flex' } : 'block',
        width: isHorizontal ? { xs: undefined, lg: '100%' } : undefined,
        justifyContent: isHorizontal ? 'center' : undefined,
      } }
    >
      {isHorizontal ? <ScrollableMenu>{navGroups}</ScrollableMenu> : navGroups}
    </Box>
  );
};
