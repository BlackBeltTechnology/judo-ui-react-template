{{# if this.hiddenBy }} { (actions?.is{{ safeName child }}Hidden ? !actions?.is{{ safeName child }}Hidden(data, editMode) : !data.{{ this.hiddenBy.name }}) && {{/ if }}
<Grid item data-name="{{ this.name }}" xs={12} sm={12} {{# neq (calculateSize this) 12.0 }}md={ {{ calculateSize this }} }{{/ neq }}>
    {{# if this.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            isLoading={isLoading}
            actions={actions}
        >
    {{/ if }}
    {{# if this.card }}
        <Card id="{{ getXMIID this }}" data-name="{{ this.name }}" {{# if (isParentStretchVertical this) }}sx={ { height: '100%' } }{{/ if }}>
            <CardContent>
                {{# if (cardHasHeaderContent this) }}
                <Grid container direction="row" alignItems="center" justifyContent="space-between" spacing={2} sx={ { mb: 2 } }>
                    {{# if (flexHasIconOrLabel this) }}
                    <Grid item>
                        <Grid container direction="row" alignItems="center" justifyContent="flex-start">
                        {{# if this.icon }}
                            <MdiIcon path="{{ this.icon.iconName }}" sx={ { marginRight: 1 } } />
                        {{/ if }}
                        {{# if this.label }}
                            <Typography variant="h5" component="h1">
                                { t('{{ getTranslationKeyForVisualElement this }}', { defaultValue: '{{ this.label }}' }) }
                            </Typography>
                        {{/ if }}
                        </Grid>
                    </Grid>
                    {{/ if }}
                    {{# if this.actionButtonGroup }}
                    <Grid item>
                        <ButtonGroup size="small">
                            {{# each this.actionButtonGroup.buttons as |button| }}
                                { actions.{{ simpleActionDefinitionName button.actionDefinition }}{{# if button.hiddenBy }} && !data.{{ button.hiddenBy.name }}{{/ if }} &&
                                    <IconButton
                                        id="{{ getXMIID button }}"
                                        {{# if (containerButtonHasDisabledConditions button container) }}
                                        disabled={ {{{ containerButtonGroupButtonDisabledConditions button container }}} }
                                        {{/ if }}
                                        title={ t('{{ getTranslationKeyForVisualElement button }}', { defaultValue: '{{ button.label }}' }) as string }
                                        color="primary"
                                        onClick={ async () => {
                                            {{> actor/src/fragments/container/action-call-confirm-check.fragment.hbs button=button }}
                                            await actions.{{ simpleActionDefinitionName button.actionDefinition }}!();
                                        } }
                                    >
                                        <MdiIcon path="{{ button.icon.iconName }}" />
                                    </IconButton>
                                }
                            {{/ each }}
                        </ButtonGroup>
                    </Grid>
                    {{/ if }}
                </Grid>
                {{/ if }}
                <Grid container direction="{{# if this.isDirectionHorizontal }}row{{ else }}column{{/ if }}" alignItems="{{ alignItems this }}" justifyContent="{{ justifyContent this }}" spacing={2}>
                    {{# each this.children as |child| }}
                        {{# if child }}
                            {{# if isDebugPrint }}{/* include: getWidgetTemplate() */}{{/ if }}
                            {{> (getWidgetTemplate child) }}
                        {{/ if }}
                    {{/ each }}
                </Grid>
            </CardContent>
        </Card>
    {{ else }}
        <Grid container direction="row" spacing={2}>
            {{# and (flexHasIconOrLabel this) (flexParentIsNotTab this) }}
                <Grid item xs={12} sm={12}>
                    <Grid container direction="row" alignItems="center" justifyContent="flex-start">
                    {{# if this.icon }}
                        <MdiIcon path="{{ this.icon.iconName }}" sx={ { marginRight: 1 } } />
                    {{/ if }}
                    {{# if this.label }}
                        <Typography variant="h5" component="h1">
                            { t('{{ getTranslationKeyForVisualElement this }}', { defaultValue: '{{ this.label }}' }) }
                        </Typography>
                    {{/ if }}
                    </Grid>
                </Grid>
            {{/ and }}
            <Grid item xs={12} sm={12}>
                <Grid id="{{ getXMIID this }}" data-name="{{ this.name }}" container direction="{{# if child.isDirectionHorizontal }}row{{ else }}column{{/ if }}" alignItems="{{ alignItems this }}" justifyContent="{{ justifyContent this }}" spacing={2}>
                    {{# each this.children as |child| }}
                        {{# if child }}
                            {{# if isDebugPrint }}{/* include: getWidgetTemplate() */}{{/ if }}
                            {{> (getWidgetTemplate child) }}
                        {{/ if }}
                    {{/ each }}
                </Grid>
            </Grid>
        </Grid>
    {{/ if }}
    {{# if this.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if this.hiddenBy }} } {{/ if }}
