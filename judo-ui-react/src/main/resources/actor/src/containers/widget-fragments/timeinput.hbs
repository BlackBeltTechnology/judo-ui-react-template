{{# if child.hiddenBy }} { (actions?.is{{ safeName child }}Hidden ? !actions?.is{{ safeName child }}Hidden(data, editMode) : !data.{{ child.hiddenBy.name }}) && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            isLoading={isLoading}
            actions={actions}
        >
    {{/ if }}
    <TimePicker
        {{# if (shouldElementHaveAutoFocus child) }}
            autoFocus
        {{/ if }}
        ampm={false}
        ampmInClock={false}
        slotProps={ {
            textField: {
                id: '{{ getXMIID child }}',
                required: actions?.is{{ firstToUpper child.attributeType.name }}Required ? actions.is{{ firstToUpper child.attributeType.name }}Required(data, editMode) : ({{# if child.requiredBy }}data.{{ child.requiredBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isRequired  }}),
                helperText: validation.get('{{ child.attributeType.name }}'),
                error: !!validation.get('{{ child.attributeType.name }}'),
                {{# if child.icon }}
                    InputProps: {
                        startAdornment: (
                            <InputAdornment position="start">
                                <MdiIcon path="{{ child.icon.iconName }}" />
                            </InputAdornment>
                        ),
                    },
                {{/ if }}
            },
        } }
        onError={ (newError: TimeValidationError, value: any) => {
            // https://mui.com/x/react-date-pickers/validation/#show-the-error
            setValidation((prevValidation) => {
                const copy = new Map<keyof {{ classDataName container.dataElement '' }}, string>(prevValidation);
                copy.set('{{ child.attributeType.name }}', newError === 'invalidDate' ? t('judo.error.validation-failed.PATTERN_VALIDATION_FAILED', {
                    defaultValue: 'Value does not match the pattern requirements.',
                }) as string : '');
                return copy;
            });
        } }
        className={ clsx({
            'JUDO-viewMode': !editMode,
            'JUDO-required': {{ boolValue child.attributeType.isRequired }},
        }) }
        views={['hours', 'minutes', 'seconds']}
        label={ t('{{ getTranslationKeyForVisualElement child }}', { defaultValue: '{{ child.label }}' }) as string }
        value={ serviceTimeToUiTime(data.{{ child.attributeType.name }} ?? null) }
        readOnly={ {{ boolValue child.attributeType.isReadOnly }} || !isFormUpdateable() }
        disabled={actions?.is{{ firstToUpper child.attributeType.name }}Disabled ? actions.is{{ firstToUpper child.attributeType.name }}Disabled(data, editMode, isLoading) : ({{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} isLoading)}
        {{# if child.onBlur }}
        onBlur={ () => {
            if (actions?.on{{ firstToUpper child.attributeType.name }}BlurAction) {
                actions.on{{ firstToUpper child.attributeType.name }}BlurAction(data, storeDiff, editMode, submit);
            }
        } }
        {{/ if }}
        onChange={ (newValue: string | null | undefined) => {
            storeDiff('{{ child.attributeType.name }}', newValue);
        } }
        />
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
