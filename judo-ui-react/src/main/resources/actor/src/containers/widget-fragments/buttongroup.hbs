{{# if child.hiddenBy }} { (actions?.is{{ safeName child }}Hidden ? !actions?.is{{ safeName child }}Hidden(data, editMode) : !data.{{ child.hiddenBy.name }}) && {{/ if }}
<Grid item xs={12} {{# neq (calculateSize child) 12.0 }}sm={ {{ calculateSize child }} }{{/ neq }}>
  <Box sx={ { display: 'flex', gap: 1 } }>
    {{# if child.customImplementation }}
      <ComponentProxy
        filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
        data={data}
        validation={validation}
        editMode={editMode}
        storeDiff={storeDiff}
        isLoading={isLoading}
        actions={actions}
      >
    {{/ if }}
    {{# each (featuredButtonsForButtonGroup child) as |button| }}
      {{# if button.hiddenBy }}{ !data.{{ button.hiddenBy.name }} && {{/ if }}
        <LoadingButton
          id="{{ getXMIID button }}"
          loading={isLoading}
          {{# if button.icon }}
            startIcon={<MdiIcon path="{{ button.icon.iconName }}" />}
            loadingPosition="start"
          {{/ if }}
          onClick={ actions.{{ simpleActionDefinitionName button.actionDefinition }} ? async () => {
            {{# if button.confirmation }}
              const result = await openConfirmDialog(
                '{{ getXMIID button }}',
                t('{{ getTranslationKeyForVisualElement button }}.confirmation', { defaultValue: '{{ button.confirmation.confirmationMessage }}' }) as string,
                t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }) as string,
              );

              if (!result) {
                return;
              }
            {{/ if }}
            await actions.{{ simpleActionDefinitionName button.actionDefinition }}!();
          } : undefined }
          {{# if (containerButtonHasDisabledConditions button container) }}
          disabled={ {{{ containerButtonGroupButtonDisabledConditions button container }}} }
          {{/ if }}
        >
          { t('{{ getTranslationKeyForVisualElement button }}', { defaultValue: '{{ button.label }}' }) }
        </LoadingButton>
      {{# if button.hiddenBy }} }{{/ if }}
    {{/ each }}
    {{# if (displayDropdownForButtonGroup child) }}
      <DropdownButton
        id="{{ getXMIID child }}-button-group"
        disabled={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} isLoading || editMode }
        {{# if child.icon }}
          startIcon={ <MdiIcon path="{{ child.icon.iconName }}" /> }
        {{/ if }}
        menuItems={[
          {{# each (nonFeaturedButtonsForButtonGroup child) as |button| }}
            {
              id: '{{ getXMIID button }}',
              label: t('{{ getTranslationKeyForVisualElement button }}', { defaultValue: '{{ button.label }}' }) as string,
              onClick: actions.{{ simpleActionDefinitionName button.actionDefinition }} ? async () => {
                {{# if button.confirmation }}
                  const result = await openConfirmDialog(
                    '{{ getXMIID button }}',
                    t('{{ getTranslationKeyForVisualElement button }}.confirmation', { defaultValue: '{{ button.confirmation.confirmationMessage }}' }) as string,
                    t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }) as string,
                  );

                  if (!result) {
                    return;
                  }
                {{/ if }}
                await actions.{{ simpleActionDefinitionName button.actionDefinition }}!();
              } : undefined,
              {{# if button.icon }}
                startIcon: <MdiIcon path="{{ button.icon.iconName }}" />,
              {{ else }}
                startIcon: <MdiIcon path="arrow_right" />,
              {{/ if }}
              {{# if (containerButtonHasDisabledConditions button container) }}
                  disabled: {{{ containerButtonGroupButtonDisabledConditions button container }}},
              {{/ if }}
              {{# if button.hiddenBy }}visible: !data.{{ button.hiddenBy.name }},{{/ if }}
            },
          {{/ each }}
        ]}
      >
        { t('{{ getTranslationKeyForVisualElement child }}', { defaultValue: '{{ child.label }}' }) }
      </DropdownButton>
    {{/ if }}
    {{# if child.customImplementation }}
    </ComponentProxy>
    {{/ if }}
  </Box>
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
