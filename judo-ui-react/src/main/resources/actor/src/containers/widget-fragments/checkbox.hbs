{{# if child.hiddenBy }} { !data.{{ child.hiddenBy.name }} && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
        >
    {{/ if }}
        <FormControl error={!!validation.get('{{ child.attributeType.name }}')}>
            <FormGroup>
                <FormControlLabel
                    className="checkbox"
                    sx={ { marginTop: '6px', color: (theme) => validation.has('{{ child.attributeType.name }}') ? theme.palette.error.main : 'primary' } }
                    disabled={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isReadOnly }} || !isFormUpdateable() || isLoading }
                    control={
                        <Checkbox checked={ data.{{ child.attributeType.name }} || false } sx={ { color: (theme) => validation.has('{{ child.attributeType.name }}') ? theme.palette.error.main : 'primary' } } onChange={ (event) => {
                            storeDiff('{{ child.attributeType.name }}', event.target.checked);
                            {{# if child.onBlur }}
                            if (actions?.on{{ firstToUpper child.attributeType.name }}BlurAction) {
                                const eagerCopy = { ...data, ['{{ child.attributeType.name }}']: event.target.checked };
                                actions.on{{ firstToUpper child.attributeType.name }}BlurAction(eagerCopy, storeDiff, editMode, submit);
                            }
                            {{/ if }}
                        } } />
                    }
                    label={ t('{{ getTranslationKeyForVisualElement child }}', { defaultValue: '{{ child.label }}' }) as string }
                    {{# with (checkboxLabelPlacement) as |placement| }}
                    labelPlacement="{{ placement }}"
                    {{/ with }}
                />
            </FormGroup>
            {validation.has('{{ child.attributeType.name }}') && <FormHelperText>{validation.get('{{ child.attributeType.name }}')}</FormHelperText>}
        </FormControl>
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
