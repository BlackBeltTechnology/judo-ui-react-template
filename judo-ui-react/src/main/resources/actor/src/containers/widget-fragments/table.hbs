{{# if child.hiddenBy }} { (actions?.is{{ safeName child }}Hidden ? !actions?.is{{ safeName child }}Hidden(data, editMode) : !data.{{ child.hiddenBy.name }}) && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            ownerData={data}
            isOwnerLoading={isLoading}
            actions={actions}
            {{# unless container.table }}
              editMode={editMode}
              isFormUpdateable={isFormUpdateable}
              storeDiff={storeDiff}
            {{/ unless }}
        >
    {{/ if }}
    <Grid container direction="row" spacing={2}>
        {{# if (displayTableHeading child container) }}
            <Grid item xs={12} sm={12}>
                <Grid container direction="row" alignItems="center" justifyContent="flex-start">
                {{# if (elementHasIcon child) }}
                    <MdiIcon path="{{ child.icon.iconName }}" sx={ { marginRight: 1 } } />
                {{/ if }}
                {{# if (elementHasLabel child) }}
                    <Typography variant="h5" component="h1">
                        { t('{{ getTranslationKeyForVisualElement child }}', { defaultValue: '{{ child.label }}' }) }
                    </Typography>
                {{/ if }}
                </Grid>
            </Grid>
        {{/ if }}
        <Grid item xs={12} sm={12}>
            <Grid id="{{ getXMIID child }}" container direction="column" alignItems="stretch" justifyContent="flex-start">
                {{# unless (isTableTag child) }}
                <{{ componentName child }}
                    uniqueId={'{{ getXMIID child }}'}
                    actions={actions}
                    dataPath={dataPath ? (dataPath + '.{{ child.dataElement.name }}') : '{{ child.dataElement.name }}'}
                    {{# if container.isSelector }}
                      selectionDiff={selectionDiff}
                      setSelectionDiff={setSelectionDiff}
                    {{/ if }}
                    {{# if container.isRelationSelector }}
                      alreadySelected={alreadySelected}
                    {{/ if }}
                    {{# unless container.table }}
                        ownerData={data}
                        editMode={editMode}
                        isFormUpdateable={isFormUpdateable}
                        {{# unless child.isSelectorTable }}
                            validationError={validation.get('{{ child.dataElement.name }}')}
                        {{/ unless }}
                    {{/ unless }}
                    refreshCounter={refreshCounter}
                    isOwnerLoading={isLoading}
                />
                {{ else }}
                <{{ componentName child }}
                    uniqueId={'{{ getXMIID child }}'}
                    actions={actions}
                    dataPath={dataPath ? (dataPath + '.{{ child.dataElement.name }}') : '{{ child.dataElement.name }}'}
                    isOwnerLoading={isLoading}
                    isDraft={isDraft}
                    validationError={validation.get('{{ child.dataElement.name }}')}
                    ownerData={data}
                    editMode={editMode}
                    isFormUpdateable={isFormUpdateable}
                    storeDiff={storeDiff}
                />
                {{/ unless }}
            </Grid>
        </Grid>
    </Grid>
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
