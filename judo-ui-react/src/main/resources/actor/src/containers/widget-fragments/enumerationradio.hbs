{{# if child.hiddenBy }} { (actions?.is{{ safeName child }}Hidden ? actions?.is{{ safeName child }}Hidden(data, editMode) : !data.{{ child.hiddenBy.name }}) && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            isLoading={isLoading}
            actions={actions}
        >
    {{/ if }}
    <FormControl
        fullWidth={ true }
        sx={ { mt: '10px' } }
        className='MuiTextField-root'
        disabled={ {{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isReadOnly }} || !isFormUpdateable() || isLoading }
        error={validation.has('{{ child.attributeType.name }}')}
    >
        <InputLabel id="{{ getXMIID child }}" shrink={true} size={'small'}>
            { t('{{ getTranslationKeyForVisualElement child }}', { defaultValue: '{{ child.label }}' }) }{{# if child.attributeType.isRequired }} *{{/ if }}
        </InputLabel>
        <RadioGroup
            sx={ { justifyContent: 'space-between', pl: '12px', pt: '6px' } }
            {{# unless child.verticalGrow }}
                row
            {{/ unless }}
            name="{{ child.attributeType.name }}"
            id="{{ getXMIID child }}"
            value={ data.{{ child.attributeType.name }} || '' }
            onChange={ (event) => {
                storeDiff('{{ child.attributeType.name }}', event.target.value);
                {{# if child.onBlur }}
                if (actions?.on{{ firstToUpper child.attributeType.name }}BlurAction) {
                    const eagerCopy = { ...data, ['{{ child.attributeType.name }}']: event.target.value };
                    actions.on{{ firstToUpper child.attributeType.name }}BlurAction(eagerCopy, storeDiff, editMode, submit);
                }
                {{/ if }}
            } }
        >
        {{# each child.attributeType.dataType.members as |member| }}
            <FormControlLabel
                id="{{ getXMIID member }}"
                value={ '{{ member.name }}' }
                control={<Radio size='small' />}
                label= { t('enumerations.{{ restParamName child.attributeType.dataType }}.{{ member.name }}', { defaultValue: '{{ member.name }}' }) }
                disabled={actions?.is{{ firstToUpper child.attributeType.name }}Disabled ? actions.is{{ firstToUpper child.attributeType.name }}Disabled(data, editMode, isLoading) : ({{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isReadOnly }} || !isFormUpdateable())}
            />
        {{/ each }}
        </RadioGroup>
        { (validation.has('{{ child.attributeType.name }}'){{# if child.attributeType.isRequired }} && !data.{{ child.attributeType.name }}{{/ if }}) && <FormHelperText>{validation.get('{{ child.attributeType.name }}')}</FormHelperText> }
    </FormControl>
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
