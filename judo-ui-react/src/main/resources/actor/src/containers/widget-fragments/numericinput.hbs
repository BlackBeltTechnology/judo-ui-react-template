{{# if child.hiddenBy }} { (actions?.is{{ safeName child }}Hidden ? actions?.is{{ safeName child }}Hidden(data, editMode) : !data.{{ child.hiddenBy.name }}) && {{/ if }}
<Grid item xs={12} sm={12} {{# neq (calculateSize child) 12.0 }}md={ {{ calculateSize child }} }{{/ neq }}>
    {{# if child.customImplementation }}
        <ComponentProxy
            filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey child ~}} }))`}
            data={data}
            validation={validation}
            editMode={editMode}
            storeDiff={storeDiff}
            isLoading={isLoading}
        >
    {{/ if }}
    <NumericInput
        required={actions?.is{{ firstToUpper child.attributeType.name }}Required ? actions.is{{ firstToUpper child.attributeType.name }}Required(data, editMode) : ({{# if child.requiredBy }}data.{{ child.requiredBy.name }} ||{{/ if }} {{ boolValue child.attributeType.isRequired  }})}
        name="{{ child.attributeType.name }}"
        id="{{ getXMIID child }}"
        {{# if (shouldElementHaveAutoFocus child) }}
            autoFocus
        {{/ if }}
        label={ t('{{ getTranslationKeyForVisualElement child }}', { defaultValue: '{{ child.label }}' }) as string }
        customInput={TextField}
        value={ data.{{ child.attributeType.name }} ?? '' }
        {{# if child.attributeType.dataType.scale }}
            decimalScale={ {{ child.attributeType.dataType.scale }} }
        {{/if}}
        className={ clsx({
            'JUDO-viewMode': !editMode,
            'JUDO-required': {{ boolValue child.attributeType.isRequired }},
        }) }
        disabled={actions?.is{{ firstToUpper child.attributeType.name }}Disabled ? actions.is{{ firstToUpper child.attributeType.name }}Disabled(data, editMode, isLoading) : ({{# if child.enabledBy }}!data.{{ child.enabledBy.name }} ||{{/ if }} isLoading)}
        error={ !!validation.get('{{ child.attributeType.name }}') }
        helperText={ validation.get('{{ child.attributeType.name }}') }
        {{# if child.onBlur }}
        onBlur={ () => {
            if (actions?.on{{ firstToUpper child.attributeType.name }}BlurAction) {
                actions.on{{ firstToUpper child.attributeType.name }}BlurAction(data, storeDiff, editMode, submit);
            }
        } }
        {{/ if }}
        onValueChange={(values, sourceInfo) => {
            const newValue = values.floatValue === undefined ? null : values.floatValue;
            if (data.{{ child.attributeType.name }} !== newValue) {
                storeDiff('{{ child.attributeType.name }}', newValue);
            }
        } }
        InputLabelProps={ { shrink: true } }
        InputProps={ {
            readOnly: {{ boolValue child.attributeType.isReadOnly }} || !isFormUpdateable(),
            {{# if child.icon }}
                startAdornment: (
                    <InputAdornment position="start">
                        <MdiIcon path="{{ child.icon.iconName }}" />
                    </InputAdornment>
                ),
            {{/ if }}
        } }
    />
    {{# if child.customImplementation }}
        </ComponentProxy>
    {{/ if }}
</Grid>
{{# if child.hiddenBy }} } {{/ if }}
