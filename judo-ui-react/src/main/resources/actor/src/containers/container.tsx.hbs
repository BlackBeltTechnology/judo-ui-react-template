{{> fragment.header.hbs }}

{{# if isDebugPrint }}// include: actor/src/fragments/container/common-imports.fragment.hbs{{/ if }}
{{> actor/src/fragments/container/common-imports.fragment.hbs }}
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useTrackService } from '@pandino/react-hooks';
{{# unless container.table }}
  {{# if isDebugPrint }}// include: actor/src/fragments/container/view-imports.fragment.hbs{{/ if }}
  {{> actor/src/fragments/container/view-imports.fragment.hbs }}
{{/ unless }}
{{# unless (containerIsEmptyDashboard container) }}
  {{# each (getContainerApiImports container) as |imp| }}
    import type { {{ classDataName imp '' }}, {{ classDataName imp 'Stored' }} } from '~/services/data-api/model/{{ classDataName imp '' }}';
  {{/ each }}
  {{# each (getEnumsForContainer container) as |imp| }}
      import type { {{ restParamName imp.attributeType.dataType }} } from '~/services/data-api/model/{{ restParamName imp.attributeType.dataType }}';
    {{/ each }}
{{/ unless }}
{{# each container.tables as |table| }}
  import type { {{ componentName table }}ActionDefinitions } from './components/{{ componentName table }}';
  import { {{ componentName table }} } from './components/{{ componentName table }}';
{{/ each }}
{{# each container.links as |link| }}
  import type { {{ componentName link }}ActionDefinitions } from './components/{{ componentName link }}';
  import { {{ componentName link }} } from './components/{{ componentName link }}';
{{/ each }}

{{# unless (containerIsEmptyDashboard container) }}
{{# each (getVisualElementsWithCustomImplementation container) as |ve| }}
    export const {{ getCustomizationComponentInterfaceKey ve }} = '{{ getCustomizationComponentInterface ve }}';
    export interface {{ getCustomizationComponentInterface ve }} extends FC<CustomFormVisualElementProps<{{ classDataName container.dataElement '' }}>> {}
{{/ each }}

export const {{ camelCaseNameToInterfaceKey (containerComponentName container) }}_CONTAINER_ACTIONS_HOOK_INTERFACE_KEY = '{{ camelCaseNameToInterfaceKey (containerComponentName container) }}_CONTAINER_ACTIONS_HOOK';
export type {{ containerComponentName container }}ContainerHook = (
  {{# unless container.table }}
  data: {{ classDataName container.dataElement 'Stored' }},
  editMode: boolean,
  storeDiff: (attributeName: keyof {{ classDataName container.dataElement '' }}, value: any) => void,
  {{/ unless }}
) => {{ pageContainerActionDefinitionTypeName container }};

export interface {{ pageContainerActionDefinitionTypeName container }}{{# if (containerHasRelationComponents container) }} extends {{# each (getContainerActionsExtends container) as |ext| }}{{ ext }}{{# unless @last}},{{/ unless}}{{/ each }}{{/ if }} {
  getPageTitle?: ({{# unless container.table }}data: {{ classDataName container.dataElement '' }}{{/ unless }}) => string;
  {{# each (getContainerOwnActionDefinitions container) as |actionDefinition| }}
    {{ simpleActionDefinitionName actionDefinition }}?: ({{{ getContainerOwnActionParameters actionDefinition container }}}) => Promise<{{{ getContainerOwnActionReturnType actionDefinition container }}}>;
  {{/ each }}
  {{# each (getOnBlurAttributesForContainer container) as |attributeType| }}
    on{{ firstToUpper attributeType.name }}BlurAction?: ({{{ onBlurActionParams container }}}) => void;
  {{/ each }}
  {{# each (getInputsForContainer container) as |input| }}
    is{{ firstToUpper input.attributeType.name }}Required?: ({{{ inputModifierParams container false }}}) => boolean;
    is{{ firstToUpper input.attributeType.name }}Disabled?: ({{{ inputModifierParams container true }}}) => boolean;
  {{/ each}}
  {{# each (getElementsWithHiddenBy container) as |ve| }}
    is{{ safeName ve }}Hidden?: ({{{ inputModifierParams container false }}}) => boolean;
  {{/ each }}
  {{# each (getDateOrDateTimeInputs container) as |ve| }}
    get{{ firstToUpper ve.attributeType.name }}ValidationProps?: (data: {{ classDataName container.dataElement '' }}) => BaseDateValidationProps;
  {{/ each }}
  {{# each (getEnumsForContainer container) as |ve| }}
    filter{{ firstToUpper ve.attributeType.name }}Options?: (data: {{ classDataName container.dataElement '' }}, options: EnumOption<keyof typeof {{ restParamName ve.attributeType.dataType }}>[]) => EnumOption<keyof typeof {{ restParamName ve.attributeType.dataType }}>[];
  {{/ each }}
  {{# if container.view }}
    getMask?: () => string;
  {{/ if }}
}
{{/ unless }}

export interface {{ containerComponentName container }}Props {
  {{# unless (containerIsEmptyDashboard container) }}
    refreshCounter: number;
    isLoading: boolean;
    actions: {{ pageContainerActionDefinitionTypeName container }};
    {{# if container.isSelector }}
      selectionDiff: {{ classDataName container.dataElement 'Stored' }}[];
      setSelectionDiff: Dispatch<SetStateAction<{{ classDataName container.dataElement 'Stored' }}[]>>;
    {{/ if }}
    {{# if container.isRelationSelector }}alreadySelected: {{ classDataName container.dataElement 'Stored' }}[];{{/ if }}
    {{# unless container.table }}
      data: {{ classDataName container.dataElement 'Stored' }};
      isFormUpdateable: () => boolean;
      isFormDeleteable: () => boolean;
      storeDiff: (attributeName: keyof {{ classDataName container.dataElement '' }}, value: any) => void;
      editMode: boolean;
      validation: Map<keyof {{ classDataName container.dataElement '' }}, string>;
      setValidation: Dispatch<SetStateAction<Map<keyof {{ classDataName container.dataElement '' }}, string>>>;
      submit: () => Promise<void>;
    {{/ unless }}
    isDraft?: boolean;
  {{/ unless }}
};

// XMIID: {{ getXMIID container }}
// Name: {{ container.name }}
export default function {{ containerComponentName container }}(props: {{ containerComponentName container }}Props) {
  {{# unless (containerIsEmptyDashboard container) }}
    // Container props
    const { refreshCounter, isLoading, isDraft, actions: pageActions{{# if container.isSelector }}, selectionDiff, setSelectionDiff{{/ if }}{{# if container.isRelationSelector }}, alreadySelected{{/ if }}{{# unless container.table }}, data, isFormUpdateable, isFormDeleteable, storeDiff, editMode, validation, setValidation, submit{{/ unless }} } = props;

    // Container hooks
    const { t } = useTranslation();
    const { navigate, back } = useJudoNavigation();
    const { locale: l10nLocale } = useL10N();
    const { openConfirmDialog } = useConfirmDialog();

    {{# unless container.table }}
      useConfirmationBeforeChange(editMode, t('judo.form.navigation.confirmation', { defaultValue: 'You have potential unsaved changes in your form, are you sure you would like to navigate away?' }));
    {{/ unless }}
    // Pandino Container Action overrides
    const { service: customContainerHook } = useTrackService<{{ containerComponentName container }}ContainerHook>(`(${OBJECTCLASS}=${ {{~ camelCaseNameToInterfaceKey (containerComponentName container) }}_CONTAINER_ACTIONS_HOOK_INTERFACE_KEY})`);
    const containerActions: {{ pageContainerActionDefinitionTypeName container }} = customContainerHook?.({{# unless container.table }}data, editMode, storeDiff{{/ unless }}) || {};
    const actions = useMemo(() => ({ ...pageActions, ...containerActions }), [pageActions, containerActions]);
    {{# each (getEnumsForContainer container) as |ve| }}
      const {{ ve.attributeType.name }}Options = useMemo<EnumOption<keyof typeof {{ restParamName ve.attributeType.dataType }}>[]>(() => ([
        {{# each ve.attributeType.dataType.members as |member| }}
          {
            id: '{{ getXMIID member }}',
            value: '{{ member.name }}',
            i18nKey: 'enumerations.{{ restParamName ve.attributeType.dataType }}.{{ member.name }}',
            i18nDefaultValue: '{{ member.name }}',
          },
        {{/ each }}
      ]), []);
      const effective{{ firstToUpper ve.attributeType.name }}Options = useMemo<EnumOption<keyof typeof {{ restParamName ve.attributeType.dataType }}>[]>(() => {
        if (actions.filter{{ firstToUpper ve.attributeType.name }}Options) {
          return actions.filter{{ firstToUpper ve.attributeType.name }}Options(data, {{ ve.attributeType.name }}Options);
        }
        return {{ ve.attributeType.name }}Options;
      }, [actions.filter{{ firstToUpper ve.attributeType.name }}Options]);
    {{/ each }}
    {{# if container.form }}
    const autoFocusInputRef = useRef<any>(null);

    useEffect(() => {
      const timeout = setTimeout(() => {
        if (typeof autoFocusInputRef?.current?.focus === 'function') {
          autoFocusInputRef.current.focus();
        }
      }, autoFocusRefDelay);

      return () => clearTimeout(timeout);
    }, []);
    {{/ if }}
  {{/ unless }}

  return (
    <Grid container>
      {{# each container.children as |child| }}
        {{# if isDebugPrint }}{/* include: getWidgetTemplate() */}{{/ if }}
        {{> (getWidgetTemplate child) }}
      {{/ each }}
    </Grid>
  );
}
