{{> fragment.header.hbs }}

import { useState, useEffect, useMemo, useRef, useCallback } from 'react';
import type { ElementType, MouseEvent, Dispatch, SetStateAction, FC } from 'react';
import { useTranslation } from 'react-i18next';
import type { JudoIdentifiable } from '~/services/data-api/common/JudoIdentifiable';
import type { JudoRestResponse } from '~/services/data-api/rest/requestResponse';
import Box from '@mui/material/Box';
import IconButton from '@mui/material/IconButton';
import Button from '@mui/material/Button';
import ButtonGroup from '@mui/material/ButtonGroup';
import Typography from '@mui/material/Typography';
import { GridLogicOperator, useGridApiRef } from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}';
{{# if isMUILicensePlanPro }}
import { gridColumnDefinitionsSelector } from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}';
{{/ if }}
import type {
  GridColDef,
  GridFilterModel,
  GridRowModel,
  GridRowId,
  GridRenderCellParams,
  GridRowSelectionModel,
  GridSortItem,
  GridSortModel,
  GridRowClassNameParams,
  GridRowParams,
  GridValidRowModel,
} from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}';
import { baseColumnConfig, baseTableConfig, basePageSizeOptions{{# unless table.isEager }}, filterDebounceMs{{/ unless }} } from '~/config';
import { MdiIcon{{# unless table.isEager }}, CustomTablePagination{{/ unless }} } from '~/components';
import {
  {{# if (tableHasBooleanColumn table) }}booleanColumnOperators,{{/ if }}
  {{# if (tableHasDateColumn table) }}dateColumnOperators,{{/ if }}
  {{# if (tableHasDateTimeColumn table) }}dateTimeColumnOperators,{{/ if }}
  {{# if (tableHasNumericColumn table) }}numericColumnOperators,{{/ if }}
  {{# if (tableHasEnumerationColumn table) }}singleSelectColumnOperators,{{/ if }}
  {{# if isUseInlineColumnFilters }}stringColumnOperators,{{/ if }}
  columnsActionCalculator,
  ContextMenu,
  StripedDataGrid,
  EagerTable,
  LazyTable,
} from '~/components/table';
import { useConfirmDialog } from '~/components/dialog';
import type { ContextMenuApi } from '~/components/table/ContextMenu';
import type { Filter, FilterOption } from '~/components-api';
import { FilterType } from '~/components-api';
import { CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY } from '~/custom';
import type {
  {{ getTableAPIImports table container }}
} from '~/services/data-api';
{{# or (tableHasNumericColumn table) (tableHasDateColumn table) (tableHasDateTimeColumn table) }}
import { useL10N } from '~/l10n/l10n-context';
{{/ or }}
import {
  TABLE_COLUMN_CUSTOMIZER_HOOK_INTERFACE_KEY,
  randomUtils,
  {{# if container.isSelector }}
  isRowSelectable,
  {{ else }}
  getUpdatedRowsSelected,
  {{/ if }}
  {{# if table.isEager }}
  applyInMemoryFilters,
  {{/ if }}
  {{# if (tableHasBinaryColumn table) }}
  fileHandling,
  {{/ if }}
  {{# or (tableHasDateTimeColumn table) (tableHasDateColumn table) }}
  serviceDateToUiDate,
  {{/ or }}
  {{# if (tableHasTimeColumn table) }}
  serviceTimeToUiTime,
  {{/ if }}
  {{# if isUseInlineColumnFilters }}
  mapFilterModelToFilters,
  mapFilterToFilterModel,
  {{/ if }}
  mapAllFiltersToQueryCustomizerProperties,
  processQueryCustomizer,
  {{# unless table.isEager }}
  useErrorHandler,
  {{/ unless }}
} from '~/utilities';
import type { SidekickComponentProps, DialogResult, TableRowAction, ToolBarActionProps, ColumnCustomizerHook{{# if isMUILicensePlanPro }}, PersistedColumnInfo{{/ if }} } from '~/utilities';
import { useDataStore } from '~/hooks';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useTrackComponent, ComponentProxy } from '@pandino/react-hooks';
{{# if (stringValueIsTrue useTableRowHighlighting) }}
import { useTrackService } from '@pandino/react-hooks';
import { RowHighlightLegend } from '~/components/table';
import { TABLE_ROW_HIGHLIGHTING_HOOK_INTERFACE_KEY, transformRowStylings } from '~/theme/table-row-highlighting';
import type { RowStylerConfigured, TableRowHighlightingHook } from '~/theme/table-row-highlighting';
{{/ if }}
import type { {{ componentName table }}ActionDefinitions, {{ componentName table }}Props } from './types';

export const {{ camelCaseNameToInterfaceKey (componentName table) }}_SIDEKICK_COMPONENT_INTERFACE_KEY = '{{ componentName table }}SidekickComponent';

// XMIID: {{ getXMIID table }}
// Name: {{ table.name }}
export function {{ componentName table }}(props: {{ componentName table }}Props) {
  const {
    uniqueId,
    actions,
    refreshCounter,
    isOwnerLoading,
    isDraft,
    validationError,
    {{# if container.isSelector }}
    selectionDiff,
    setSelectionDiff,
    {{/ if }}
    {{# if container.isRelationSelector }}
    alreadySelected,
    {{/ if }}
    {{# unless container.table }}
    ownerData,
    editMode,
    isFormUpdateable,
    {{/ unless }}
  } = props;
  const sidekickComponentFilter = `(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{ camelCaseNameToInterfaceKey (componentName table) }}_SIDEKICK_COMPONENT_INTERFACE_KEY }))`;

  const { openConfirmDialog } = useConfirmDialog();
  const { getItemParsed, getItemParsedWithDefault, setItemStringified } = useDataStore('sessionStorage');
  const { t } = useTranslation();
  {{# unless table.isEager }}
  const handleError = useErrorHandler();
  {{/ unless }}
  {{# or (tableHasNumericColumn table) (tableHasDateColumn table) (tableHasDateTimeColumn table) }}
  const { locale: l10nLocale } = useL10N();
  {{/ or }}
  {{# if (tableHasBinaryColumn table) }}
  const { downloadFile, extractFileNameFromToken } = fileHandling();
  {{/ if }}

  {{# each (customizableColumns table) as |column| }}
  const { service: {{ column.name }}ColumnCustomizerHook } = useTrackService<ColumnCustomizerHook<{{ classDataName (getReferenceClassType table) 'Stored' }}>>(`(&(${OBJECTCLASS}=${TABLE_COLUMN_CUSTOMIZER_HOOK_INTERFACE_KEY})(component={{~ componentName table ~}})(column={{ column.name }})`);
  const {{ column.name }}ColumnCustomizer = {{ column.name }}ColumnCustomizerHook && {{ column.name }}ColumnCustomizerHook();
  {{/ each }}

  {{# each table.columns as |column| }}
  const {{ column.name }}Column: GridColDef<{{ classDataName (getReferenceClassType table) 'Stored' }}> = {
    ...baseColumnConfig,
    field: '{{ column.attributeType.name }}',
    headerName: t('{{ getTranslationKeyForVisualElement column }}', { defaultValue: '{{ column.label }}' }) as string,
    headerClassName: 'data-grid-column-header',
    {{# if isDebugPrint }}// include: actor/src/fragments/relation/column.fragment.hbs{{/ if }}
    {{> actor/src/fragments/relation/column.fragment.hbs column=column ref=table name=table.name }}
  };
  {{/ each }}

  const columns = useMemo<GridColDef<{{ classDataName (getReferenceClassType table) 'Stored' }}>[]>(() => [
    {{# each table.columns as |column| }}
      {{# if column.customImplementation }}
        {{ column.name }}ColumnCustomizer ? {{ column.name }}ColumnCustomizer({{ column.name }}Column) : {{ column.name }}Column,
      {{ else }}
        {{ column.name }}Column,
      {{/ if }}
    {{/ each }}
  ], [{{# or (tableHasNumericColumn table) (tableHasDateColumn table) (tableHasDateTimeColumn table) }}l10nLocale{{/ or }}]);

  const toolBarActions: ToolBarActionProps<{{# with (getReferenceClassType table) as |classType| }}{{# if classType.isMapped }}{{ classDataName (getReferenceClassType table) 'Stored' }}{{ else }}{{ classDataName (getReferenceClassType table) '' }}{{/ if }}{{/ with }}>[]  = [
    {{# each table.tableActionButtonGroup.buttons as |button| }}
    {
      name:"{{ simpleActionDefinitionName actionDefinition }}",
      id:"{{ getXMIID button }}",
      {{# if button.icon }}
      startIcon:"{{ button.icon.iconName }}",
      {{/ if }}
      variant:{{{ variantForButton button }}},
      hiddenBy:{{# if button.hiddenBy }}true{{ else }}false{{/ if }},
      label:{ 'translationKey': '{{ getTranslationKeyForVisualElement button }}', 'defaultValue': '{{ button.label }}' },
      enabled: (data: {{# with (getReferenceClassType table) as |classType| }}{{# if classType.isMapped }}{{ classDataName (getReferenceClassType table) 'Stored' }}[]{{ else }}{{ classDataName (getReferenceClassType table) '' }}[]{{/ if }}{{/ with }}, selectionModel: GridRowSelectionModel, ownerData?: any, isFormUpdateable?: () => boolean): boolean => {{{ tableButtonVisibilityConditions button table container }}},
      isBulk: {{ boolValue actionDefinition.isBulk }},
    },
    {{/ each }}

  ];

  const rowActions: TableRowAction<{{# with (getReferenceClassType table) as |classType| }}{{# if classType.isMapped }}{{ classDataName (getReferenceClassType table) 'Stored' }}{{ else }}{{ classDataName (getReferenceClassType table) '' }}{{/ if }}{{/ with }}, {{ classDataName (getReferenceClassType table) 'Stored' }}>[] = [
    {{# each table.rowActionButtonGroup.buttons as |button| }}
    {{# unless button.actionDefinition.isOpenPageAction }}
    {
      id: '{{ getXMIID button }}',
      {{# if button.label }}
      label: t('{{ getTranslationKeyForVisualElement button }}', { defaultValue: '{{ button.label }}' }) as string,
      {{/ if }}
      {{# if button.icon }}
      icon: <MdiIcon path="{{ button.icon.iconName }}" />,
      {{/ if }}
      {{# if (isRowActionCRUD button.actionDefinition) }}
      isCRUD: true,
      {{/ if }}
      disabled: (row: {{ classDataName (getReferenceClassType table) 'Stored' }}, isLoading: boolean, getSelectedRows: () => {{# with (getReferenceClassType table) as |classType| }}{{# if classType.isMapped }}{{ classDataName (getReferenceClassType table) 'Stored' }}[]{{ else }}{{ classDataName (getReferenceClassType table) '' }}[]{{/ if }}{{/ with }}, ownerdata?: any): boolean => {{{ tableRowButtonDisabledConditions button table container }}},
      action: actions.{{ simpleActionDefinitionName button.actionDefinition }} ? async (rowData) => {
        {{> actor/src/fragments/container/action-call-confirm-check.fragment.hbs button=button }}
        await actions.{{ simpleActionDefinitionName button.actionDefinition }}!(rowData{{# if button.actionDefinition.isOpenPageAction }}, isDraft{{/ if }});
      } : undefined,
    },
    {{/ unless }}
    {{/ each }}
  ];

  const filterOptions: FilterOption[] = [
    {{# each table.filters as |filter| }}
    {{# if isDebugPrint }}// include: actor/src/fragments/table/filter-option.fragment.hbs{{/ if }}
    {{> actor/src/fragments/table/filter-option.fragment.hbs filter=filter application=application }}
    {{/ each }}
  ];

  return (
    <div id="{{ getXMIID table }}" data-table-name="{{ table.name }}">
      {{# if table.isEager }}
        <EagerTable<{{# with (getReferenceClassType table) as |classType| }}{{# if classType.isMapped }}{{ classDataName (getReferenceClassType table) 'Stored' }}{{ else }}{{ classDataName (getReferenceClassType table) '' }}{{/ if }}{{/ with }}, {{ classDataName (getReferenceClassType table) 'Stored' }}, {{ classDataName (getReferenceClassType table) 'QueryCustomizer' }}>
        uniqueId={`{{ createId table }}-${uniqueId}`}
        {{# if (stringValueIsTrue useTableRowHighlighting) }}
        rowHighlightingHookInterfaceKey={`(&(${OBJECTCLASS}=${TABLE_ROW_HIGHLIGHTING_HOOK_INTERFACE_KEY})(component={{~ componentName table ~}}))`}
        {{/ if }}
        {{# with (getReferenceClassType table) as |classType| }}
        dataProp={ {{# if table.isSelectorTable }}[]{{ else }}{{# if table.isEager }}ownerData?.{{ table.dataElement.name }} || []{{ else }}[]{{/ if }}{{/ if }} }
        {{/ with }}
        defaultSortParamsForTable={ {{{ getDefaultSortParamsForTable table }}} }
        tablePageLimit={ {{ calculateTablePageLimit table }} }
        tableColumns={columns}
        tableRowActions={rowActions}
        tableFilterOptions={filterOptions}
        isOwnerLoading={isOwnerLoading}
        validationError={validationError}
        actions={actions}
        {{# if table.allowSelectMultiple }}
        allowSelectMultiple={ true }
        {{/ if }}
        dataElementId={ '{{ createId table.dataElement }}' }
        crudOperationsDisplayed={ {{ table.crudOperationsDisplayed }} }
        transferOperationsDisplayed={ {{ table.transferOperationsDisplayed }} }
        {{# if container.isSelector }}
        containerIsSelector={ true }
        {{/ if }}
        {{# unless (checkboxSelectionEnabled table) }}
        checkboxSelection={ false }
        {{/ unless }}
        {{# if container.isRelationSelector }}
        containerIsRelationSelector={ true }
        {{/ if }}
        {{# each table.rowActionDefinitions as |actionDefinition| }}
        {{# if actionDefinition.isOpenPageAction }}
        onRowClick={ actions.{{ simpleActionDefinitionName actionDefinition }} ? async (params: GridRowParams<{{ classDataName (getReferenceClassType table) 'Stored' }}>) => await actions.{{ simpleActionDefinitionName actionDefinition }}!(params.row, {{# if table.isEager }}true{{ else }}false{{/ if }}) : undefined }
        {{/ if }}
        {{/ each }}
        sidekickComponentFilter={sidekickComponentFilter}
        {{# if table.isSelectorTable }}
        isSelectorTable={ true }
        {{/ if }}
        {{# if container.table }}
        containerHasTable={ true }
        {{/ if }}
        toolBarActions={toolBarActions}
        additionalToolbarButtons={actions?.{{ table.relationType.name }}AdditionalToolbarButtons}
        {{# if (tableHasSelectorColumn table) }}
        tableHasSelectorColumn={ true }
        {{/ if }}
        {{# unless container.table }}
        isFormUpdateable={isFormUpdateable}
        ownerData={ownerData}
        editMode={editMode}
        {{/ unless }}
        maskAction={actions.get{{ firstToUpper table.relationName }}Mask!}
        enabledByName='{{ table.enabledBy.name }}'
        dataElement={ ownerData?.{{ table.dataElement.name }} }
        relationName='{{ table.relationName }}'
        {{# if container.isSelector }}
        selectionDiff={selectionDiff}
        setSelectionDiff={setSelectionDiff}
        {{/ if }}
        />
      {{ else }}
        <LazyTable<{{# with (getReferenceClassType table) as |classType| }}{{# if classType.isMapped }}{{ classDataName (getReferenceClassType table) 'Stored' }}{{ else }}{{ classDataName (getReferenceClassType table) '' }}{{/ if }}{{/ with }}, {{ classDataName (getReferenceClassType table) 'Stored' }}, {{ classDataName (getReferenceClassType table) 'QueryCustomizer' }}>
        uniqueId={`{{ createId table }}-${uniqueId}`}
        {{# if (stringValueIsTrue useTableRowHighlighting) }}
        rowHighlightingHookInterfaceKey={`(&(${OBJECTCLASS}=${TABLE_ROW_HIGHLIGHTING_HOOK_INTERFACE_KEY})(component={{~ componentName table ~}}))`}
        {{/ if }}
        {{# with (getReferenceClassType table) as |classType| }}
        dataProp={ {{# if table.isSelectorTable }}[]{{ else }}{{# if table.isEager }}ownerData?.{{ table.dataElement.name }} || []{{ else }}[]{{/ if }}{{/ if }} }
        {{/ with }}
        defaultSortParamsForTable={ {{{ getDefaultSortParamsForTable table }}} }
        tablePageLimit={ {{ calculateTablePageLimit table }} }
        tableColumns={columns}
        tableRowActions={rowActions}
        tableFilterOptions={filterOptions}
        isOwnerLoading={isOwnerLoading}
        validationError={validationError}
        actions={actions}
        {{# if table.allowSelectMultiple }}
        allowSelectMultiple={ true }
        {{/ if }}
        {{# unless (checkboxSelectionEnabled table) }}
        checkboxSelection={ false }
        {{/ unless }}
        dataElementId={ '{{ createId table.dataElement }}' }
        crudOperationsDisplayed={ {{ table.crudOperationsDisplayed }} }
        transferOperationsDisplayed={ {{ table.transferOperationsDisplayed }} }
        {{# if container.isSelector }}
        containerIsSelector={ true }
        {{/ if }}
        {{# if container.isRelationSelector }}
        containerIsRelationSelector={ true }
        {{/ if }}
        {{# if table.showTotalCount }}
        showTotalCount={ true }
        {{/ if }}
        {{# each table.rowActionDefinitions as |actionDefinition| }}
        {{# if actionDefinition.isOpenPageAction }}
        onRowClick={ actions.{{ simpleActionDefinitionName actionDefinition }} ? async (params: GridRowParams<{{ classDataName (getReferenceClassType table) 'Stored' }}>) => await actions.{{ simpleActionDefinitionName actionDefinition }}!(params.row, {{# if container.form }}true{{ else }}false{{/ if }}) : undefined }
        {{/ if }}
        {{/ each }}
        sidekickComponentFilter={sidekickComponentFilter}
        {{# if container.table }}
        containerHasTable={ true }
        {{/ if }}
        {{# if getRefreshActionDefinitionForTable table }}
        hasRefreshAction={ true }
        {{/ if }}
        maskAction={actions.get{{ firstToUpper table.relationName }}Mask!}
        {{# if container.isSelector }}
        {{# with (getRangeActionDefinitionForTable table) as |actionDefinition| }}
        fetch={ actions.{{ simpleActionDefinitionName actionDefinition }} }
        {{/ with }}
        {{ else }}
        {{# with (getRefreshActionDefinitionForTable table) as |actionDefinition| }}
        fetch={ actions.{{ simpleActionDefinitionName actionDefinition }} }
        {{/ with }}
        {{/ if }}
        refreshCounter={refreshCounter}
        toolBarActions={toolBarActions}
        additionalToolbarButtons={actions?.{{ table.relationType.name }}AdditionalToolbarButtons}
        {{# if (tableHasSelectorColumn table) }}
        tableHasSelectorColumn={ true }
        {{/ if }}
        {{# unless container.table }}
        isFormUpdateable={isFormUpdateable}
        ownerData={ownerData}
        editMode={editMode}
        {{/ unless }}
        enabledByName='{{ table.enabledBy.name }}'
        relationName='{{ table.relationName }}'
        {{# if container.isSelector }}
        selectionDiff={selectionDiff}
        setSelectionDiff={setSelectionDiff}
        {{/ if }}
        />
      {{/ if }}
    </div>
  );
}
