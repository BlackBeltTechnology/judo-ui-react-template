{{> fragment.header.hbs }}

import { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { exists, processQueryCustomizer } from '~/utilities';
import { MdiIcon } from '~/components';
import { SingleRelationInput } from '~/components/widgets';
import { StringOperation } from '~/services/data-api/model/StringOperation';
{{# each (getLinkAPIImports link container) as |imp| }}
  import type {
    {{ imp }},
    {{ imp }}Stored,
  } from '~/services/data-api/model/{{ imp }}';
  import type {
    {{ imp }}QueryCustomizer,
  } from '~/services/data-api/rest/{{ imp }}QueryCustomizer';
{{/ each }}
import type { JudoRestResponse } from '~/services/data-api/rest/requestResponse';
import { SingleRelationInputButtonProps } from '~/utilities/application/interfaces';
import type { {{ componentName link }}ActionDefinitions, {{ componentName link }}Props } from './types';

// XMIID: {{ getXMIID link }}
// Name: {{ link.name }}
export function {{ componentName link }}(props: {{ componentName link }}Props) {
  const { ownerData, actions, storeDiff, submit, validationError, disabled, readOnly, editMode, isLoading, isDraft{{# unless link.isEager }}, refreshCounter{{/ unless }} } = props;
  const { t } = useTranslation();

  const isRequired = useMemo(() => {
    return actions?.is{{ firstToUpper link.relationType.name }}Required ? actions.is{{ firstToUpper link.relationType.name }}Required(ownerData, editMode) : ({{# if link.requiredBy }}ownerData.{{ link.requiredBy.name }} || {{/ if }}{{# unless link.dataElement.isOptional }}true{{ else }}false{{/ unless }});
  }, [actions, ownerData, editMode]);

  const buttonProps: SingleRelationInputButtonProps<{{ classDataName link.dataElement.target 'Stored' }}>[] = useMemo( () => [
    {{# each link.actionButtonGroup.buttons as |button| }}
    {
      name: "{{ firstToLower button.label }}",
      className: "{{ link.dataElement.name }}-{{ firstToLower button.label }}",
    {{# if button.actionDefinition.isOpenSelectorAction }}
      visible: (value: any) => !exists(value) && !readOnly && !!actions.{{ simpleActionDefinitionName actionDefinition }},
      dropDownButtonIsVisible: (value: any) => exists(value) && !readOnly && !!actions.{{ simpleActionDefinitionName actionDefinition }},
      disabled: disabled,
      onClick: async (value: {{ classDataName link.dataElement.target 'Stored' }} | null) => {
        const {{ link.dataElement.name }} = await actions.{{ simpleActionDefinitionName actionDefinition }}!();
        {{# if link.onBlur }}
          if ({{ link.dataElement.name }} && actions?.on{{ firstToUpper link.dataElement.name }}BlurAction) {
            const eagerCopy = { ...ownerData, ['{{ link.dataElement.name }}']: {{ link.dataElement.name }} };
            actions.on{{ firstToUpper link.dataElement.name }}BlurAction(eagerCopy as {{ classDataName container.dataElement 'Stored' }}, storeDiff, editMode!, submit);
          }
        {{/ if }}
      },
      title: t('judo.component.SingleRelationInput.open-filter', { defaultValue: 'Open selector dialog' }) as string,
    {{/ if }}
    {{# if button.actionDefinition.isUnsetAction }}
      dropDownButtonIsVisible: (value: any) => exists(value) && !readOnly && !isRequired && !!actions.{{ simpleActionDefinitionName actionDefinition }},
      disabled: disabled,
      onClick: async (value: {{ classDataName link.dataElement.target 'Stored' }} | null) => {
        actions.{{ simpleActionDefinitionName actionDefinition }}!(value!)
      },
      title: t('judo.component.SingleRelationInput.unset', { defaultValue: 'Unset' }) as string,
    {{/ if }}
    {{# if button.actionDefinition.isOpenPageAction }}
      visible: (value: any) => exists(value) && !!actions.{{ simpleActionDefinitionName actionDefinition }},
      disabled: editMode && !({{ boolValue link.dataElement.isInlineCreatable }} && !isDraft),
      onClick: async (value: {{ classDataName link.dataElement.target 'Stored' }} | null) => {
        await actions.{{ simpleActionDefinitionName actionDefinition }}!(value!, {{# if link.isEager }}true{{ else }}false{{/ if }});
      },
      title: t('judo.component.SingleRelationInput.navigate', { defaultValue: 'Navigate to element' }) as string,
    {{/ if }}
    {{# if button.actionDefinition.isOpenFormAction }}
      visible: (value: any) => !exists(value) && !readOnly && !!actions.{{ simpleActionDefinitionName actionDefinition }},
      disabled: disabled || (editMode && !({{ boolValue link.dataElement.isInlineCreatable }} && !isDraft)),
      onClick: async () => {
        await actions.{{ simpleActionDefinitionName actionDefinition }}!();
      },
      title: t('judo.component.SingleRelationInput.create', { defaultValue: 'Create' }) as string,
    {{/ if }}
    {{# if button.actionDefinition.isRowDeleteAction }}
      dropDownButtonIsVisible: (value: any) => exists(value) && !readOnly && !isRequired && value.__deleteable && !!actions.{{ simpleActionDefinitionName actionDefinition }},
      disabled: disabled || editMode,
      onClick: async (value: {{ classDataName link.dataElement.target 'Stored' }} | null) => {
        actions.{{ simpleActionDefinitionName actionDefinition }}!(value!);
      },
      title: t('judo.component.SingleRelationInput.delete', { defaultValue: 'Delete' }) as string,
    {{/ if }}
      iconName: '{{ button.icon.iconName }}',
    },
  {{/ each }}
  ], [readOnly, editMode, isDraft, disabled, ownerData, actions]);

  return (
    <SingleRelationInput
      name="{{ link.dataElement.name }}"
      id="{{ getXMIID link }}"
      label={ t('{{ getTranslationKeyForVisualElement link }}', { defaultValue: '{{ link.label }}' }) as string }
      required={isRequired}
      ownerData={ownerData}
      error={!!validationError}
      helperText={validationError}
      {{# if link.icon }}
        icon={<MdiIcon path="{{ link.icon.iconName }}" />}
      {{/ if }}
      disabled={actions?.is{{ firstToUpper link.relationType.name }}Disabled ? actions.is{{ firstToUpper link.relationType.name }}Disabled(ownerData, editMode, isLoading) : disabled}
      readOnly={readOnly}
      editMode={editMode}
      {{# unless link.isEager }}
      isEager={false}
      refreshCounter={refreshCounter}
      refreshAction={ async () => {
        if (actions.{{ link.dataElement.name }}RefreshAction) {
          try {
            const queryCustomizer: {{ classDataName link.dataElement.target 'QueryCustomizer' }} = {
              _mask: actions.get{{ firstToUpper link.relationType.name }}Mask!(),
            };
            const { data: result } = await actions.{{ link.dataElement.name }}RefreshAction!(queryCustomizer);
            return result || null; // result can be empty string for no data...
          } catch(error) {
            console.error(error);
            return null;
          }
        } else {
          return null;
        }
      } }
      {{/ unless }}
      isInlineCreatable={ {{ boolValue link.dataElement.isInlineCreatable }} && !isDraft }
      autoCompleteAttribute={'{{ link.parts.[0].attributeType.name }}'}
      buttonProps={buttonProps}
      onAutoCompleteSelect={ async ({{ link.dataElement.name }}) => {
        if (actions.{{ link.dataElement.name }}AutocompleteSetAction) {
          actions.{{ link.dataElement.name }}AutocompleteSetAction({{ link.dataElement.name }} as {{ classDataName link.dataElement.target 'Stored' }});
          {{# if link.onBlur }}
          if (actions?.on{{ firstToUpper link.dataElement.name }}BlurAction) {
            const eagerCopy = { ...ownerData, ['{{ link.dataElement.name }}']: {{ link.dataElement.name }} };
            actions.on{{ firstToUpper link.dataElement.name }}BlurAction(eagerCopy as {{ classDataName container.dataElement 'Stored' }}, storeDiff, editMode!, submit);
          }
          {{/ if }}
        }
      } }
{{# if (isAutocompleteAvailable link) }}
  {{# with (getFirstAutocompleteColumnForLink link) as |column| }}
    {{# with link.autocompleteRangeActionDefinition as |actionDefinition| }}
      onAutoCompleteSearch={ actions.{{ simpleActionDefinitionName actionDefinition }} ? async (searchText: string) => {
        const queryCustomizer: {{ classDataName link.dataElement.target 'QueryCustomizer' }} = {
          ...(searchText?.length ? {
            {{ column.attributeType.name }}: [
              { operator: StringOperation.like, value: searchText }
            ],
          } : {}),
          _mask: actions.get{{ firstToUpper link.relationType.name }}Mask!(),
          _orderBy: [
            {{# with (getSortColumnForLink link) as |sortColumn| }}
            { attribute: '{{ sortColumn.attributeType.name }}', descending: {{ isSortDirectionDescending sortColumn }} },
            {{/ with }}
          ],
          _seek: { limit: {{ calculateLinkAutocompleteRows link }} },
        };
        return await actions.{{ simpleActionDefinitionName actionDefinition }}!(processQueryCustomizer(queryCustomizer));
      } : undefined }
    {{/ with }}
  {{/ with }}
{{/ if }}
    />
  );
}
