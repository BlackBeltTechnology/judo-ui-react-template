{{> fragment.header.hbs }}

import { useMemo } from 'react';
import type { ElementType, MouseEvent, Dispatch, SetStateAction, FC } from 'react';
import { useTranslation } from 'react-i18next';
import { Tags } from '~/components/widgets';
import type { Filter } from '~/components-api';
{{# each (getTableAPIImports table container) as |imp| }}
  import type {
    {{ imp }},
    {{ imp }}Stored,
  } from '~/services/data-api/model/{{ imp }}';
  import type {
    {{ imp }}QueryCustomizer,
  } from '~/services/data-api/rest/{{ imp }}QueryCustomizer';
{{/ each }}
import {
  createActionName,
  actionsHasCapability,
  serializeFilters,
  deserializeFilters,
} from '~/utilities';
import type { FiltersSerializer } from '~/utilities';
import type { {{ componentName table }}ActionDefinitions, {{ componentName table }}Props } from './types';
import { {{ classDataName (getReferenceClassType table) 'StoredSerializer' }} } from '~/services/data-api/rest/{{ classDataName (getReferenceClassType table) 'Serializer' }}';


export const filtersSerializer: FiltersSerializer = {
  serialize: (filters: Filter[]) => serializeFilters<{{ classDataName (getReferenceClassType table) 'Stored' }}>(filters, {{ classDataName (getReferenceClassType table) 'StoredSerializer' }}.getInstance()),
  deserialize: (filters: Filter[]) => deserializeFilters<{{ classDataName (getReferenceClassType table) 'Stored' }}>(filters, {{ classDataName (getReferenceClassType table) 'StoredSerializer' }}.getInstance()),
};

// XMIID: {{ getXMIID table }}
// Name: {{ table.name }}
export function {{ componentName table }}(props: {{ componentName table }}Props) {
  const {
    uniqueId,
    actions,
    dataPath,
    isOwnerLoading,
    isDraft,
    validationError,
    ownerData,
    editMode,
    isFormUpdateable,
    storeDiff,
  } = props;

  const { t } = useTranslation();

  const hasRangeCapability = useMemo<boolean>(() => {
    return actionsHasCapability(actions, '{{ table.relationName }}', 'AutocompleteRangeAction');
  }, [actions]);
  const hasAutocompleteAddCapability = useMemo<boolean>(() => {
    return actionsHasCapability(actions, '{{ table.relationName }}', 'AutocompleteAddAction');
  }, [actions]);
  const hasOpenAddCapability = useMemo<boolean>(() => {
    return actionsHasCapability(actions, '{{ table.relationName }}', 'OpenAddSelectorAction');
  }, [actions]);
  const hasCreateCapability = useMemo<boolean>(() => {
    return actionsHasCapability(actions, '{{ table.relationName }}', 'OpenCreateFormAction');
  }, [actions]);

  return (
    <div id="{{ getXMIID table }}" data-table-name="{{ table.name }}">
      <Tags<{{ classDataName container.dataElement '' }}, {{ classDataName (getReferenceClassType table) 'Stored' }}>
        id="{{ getXMIID table }}"
        label={ {{# if (elementHasLabel table) }}t('{{ getTranslationKeyForVisualElement table }}', { defaultValue: '{{ table.label }}' }){{ else }}'{{ table.relationName }}'{{/ if }} }
        helperText={validationError}
        error={!!validationError}
        editMode={editMode}
        ownerData={ownerData}
        name="{{ table.relationName }}"
        disabled={ {{# if table.enabledBy }}!ownerData.{{ table.enabledBy.name }} || {{/ if }}isOwnerLoading || !isFormUpdateable()}
        readOnly={ {{ boolValue table.relationType.isReadOnly }} || !isFormUpdateable() }
        {{# with (getFirstAutocompleteColumnForTable table) as |column| }}
        autoCompleteAttribute="{{ column.attributeType.name }}"
        {{/ with }}
        onAutoCompleteSearch={ hasRangeCapability ? async (searchText, preparedQueryCustomizer) => {
          const values = await (actions as any)[createActionName('{{ table.relationName }}', 'AutocompleteRangeAction')](preparedQueryCustomizer);
          return values;
        } : undefined }
        onSearchDialogsClick={hasOpenAddCapability ? () => (actions as any)[createActionName('{{ table.relationName }}', 'OpenAddSelectorAction')]() : undefined}
        onValueChange={async (values) => storeDiff('{{ table.relationName }}', values)}
        onItemClick={actions.{{ table.relationName }}OpenPageAction ? (target) => actions.{{ table.relationName }}OpenPageAction!(target) : undefined}
        onCreateDialogsClick={hasCreateCapability ? () => (actions as any)[createActionName('{{ table.relationName }}', 'OpenCreateFormAction')]() : undefined}
        onClearDialogsClick={() => storeDiff('{{ table.relationName }}', [])}
        identifierAttribute="__identifier"
      />
    </div>
  );
}
