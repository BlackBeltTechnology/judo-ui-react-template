{{# each (getLinkAPIImports link container) as |imp| }}
  import type {
    {{ imp }},
    {{ imp }}Stored,
  } from '~/services/data-api/model/{{ imp }}';
  import type {
    {{ imp }}QueryCustomizer,
  } from '~/services/data-api/rest/{{ imp }}QueryCustomizer';
{{/ each }}
import type { JudoRestResponse } from '~/services/data-api/rest/requestResponse';

export interface {{ componentName link }}ActionDefinitions {
  {{# each link.actionDefinitions as |actionDefinition| }}
  {{ simpleActionDefinitionName actionDefinition }}?: ({{{ linkActionDefinitionParameters link actionDefinition }}}) => Promise<{{{ linkActionDefinitionResponseType link actionDefinition }}}>;
  {{/ each }}
  {{# if link.onBlur }}
  on{{ firstToUpper link.relationType.name }}BlurAction?: ({{{ onBlurActionParams container }}}) => void;
  {{/ if }}
  is{{ firstToUpper link.relationType.name }}Required?: ({{{ inputModifierParams container false }}}) => boolean;
  is{{ firstToUpper link.relationType.name }}Disabled?: ({{{ inputModifierParams container true }}}) => boolean;
  get{{ firstToUpper link.relationType.name }}Mask?: () => string;
}

export interface {{ componentName link }}Props {
  ownerData: {{ classDataName container.dataElement '' }} | {{ classDataName container.dataElement 'Stored' }};
  dataPath?: string;
  actions: {{ componentName link }}ActionDefinitions;
  storeDiff: (attributeName: keyof {{ classDataName container.dataElement '' }}, value: any) => void;
  submit: () => Promise<void>;
  validationError?: string;
  disabled?: boolean;
  readOnly?: boolean;
  editMode?: boolean;
  isLoading?: boolean;
  isDraft?: boolean;
  {{# unless link.isEager }}
  refreshCounter: number;
  {{/ unless }}
}
