{{> fragment.header.hbs }}

import { forwardRef, lazy, useImperativeHandle, useState, Suspense } from 'react';
import type { Dispatch, SetStateAction } from 'react';
import { Grid, Button } from '@mui/material';
import { LoadingButton } from '@mui/lab';
import { useTranslation } from 'react-i18next';
import type { PageContainerRef } from '~/utilities';
import { useJudoNavigation, MdiIcon, PageHeader } from '~/components';
import { useConfirmDialog } from '~/components/dialog';
import { useL10N } from '~/l10n/l10n-context';
{{# unless (containerIsEmptyDashboard container) }}
  import type { {{ containerComponentName container }}ActionDefinitions } from './{{ containerComponentName container }}';
  import type {
    {{ classDataName container.dataElement '' }},
    {{ classDataName container.dataElement 'Stored' }},
    {{ classDataName container.dataElement 'QueryCustomizer' }}
  } from '~/generated/data-api';
{{/ unless }}

{{# unless (containerIsEmptyDashboard container) }}
  const {{ containerComponentName container }} = lazy(() => import('~/containers/{{ containerPath container }}/{{ containerComponentName container }}'));

  export interface {{ containerComponentName container }}PageActions extends {{ pageContainerActionDefinitionTypeName container }} {
    {{# each container.pageActionDefinitions as |actionDefinition| }}
      {{# if actionDefinition.isRefreshAction }}
        {{ simpleActionDefinitionName actionDefinition }}?: (queryCustomizer: {{ classDataName container.dataElement 'QueryCustomizer' }}) => Promise<{{ classDataName container.dataElement 'Stored' }}{{# if container.isCollection }}[]{{/ if }}>;
      {{ else }}
        {{ simpleActionDefinitionName actionDefinition }}?: () => Promise<void>;
      {{/ if }}
    {{/ each }}
  }
{{/ unless }}

export interface {{ containerComponentName container }}PageProps {
  title: string;
  {{# unless (containerIsEmptyDashboard container) }}
    actions: {{ containerComponentName container }}PageActions;
    isLoading: boolean;
    editMode: boolean;
    {{# unless container.isCollection }}
      data: {{ classDataName container.dataElement '' }};
      isFormUpdateable: () => boolean;
      isFormDeleteable: () => boolean;
      storeDiff: (attributeName: keyof {{ classDataName container.dataElement '' }}, value: any) => void;
      validation: Map<keyof {{ classDataName container.dataElement '' }}, string>;
      setValidation: Dispatch<SetStateAction<Map<keyof {{ classDataName container.dataElement '' }}, string>>>;
    {{/ unless }}
  {{/ unless }}
};

// Name: {{ container.name }}
export default (props: {{ containerComponentName container }}PageProps) => {
  const [refreshCounter, setRefreshCounter] = useState<number>(0);
  const { openConfirmDialog } = useConfirmDialog();

  {{# unless (containerIsEmptyDashboard container) }}
    const { t } = useTranslation();
    const { navigate, back } = useJudoNavigation();
    const { title, actions, isLoading, editMode{{# unless container.isCollection }}, data, isFormUpdateable, isFormDeleteable, storeDiff, validation, setValidation{{/ unless }} } = props;
    const { locale: l10nLocale } = useL10N();

    {{# unless container.isCollection }}
      const queryCustomizer: {{ classDataName container.dataElement 'QueryCustomizer' }} = {
        _mask: '',
      };
    {{/ unless }}
  {{/ unless }}

  const imperativeRefresh = () => {
    {{# unless container.isCollection }}
      {{# with (getRefreshActionDefinitionForContainer container) as |actionDefinition| }}
        if (actions.{{ simpleActionDefinitionName actionDefinition }}) {
          actions.{{ simpleActionDefinitionName actionDefinition }}!(queryCustomizer);
        }
      {{/ with }}
    {{ else }}
      setRefreshCounter((prev) => prev + 1);
    {{/ unless }}
  };

  return (
    <>
      {{# unless (containerIsEmptyDashboard container) }}
        <PageHeader title={title}>
          {{# unless container.isCollection }}
            {editMode{{# unless container.isCollection }} && isFormUpdateable(){{/ unless }} && (
              <Grid className="page-action" item>
                <Button id="page-action-edit-cancel" variant="outlined" startIcon={<MdiIcon path="cancel" />} onClick={imperativeRefresh} disabled={isLoading}>
                  {t('judo.pages.cancel', { defaultValue: 'Cancel' })}
                </Button>
              </Grid>
            )}
          {{/ unless }}
          {{# each container.actionButtonGroup.buttons as |button| }}
            { {{ containerButtonAvailable button }} && actions.{{ simpleActionDefinitionName actionDefinition }} && (
              <Grid className="page-action" item>
                <LoadingButton
                  id="{{ button.name }}"
                  loading={isLoading}
                  loadingPosition="start"
                  {{# if button.icon }}
                    startIcon={<MdiIcon path="{{ button.icon.name }}" />}
                  {{/ if }}
                  onClick={ async () => {
                    {{# if button.actionDefinition.isDeleteAction }}
                      const confirmed = await openConfirmDialog(
                        'page-delete-action',
                        t('judo.modal.confirm.confirm-delete', { defaultValue: 'Are you sure you would like to delete the selected element?' }),
                        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
                      );

                      if (confirmed) {
                        actions.{{ simpleActionDefinitionName actionDefinition }}!();
                      }
                    {{ else }}
                      {{# if button.actionDefinition.isRefreshAction }}
                        imperativeRefresh();
                      {{ else }}
                        actions.{{ simpleActionDefinitionName actionDefinition }}!();
                      {{/ if }}
                    {{/ if }}
                  } }
                >
                  <span>{t('{{ getTranslationKeyForVisualElement button }}', { defaultValue: '{{ button.label }}' })}</span>
                </LoadingButton>
              </Grid>
            )}
          {{/ each }}
          <div>{/* Placeholder */}</div>
        </PageHeader>
        <Suspense>
          <{{ containerComponentName container }}
            actions={actions}
            refreshCounter={refreshCounter}
            {{# unless (containerIsEmptyDashboard container) }}
              {{# unless container.isCollection }}
                data={data}
                isLoading={isLoading}
                editMode={editMode}
                storeDiff={storeDiff}
                isFormUpdateable={isFormUpdateable}
                isFormDeleteable={isFormDeleteable}
                validation={validation}
                setValidation={setValidation}
              {{/ unless }}
            {{/ unless }}
          />
        </Suspense>
      {{/ unless }}
    </>
  );
};
