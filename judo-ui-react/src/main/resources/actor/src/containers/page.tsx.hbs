{{> fragment.header.hbs }}

import { lazy, Suspense } from 'react';
import type { Dispatch, SetStateAction } from 'react';
{{# if (containerHasActionsWithCustomImplementation container) }}
  import { OBJECTCLASS } from '@pandino/pandino-api';
  import { ComponentProxy, useTrackService } from '@pandino/react-hooks';
  import { CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY } from '~/custom';
{{/ if }}
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import LoadingButton from '@mui/lab/LoadingButton';
import { useTranslation } from 'react-i18next';
import { useJudoNavigation, MdiIcon, PageHeader } from '~/components';
import { useConfirmDialog } from '~/components/dialog';
import { mainContainerPadding } from '~/theme';
{{# unless (containerIsEmptyDashboard container) }}
  {{# unless container.table }}
    import { processQueryCustomizer } from '~/utilities';
  {{/ unless }}
  import { getValue } from '~/utilities/helper';
  import type {
    {{ classDataName container.dataElement '' }},
    {{ classDataName container.dataElement 'Stored' }},
  } from '~/services/data-api/model/{{ classDataName container.dataElement '' }}';
  import type {
    {{ classDataName container.dataElement 'QueryCustomizer' }},
  } from '~/services/data-api/rest/{{ classDataName container.dataElement 'QueryCustomizer' }}';

  import type {
    {{ containerComponentName container }}ActionDefinitions,
    {{ containerComponentName container }}PageActions,
    {{ containerComponentName container }}PageProps,
  } from './types';

  {{# if (containerHasActionsWithCustomImplementation container) }}
    import {
      {{# each (getContainerActionsVisualElementsWithCustomImplementation container) as |ve| }}
        {{ getCustomizationComponentInterfaceKey ve }},
      {{/ each }}
    } from './customization';
  {{/ if }}
{{/ unless }}

{{# unless (containerIsEmptyDashboard container) }}
  const {{ containerComponentName container }} = lazy(() => import('~/containers/{{ containerPath container }}/{{ containerComponentName container }}'));
{{/ unless }}

// Name: {{ container.name }}
export default function {{ containerComponentName container }}Page ({{# unless (containerIsEmptyDashboard container) }}props: {{ containerComponentName container }}PageProps{{/ unless }}) {
  const { openConfirmDialog } = useConfirmDialog();

  {{# unless (containerIsEmptyDashboard container) }}
    const { t } = useTranslation();
    const { navigate, back } = useJudoNavigation();
    const { actions, dataPath, isLoading, editMode, refreshCounter{{# unless container.table }}, data, isFormUpdateable, isFormDeleteable, storeDiff, validation, setValidation, submit{{/ unless }} } = props;
    const isDraft = false; // currently no page can be opened as draft, but we need this variable anyway
    {{# if container.view }}
      const queryCustomizer: {{ classDataName container.dataElement 'QueryCustomizer' }} = {
        _mask: actions.getMask?.(),
      };
    {{/ if }}
  {{/ unless }}

  return (
    {{# unless (containerIsEmptyDashboard container) }}
      <>
        <PageHeader title={actions?.getPageTitle ? actions?.getPageTitle({{# unless container.table }}data{{/ unless }}) : ''}>
          {{# each container.actionButtonGroup.buttons as |button| }}
            { {{{ containerButtonAvailable button }}} && actions.{{ simpleActionDefinitionName actionDefinition }} && (
              <Grid className="page-action" item>
                {{# if button.customImplementation }}
                  <ComponentProxy
                    filter={`(&(${OBJECTCLASS}=${CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY})(component=${ {{~ getCustomizationComponentInterfaceKey button ~}} }))`}
                    editMode={editMode}
                    {{# unless container.table }}
                    data={data}
                    validation={validation}
                    storeDiff={storeDiff}
                    submit={submit}
                    {{/ unless }}
                    isLoading={isLoading}
                    actions={actions}
                  >
                {{/ if }}
                <LoadingButton
                  id="{{ getXMIID button }}"
                  loading={isLoading}
                  loadingPosition="start"
                  variant={ {{{ variantForButton button }}} }
                  {{# if button.icon }}
                    startIcon={<MdiIcon path="{{ button.icon.iconName }}" />}
                  {{/ if }}
                  {{# if (containerButtonHasDisabledConditions button container) }}
                  disabled={ {{{ containerButtonGroupButtonDisabledConditions button container }}} }
                  {{/ if }}
                  onClick={ async () => {
                    {{# unless (isParameterOpenerButton button) }}
                      {{> actor/src/fragments/container/action-call-confirm-check.fragment.hbs button=button dataParam='data' }}
                    {{/ unless }}
                    {{# if button.actionDefinition.isDeleteAction }}
                      actions.{{ simpleActionDefinitionName actionDefinition }}!();
                    {{ else }}
                      {{# if actionDefinition.isRefreshAction }}
                        await actions.{{ simpleActionDefinitionName actionDefinition }}!(processQueryCustomizer(queryCustomizer));
                      {{ else }}
                        await actions.{{ simpleActionDefinitionName actionDefinition }}!();
                      {{/ if }}
                    {{/ if }}
                  } }
                >
                  <span>{t('{{ getTranslationKeyForVisualElement button }}', { defaultValue: '{{ button.label }}' })}</span>
                </LoadingButton>
                {{# if button.customImplementation }}
                </ComponentProxy>
                {{/ if }}
              </Grid>
            )}
          {{/ each }}
          <div>{/* Placeholder */}</div>
        </PageHeader>
        <Suspense>
          <Box sx={mainContainerPadding}>
            <{{ containerComponentName container }}
              actions={actions}
              dataPath={dataPath}
              refreshCounter={refreshCounter}
              {{# unless (containerIsEmptyDashboard container) }}
                isLoading={isLoading}
                {{# unless container.table }}
                  data={data}
                  editMode={editMode}
                  storeDiff={storeDiff}
                  isFormUpdateable={isFormUpdateable}
                  isFormDeleteable={isFormDeleteable}
                  validation={validation}
                  setValidation={setValidation}
                  submit={submit}
                {{/ unless }}
              {{/ unless }}
            />
          </Box>
        </Suspense>
      </>
    {{ else }}
      <></>
    {{/ unless }}
  );
}
