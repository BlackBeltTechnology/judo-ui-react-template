{{> fragment.header.hbs }}

import { lazy, Suspense } from 'react';
import type { Dispatch, SetStateAction } from 'react';
import {
  Grid,
  Button,
  DialogTitle,
  IconButton,
  DialogContent,
  DialogActions,
} from '@mui/material';
import { LoadingButton } from '@mui/lab';
import { useTranslation } from 'react-i18next';
import { useJudoNavigation, MdiIcon, PageHeader } from '~/components';
{{# unless (containerIsEmptyDashboard container) }}
  {{# unless container.table }}
    import { processQueryCustomizer } from '~/utilities';
  {{/ unless }}
  import type { {{ containerComponentName container }}ActionDefinitions } from './{{ containerComponentName container }}';
  import type {
    {{ classDataName container.dataElement '' }},
    {{ classDataName container.dataElement 'Stored' }},
    {{ classDataName container.dataElement 'QueryCustomizer' }}
  } from '~/generated/data-api';
{{/ unless }}

{{# unless (containerIsEmptyDashboard container) }}
  const {{ containerComponentName container }} = lazy(() => import('~/containers/{{ containerPath container }}/{{ containerComponentName container }}'));

  export interface {{ containerComponentName container }}DialogActions extends {{ pageContainerActionDefinitionTypeName container }} {
    {{# each container.pageActionDefinitions as |actionDefinition| }}
      {{# if actionDefinition.isRefreshAction }}
        {{ simpleActionDefinitionName actionDefinition }}?: (queryCustomizer: {{ classDataName container.dataElement 'QueryCustomizer' }}) => Promise<{{ classDataName container.dataElement 'Stored' }}{{# if container.table }}[]{{/ if }}>;
      {{ else }}
        {{# if actionDefinition.isGetTemplateAction }}
          {{ simpleActionDefinitionName actionDefinition }}?: () => Promise<{{ classDataName container.dataElement '' }}>;
        {{ else }}
          {{ simpleActionDefinitionName actionDefinition }}?: () => Promise<void>;
        {{/ if }}
      {{/ if }}
    {{/ each }}
  }
{{/ unless }}

export interface {{ containerComponentName container }}DialogProps {
  ownerData: any;
  title: string;
  onClose: () => void;
  {{# unless (containerIsEmptyDashboard container) }}
    actions: {{ containerComponentName container }}DialogActions;
    isLoading: boolean;
    editMode: boolean;
    refreshCounter: number;
    {{# unless container.table }}
      data: {{ classDataName container.dataElement '' }};
      isFormUpdateable: () => boolean;
      isFormDeleteable: () => boolean;
      storeDiff: (attributeName: keyof {{ classDataName container.dataElement '' }}, value: any) => void;
      validation: Map<keyof {{ classDataName container.dataElement '' }}, string>;
      setValidation: Dispatch<SetStateAction<Map<keyof {{ classDataName container.dataElement '' }}, string>>>;
    {{/ unless }}
  {{/ unless }}
};

// Name: {{ container.name }}
export default (props: {{ containerComponentName container }}DialogProps) => {
  {{# unless (containerIsEmptyDashboard container) }}
    const { t } = useTranslation();
    const { navigate, back } = useJudoNavigation();
    const {
      ownerData,
      title,
      onClose
      {{# unless (containerIsEmptyDashboard container) }},
        actions,
        isLoading,
        editMode,
        refreshCounter
        {{# unless container.table }},
          data,
          isFormUpdateable,
          isFormDeleteable,
          storeDiff,
          validation,
          setValidation
        {{/ unless }}
      {{/ unless }}
    } = props;
    {{# unless container.table }}
      const queryCustomizer: {{ classDataName container.dataElement 'QueryCustomizer' }} = {
        _mask: '{{ getMaskForView container }}',
      };
    {{/ unless }}
  {{/ unless }}

  return (
    <>
      {{# unless (containerIsEmptyDashboard container) }}
        <DialogTitle>
          {title}
          <IconButton
            id="{{ containerComponentName container }}-dialog-close-wrapper"
            aria-label="close"
            onClick={onClose}
            sx={ {
              position: 'absolute',
              right: 8,
              top: 8,
              color: (theme) => theme.palette.grey[500],
            } }
          >
            <MdiIcon path="close" />
          </IconButton>
        </DialogTitle>
        <DialogContent dividers>
          <Suspense>
            <{{ containerComponentName container }}
              actions={actions}
              refreshCounter={refreshCounter}
              {{# unless container.table }}
                data={data}
                isLoading={isLoading}
                editMode={editMode}
                storeDiff={storeDiff}
                isFormUpdateable={isFormUpdateable}
                isFormDeleteable={isFormDeleteable}
                validation={validation}
                setValidation={setValidation}
              {{/ unless }}
            />
          </Suspense>
        </DialogContent>
        <DialogActions>
          <Grid className="page-action" item>
            <Button
              id="{{ containerComponentName container }}-dialog-close-button"
              variant="text"
              onClick={onClose}
              {{# unless (containerIsEmptyDashboard container) }}
              disabled={isLoading}
              {{/ unless }}
            >
                {t('judo.pages.close', { defaultValue: 'Close' })}
            </Button>
          </Grid>
        </DialogActions>
      {{/ unless }}
    </>
  );
};
