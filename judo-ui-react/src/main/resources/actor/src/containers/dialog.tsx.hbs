{{> fragment.header.hbs }}

import { lazy, Suspense{{# if (containerHasCreateAction container) }}, useRef, useState, useCallback{{/ if }} } from 'react';
import type { Dispatch, SetStateAction } from 'react';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import DialogTitle from '@mui/material/DialogTitle';
import IconButton from '@mui/material/IconButton';
import DialogContent from '@mui/material/DialogContent';
import DialogActions from '@mui/material/DialogActions';
import LoadingButton from '@mui/lab/LoadingButton';
{{# if (containerHasCreateAction container) }}
import ButtonGroup from '@mui/material/ButtonGroup';
import Popper from '@mui/material/Popper';
import Grow from '@mui/material/Grow';
import Paper from '@mui/material/Paper';
import MenuList from '@mui/material/MenuList';
import MenuItem from '@mui/material/MenuItem';
import ClickAwayListener from '@mui/material/ClickAwayListener';
{{/ if }}
import { useTranslation } from 'react-i18next';
import { useJudoNavigation, MdiIcon } from '~/components';
import { useConfirmDialog } from '~/components/dialog';
{{# unless (containerIsEmptyDashboard container) }}
  {{# unless container.table }}
    import { processQueryCustomizer } from '~/utilities';
  {{/ unless }}
  import type {
    {{ classDataName container.dataElement '' }},
    {{ classDataName container.dataElement 'Stored' }},
  } from '~/services/data-api/model/{{ classDataName container.dataElement '' }}';
  import type {
    {{ classDataName container.dataElement 'QueryCustomizer' }},
  } from '~/services/data-api/rest/{{ classDataName container.dataElement 'QueryCustomizer' }}';

  import type {
    {{ containerComponentName container }}ActionDefinitions,
    {{ containerComponentName container }}DialogActions,
    {{ containerComponentName container }}DialogProps,
  } from './types';
{{/ unless }}

{{# unless (containerIsEmptyDashboard container) }}
  const {{ containerComponentName container }} = lazy(() => import('~/containers/{{ containerPath container }}/{{ containerComponentName container }}'));
{{/ unless }}

// Name: {{ container.name }}
export default function {{ containerComponentName container }}Dialog({{# unless (containerIsEmptyDashboard container) }}props: {{ containerComponentName container }}DialogProps{{/ unless }}) {
  const { openConfirmDialog } = useConfirmDialog();

  {{# unless (containerIsEmptyDashboard container) }}
    const { t } = useTranslation();
    const { navigate, back } = useJudoNavigation();
    {{# if (containerHasCreateAction container) }}
    const [isCreateDropdownOpen, setIsCreateDropdownOpen] = useState<boolean>(false);
    const createDropdownRef = useRef<HTMLDivElement>(null);
    {{/ if }}
    const {
      ownerData,
      onClose
      {{# unless (containerIsEmptyDashboard container) }},
        actions,
        dataPath,
        isLoading,
        editMode,
        refreshCounter,
        {{# if container.isSelector }}
          selectionDiff,
          setSelectionDiff,
        {{/ if }}
        {{# if container.isRelationSelector }}
          alreadySelected,
        {{/ if }}
        {{# unless container.table }}
          data,
          isFormUpdateable,
          isFormDeleteable,
          storeDiff,
          validation,
          setValidation,
          submit,
        {{/ unless }}
        isDraft
      {{/ unless }}
    } = props;
    {{# if container.view }}
      const queryCustomizer: {{ classDataName container.dataElement 'QueryCustomizer' }} = {
        _mask: actions.getMask?.(),
      };
    {{/ if }}

    {{# if (containerHasCreateAction container) }}
    const handleCreateDropdownToggle = useCallback(() => {
      setIsCreateDropdownOpen((prevOpen) => !prevOpen);
    }, [isCreateDropdownOpen]);
    const handleCreateDropdownClose = useCallback(() => {
      setIsCreateDropdownOpen(false);
    }, [isCreateDropdownOpen]);
    {{/ if }}

  {{/ unless }}

  return (
    <>
      {{# unless (containerIsEmptyDashboard container) }}
        <DialogTitle>
          {actions.getPageTitle ? actions.getPageTitle({{# unless container.table }}data{{/ unless }}) : ''}
          <IconButton
            id="{{ getXMIID container }}-dialog-close-wrapper"
            aria-label="close"
            onClick={onClose}
            sx={ {
              position: 'absolute',
              right: 8,
              top: 8,
              color: (theme) => theme.palette.grey[500],
            } }
          >
            <MdiIcon path="close" />
          </IconButton>
        </DialogTitle>
        <DialogContent dividers>
          <Suspense>
            <{{ containerComponentName container }}
              actions={actions}
              dataPath={dataPath}
              refreshCounter={refreshCounter}
              isLoading={isLoading}
              {{# if container.isSelector }}
                selectionDiff={selectionDiff}
                setSelectionDiff={setSelectionDiff}
              {{/ if }}
              {{# if container.isRelationSelector }}
                alreadySelected={alreadySelected}
              {{/ if }}
              {{# unless container.table }}
                data={data}
                editMode={editMode}
                storeDiff={storeDiff}
                isFormUpdateable={isFormUpdateable}
                isFormDeleteable={isFormDeleteable}
                validation={validation}
                setValidation={setValidation}
                submit={submit}
              {{/ unless }}
              isDraft={isDraft}
            />
          </Suspense>
        </DialogContent>
        <DialogActions>
          {{# each container.actionButtonGroup.buttons as |button| }}
            { {{{ containerButtonAvailable button }}} && actions.{{ simpleActionDefinitionName actionDefinition }} && (
              <Grid className="page-action" item>
                {{# if button.actionDefinition.isCreateAction }}
                {{# unless button.actionDefinition.autoOpenAfterCreate }}
                <ButtonGroup disabled={isLoading} variant={ {{{ variantForButton button }}} } ref={createDropdownRef} sx={ { borderRadius: 0, boxShadow: 0 } } aria-label="split button for create action">
                {{/ unless }}
                {{/ if }}
                <LoadingButton
                  id="{{ getXMIID button }}"
                  loading={isLoading}
                  loadingPosition="start"
                  variant={ {{{ variantForButton button }}} }
                  {{# if (containerButtonHasDisabledConditions button container) }}
                  disabled={ {{{ containerButtonGroupButtonDisabledConditions button container }}} }
                  {{/ if }}
                  {{# if button.icon }}
                    startIcon={
                      {{# if button.actionDefinition.isCreateAction }}
                        isDraft ? <MdiIcon path="check" /> : <MdiIcon path="{{ button.icon.iconName }}" />
                      {{ else }}
                        <MdiIcon path="{{ button.icon.iconName }}" />
                      {{/ if }}
                    }
                  {{/ if }}
                  onClick={ async () => {
                    {{> actor/src/fragments/container/action-call-confirm-check.fragment.hbs button=button dataParam='data' }}
                    {{# if button.actionDefinition.isDeleteAction }}
                      actions.{{ simpleActionDefinitionName actionDefinition }}!();
                    {{ else }}
                      {{# if actionDefinition.isRefreshAction }}
                        await actions.{{ simpleActionDefinitionName actionDefinition }}!(processQueryCustomizer(queryCustomizer));
                      {{ else }}
                        {{# if (isActionAddOrSet actionDefinition) }}
                          await actions.{{ simpleActionDefinitionName actionDefinition }}!(selectionDiff);
                        {{ else }}
                          {{# if actionDefinition.isCreateAction }}
                            await actions.{{ simpleActionDefinitionName actionDefinition }}!({{# if actionDefinition.autoOpenAfterCreate }}true{{/ if }});
                          {{ else }}
                            await actions.{{ simpleActionDefinitionName actionDefinition }}!();
                          {{/ if }}
                        {{/ if }}
                      {{/ if }}
                    {{/ if }}
                  } }
                >
                  {{# if button.actionDefinition.isCreateAction }}
                    <span>{
                      isDraft
                      ? t('judo.dialogs.draft.submit', { defaultValue: 'Ok' })
                      : {{# unless button.actionDefinition.autoOpenAfterCreate }}t('{{ getTranslationKeyForVisualElement button }}', { defaultValue: '{{ button.label }}' }){{ else }}t('judo.pages.create-and-navigate', { defaultValue: 'Create and open' }){{/ unless }}
                    }</span>
                  {{ else }}
                    {{# if button.actionDefinition.isUpdateAction }}
                      <span>{
                        isDraft
                        ? t('judo.dialogs.draft.submit', { defaultValue: 'Ok' })
                        : t('{{ getTranslationKeyForVisualElement button }}', { defaultValue: '{{ button.label }}' })
                      }</span>
                    {{ else }}
                      {{# and button.actionDefinition.isUpdateAction button.actionDefinition.autoCloseOnSave }}
                        <span>{t('judo.pages.save-and-close', { defaultValue: 'Save and close' })}</span>
                      {{ else }}
                        <span>{t('{{ getTranslationKeyForVisualElement button }}', { defaultValue: '{{ button.label }}' })}</span>
                      {{/ and }}
                    {{/ if }}
                  {{/ if }}
                </LoadingButton>
                {{# if button.actionDefinition.isCreateAction }}
                {{# unless button.actionDefinition.autoOpenAfterCreate }}
                {!isDraft && <Button size="small" onClick={handleCreateDropdownToggle} aria-label="dropdown toggle for create dialog">
                  <MdiIcon path="menu-down" />
                </Button>}
                </ButtonGroup>
                <Popper sx={ { zIndex: 1 } } open={isCreateDropdownOpen} anchorEl={createDropdownRef.current} role={undefined} transition disablePortal>
                  {({ TransitionProps, placement }) => (
                    <Grow
                      {...TransitionProps}
                      style={ {
                        transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',
                      } }
                    >
                      <Paper>
                        <ClickAwayListener onClickAway={handleCreateDropdownClose}>
                          <MenuList id="split-button-menu" autoFocusItem>
                            <MenuItem aria-label="create and open" onClick={ async () => {
                              if (actions.{{ simpleActionDefinitionName actionDefinition }}) {
                                await actions.{{ simpleActionDefinitionName actionDefinition }}!(true);
                              }
                            } }>
                              {t('judo.pages.create-and-navigate', { defaultValue: 'Create and open' })}
                            </MenuItem>
                          </MenuList>
                        </ClickAwayListener>
                      </Paper>
                    </Grow>
                  )}
                </Popper>
                {{/ unless }}
                {{/ if }}
              </Grid>
            )}
          {{/ each }}
        </DialogActions>
      {{/ unless }}
    </>
  );
}
