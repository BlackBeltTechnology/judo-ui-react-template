{{# unless (containerIsEmptyDashboard container) }}
  import type { FC } from 'react';
  import type { CustomFormVisualElementProps } from '~/custom';
  {{# each (getContainerApiImports container) as |imp| }}
    import type { {{ classDataName imp '' }}, {{ classDataName imp 'Stored' }} } from '~/services/data-api/model/{{ classDataName imp '' }}';
  {{/ each }}
  {{# each (getEnumDataTypesForContainer container) as |imp| }}
    import type { {{ restParamName imp }} } from '~/services/data-api/model/{{ restParamName imp }}';
  {{/ each }}
  import type { {{ pageContainerActionDefinitionTypeName container }} } from './types';
{{/ unless }}

{{# unless (containerIsEmptyDashboard container) }}
  {{# each (getVisualElementsWithCustomImplementation container) as |ve| }}
      export const {{ getCustomizationComponentInterfaceKey ve }} = '{{ getCustomizationComponentInterface ve }}';
      export interface {{ getCustomizationComponentInterface ve }} extends FC<CustomFormVisualElementProps<{{ classDataName container.dataElement '' }}>> {}
  {{/ each }}

  export const {{ camelCaseNameToInterfaceKey (containerComponentName container) }}_CONTAINER_ACTIONS_HOOK_INTERFACE_KEY = '{{ camelCaseNameToInterfaceKey (containerComponentName container) }}_CONTAINER_ACTIONS_HOOK';
  export type {{ containerComponentName container }}ContainerHook = (
    {{# unless container.table }}
    data: {{ classDataName container.dataElement 'Stored' }},
    editMode: boolean,
    storeDiff: (attributeName: keyof {{ classDataName container.dataElement '' }}, value: any) => void,
    {{/ unless }}
  ) => {{ pageContainerActionDefinitionTypeName container }};

{{ else }}
  export const _ = 'placeholder';
{{/ unless }}
