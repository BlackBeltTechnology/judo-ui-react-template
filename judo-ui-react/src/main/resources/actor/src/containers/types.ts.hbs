{{# unless (containerIsEmptyDashboard container) }}
  import type { Dispatch, SetStateAction } from 'react';
  import type {
    GridFilterModel,
  } from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}';
  import type { JudoRestResponse } from '~/services/data-api/rest/requestResponse';
  import type { EnumOption{{# if (containerHasDateOrDateTimeInput container) }}, BaseDateValidationProps{{/ if }} } from '~/utilities';
  {{# each (getContainerApiImports container) as |imp| }}
    import type { {{ classDataName imp '' }}, {{ classDataName imp 'Stored' }} } from '~/services/data-api/model/{{ classDataName imp '' }}';
    import type { {{ classDataName imp 'QueryCustomizer' }} } from '~/services/data-api/rest/{{ classDataName imp 'QueryCustomizer' }}';
  {{/ each }}
  {{# each (getEnumDataTypesForContainer container) as |imp| }}
    import { {{ restParamName imp }} } from '~/services/data-api/model/{{ restParamName imp }}';
  {{/ each }}
  {{# each container.tables as |table| }}
    import type { {{ componentName table }}ActionDefinitions } from './components/{{ componentName table }}/types';
  {{/ each }}
  {{# each container.links as |link| }}
    import type { {{ componentName link }}ActionDefinitions } from './components/{{ componentName link }}/types';
  {{/ each }}

  export interface {{ pageContainerActionDefinitionTypeName container }}{{# if (containerHasRelationComponents container) }} extends {{# each (getContainerActionsExtends container) as |ext| }}{{ ext }}{{# unless @last}},{{/ unless}}{{/ each }}{{/ if }} {
    getPageTitle?: ({{# unless container.table }}data: {{ classDataName container.dataElement '' }}{{/ unless }}) => string;
    {{# each (getContainerOwnActionDefinitions container) as |actionDefinition| }}
      {{ simpleActionDefinitionName actionDefinition }}?: ({{{ getContainerOwnActionParameters actionDefinition container }}}) => Promise<{{{ getContainerOwnActionReturnType actionDefinition container }}}>;
    {{/ each }}
    {{# each (getOnBlurAttributesForContainer container) as |attributeType| }}
      on{{ firstToUpper attributeType.name }}BlurAction?: ({{{ onBlurActionParams container }}}) => void;
    {{/ each }}
    {{# each (getInputsForContainer container) as |input| }}
      is{{ firstToUpper input.attributeType.name }}Required?: ({{{ inputModifierParams container false }}}) => boolean;
      is{{ firstToUpper input.attributeType.name }}Disabled?: ({{{ inputModifierParams container true }}}) => boolean;
    {{/ each}}
    {{# each (getElementsWithHiddenBy container) as |ve| }}
      is{{ safeName ve }}Hidden?: ({{{ inputModifierParams container false }}}) => boolean;
    {{/ each }}
    {{# each (getDateOrDateTimeInputs container) as |ve| }}
      get{{ firstToUpper ve.attributeType.name }}ValidationProps?: (data: {{ classDataName container.dataElement '' }}) => BaseDateValidationProps;
    {{/ each }}
    {{# each (getEnumsForContainer container) as |ve| }}
      filter{{ firstToUpper ve.attributeType.name }}Options?: (data: {{ classDataName container.dataElement '' }}, options: EnumOption<keyof typeof {{ restParamName ve.attributeType.dataType }}>[]) => EnumOption<keyof typeof {{ restParamName ve.attributeType.dataType }}>[];
    {{/ each }}
    {{# if container.view }}
      getMask?: () => string;
    {{/ if }}
  }

  export interface {{ containerComponentName container }}PageActions extends {{ pageContainerActionDefinitionTypeName container }} {
    {{# each container.pageActionDefinitions as |actionDefinition| }}
      {{# if actionDefinition.isRefreshAction }}
        {{ simpleActionDefinitionName actionDefinition }}?: (queryCustomizer: {{ classDataName container.dataElement 'QueryCustomizer' }}) => Promise<JudoRestResponse<{{ classDataName container.dataElement 'Stored' }}{{# if container.table }}[]{{/ if }}>>;
      {{ else }}
        {{ simpleActionDefinitionName actionDefinition }}?: () => Promise<void>;
      {{/ if }}
    {{/ each }}
  }

  export interface {{ containerComponentName container }}PageProps {
    {{# unless (containerIsEmptyDashboard container) }}
      actions: {{ containerComponentName container }}PageActions;
      isLoading: boolean;
      editMode: boolean;
      refreshCounter: number;
      {{# unless container.table }}
        data: {{ classDataName container.dataElement 'Stored' }};
        isFormUpdateable: () => boolean;
        isFormDeleteable: () => boolean;
        storeDiff: (attributeName: keyof {{ classDataName container.dataElement '' }}, value: any) => void;
        validation: Map<keyof {{ classDataName container.dataElement '' }}, string>;
        setValidation: Dispatch<SetStateAction<Map<keyof {{ classDataName container.dataElement '' }}, string>>>;
        submit: () => Promise<void>;
      {{/ unless }}
    {{/ unless }}
  };

  export interface {{ containerComponentName container }}DialogActions extends {{ pageContainerActionDefinitionTypeName container }} {
    {{# each container.pageActionDefinitions as |actionDefinition| }}
      {{ simpleActionDefinitionName actionDefinition }}?: ({{{ getContainerOwnActionParameters actionDefinition container }}}) => Promise<{{{ getContainerOwnActionReturnType actionDefinition container }}}>;
    {{/ each }}
  }

  export interface {{ containerComponentName container }}DialogProps {
    ownerData: any;
    onClose: () => Promise<void>;
    {{# unless (containerIsEmptyDashboard container) }}
      actions: {{ containerComponentName container }}DialogActions;
      isLoading: boolean;
      editMode: boolean;
      refreshCounter: number;
      {{# if container.isRelationSelector }}alreadySelected: {{ classDataName container.dataElement 'Stored' }}[];{{/ if }}
      {{# if container.isSelector }}
        selectionDiff: {{ classDataName container.dataElement 'Stored' }}[];
        setSelectionDiff: Dispatch<SetStateAction<{{ classDataName container.dataElement 'Stored' }}[]>>;
      {{/ if }}
      {{# unless container.table }}
        data: {{ classDataName container.dataElement 'Stored' }};
        isFormUpdateable: () => boolean;
        isFormDeleteable: () => boolean;
        storeDiff: (attributeName: keyof {{ classDataName container.dataElement '' }}, value: any) => void;
        validation: Map<keyof {{ classDataName container.dataElement '' }}, string>;
        setValidation: Dispatch<SetStateAction<Map<keyof {{ classDataName container.dataElement '' }}, string>>>;
        submit: () => Promise<void>;
      {{/ unless }}
      isDraft?: boolean;
    {{/ unless }}
  };

  export interface {{ containerComponentName container }}PageActions extends {{ pageContainerActionDefinitionTypeName container }} {
    {{# each container.pageActionDefinitions as |actionDefinition| }}
      {{# if actionDefinition.isRefreshAction }}
        {{ simpleActionDefinitionName actionDefinition }}?: (queryCustomizer: {{ classDataName container.dataElement 'QueryCustomizer' }}) => Promise<JudoRestResponse<{{ classDataName container.dataElement 'Stored' }}{{# if container.table }}[]{{/ if }}>>;
      {{ else }}
        {{ simpleActionDefinitionName actionDefinition }}?: () => Promise<void>;
      {{/ if }}
    {{/ each }}
  }
{{ else }}
  export const _ = 'placeholder';
{{/ unless }}

export interface {{ containerComponentName container }}Props {
  {{# unless (containerIsEmptyDashboard container) }}
    refreshCounter: number;
    isLoading: boolean;
    actions: {{ pageContainerActionDefinitionTypeName container }};
    {{# if container.isSelector }}
      selectionDiff: {{ classDataName container.dataElement 'Stored' }}[];
      setSelectionDiff: Dispatch<SetStateAction<{{ classDataName container.dataElement 'Stored' }}[]>>;
    {{/ if }}
    {{# if container.isRelationSelector }}alreadySelected: {{ classDataName container.dataElement 'Stored' }}[];{{/ if }}
    {{# unless container.table }}
      data: {{ classDataName container.dataElement 'Stored' }};
      isFormUpdateable: () => boolean;
      isFormDeleteable: () => boolean;
      storeDiff: (attributeName: keyof {{ classDataName container.dataElement '' }}, value: any) => void;
      editMode: boolean;
      validation: Map<keyof {{ classDataName container.dataElement '' }}, string>;
      setValidation: Dispatch<SetStateAction<Map<keyof {{ classDataName container.dataElement '' }}, string>>>;
      submit: () => Promise<void>;
    {{/ unless }}
    isDraft?: boolean;
  {{/ unless }}
};
