import { type FC } from 'react';
import type { BundleContext } from '@pandino/pandino-api';
import { useTranslation } from 'react-i18next';
import { CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY, type GenericProxyProps, type TableProxyProps, type LinkProxyProps } from '~/custom';
import { useViewData } from '~/hooks';
import { useJudoNavigation } from '~/components';
import {
{{# each (getVisualElementsWithCustomImplementation container) as |ve| }}
  {{ getCustomizationComponentInterfaceKey ve }},
{{/ each }}
} from '~/containers/{{ containerPath container }}/customization';
import { {{ pageContainerActionDefinitionTypeName container }} } from '~/containers/{{ containerPath container }}/types';
{{# each (getContainerApiImports container) as |imp| }}
import type { {{ classDataName imp '' }}, {{ classDataName imp 'Stored' }} } from '~/services/data-api/model/{{ classDataName imp '' }}';
{{/ each }}

{{# each (getVisualElementsWithCustomImplementation container) as |ve| }}
/**
 * XMIID: {{ getXMIID ve }}
 * Name: {{ ve.name }}
 *
 * Notes:
 * Don't forget to remove unused hooks, and related imports afterwards to reduce build time and bundle size!
 */
export function register{{ getCustomizationComponentInterface ve }}CustomImplementation(context: BundleContext) {
  context.registerService<FC<{{{ getProxyPropsForCustomImplementation ve }}}>>(CUSTOM_VISUAL_ELEMENT_INTERFACE_KEY, {{ firstToLower (getCustomizationComponentInterface ve) }}CustomImplementation, {
    component: {{ getCustomizationComponentInterfaceKey ve }},
  });
}

const {{ firstToLower (getCustomizationComponentInterface ve) }}CustomImplementation: FC<{{{ getProxyPropsForCustomImplementation ve }}}> = (props) => {
  const { {{ getCustomImplementationProps ve }} } = props;

  // call other hooks here
  const { t } = useTranslation();
  const { navigate, back } = useJudoNavigation();
  const { getLatestViewData } = useViewData();

  return (
    <>
      {/* implement component here */}
    </>
  );
};

{{/ each }}
