{{# unless (containerIsEmptyDashboard page.container) }}
import type { BundleContext } from '@pandino/pandino-api';
import { useTranslation } from 'react-i18next';
import { useViewData } from '~/hooks';
import { useJudoNavigation } from '~/components';
import { {{ camelCaseNameToInterfaceKey (pageName page) }}_ACTIONS_HOOK_INTERFACE_KEY, type {{ containerComponentName page.container }}ActionsHook } from '~/{{# if page.openInDialog }}dialogs{{ else }}pages{{/ if }}/{{ pagePath page }}/customization';
{{# if (getServiceImplForPage page) }}
import { judoAxiosProvider } from '~/services/data-axios/JudoAxiosProvider';
import { {{ getServiceClassForPage page }} } from '~/services/data-axios/{{ getServiceClassForPage page }}';
{{/ if }}
{{# each (getRelatedPages page) as |relatedPage| }}
import { {{ calculateNavigationRoute relatedPage }} } from '~/routes';
{{/ each }}
{{# each (getRelatedDialogs page false) as |relatedDialog| }}
import { use{{ pageName relatedDialog }} } from '~/dialogs/{{ pagePath relatedDialog }}/hooks';
{{/ each }}
{{# each (getApiImportsForPage page) as |imp| }}
import type { {{ classDataName imp '' }}, {{ classDataName imp 'Stored' }} } from '~/services/data-api/model/{{ classDataName imp '' }}';
import type { {{ classDataName imp 'QueryCustomizer' }} } from '~/services/data-api/rest/{{ classDataName imp 'QueryCustomizer' }}';
{{/ each }}
{{# each (getEnumDataTypesForPage page) as |imp| }}
import { {{ restParamName imp }} } from '~/services/data-api/model/{{ restParamName imp }}';
{{/ each }}

/**
 * XMIID: {{ getXMIID page }}
 * Name: {{ page.name }}
 *
 * Notes:
 * Don't forget to remove unused hooks, and related imports afterwards to reduce build time and bundle size!
 */
export function register{{ pageName page }}ActionsHook(context: BundleContext) {
  context.registerService<{{ containerComponentName page.container }}ActionsHook>({{ camelCaseNameToInterfaceKey (pageName page) }}_ACTIONS_HOOK_INTERFACE_KEY, {{ pageName page }}ActionsHook);
}

const {{ pageName page }}ActionsHook: {{ containerComponentName page.container }}ActionsHook = ({{ pageHookCallParams page }}) => {
  // call other hooks here
  const { t } = useTranslation();
  const { navigate, back } = useJudoNavigation();
  const { getLatestViewData } = useViewData();
  {{# each (getRelatedDialogs page false) as |relatedDialog| }}
  const open{{ pageName relatedDialog }} = use{{ pageName relatedDialog }}();
  {{/ each }}
  {{# if (getServiceImplForPage page) }}
  const {{ firstToLower (getServiceClassForPage page) }} = new {{ getServiceClassForPage page }}(judoAxiosProvider);
  {{/ if }}

  return {
    // implement actions here
  };
};
{{ else }}
// EMPTY DASHBOARD
{{/ unless }}
