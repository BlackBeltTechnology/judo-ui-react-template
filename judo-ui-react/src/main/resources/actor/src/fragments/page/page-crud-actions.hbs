{{# if page.dataElement.isUpdatable }}
    {editMode && isFormUpdateable() && (
        <Grid>
            <Button
                id="page-action-edit-cancel"
                variant="outlined"
                onClick={() => {
                    setEditMode(false);
                    fetchData();
                }}
                disabled={isLoading}
            >
                <MdiIcon path="cancel" />
                {t('judo.pages.cancel', { defaultValue: 'Cancel' })}
            </Button>
        </Grid>
    )}
    {editMode && isFormUpdateable() && (
        <Grid>
            <Button id="page-action-edit-save" onClick={() => saveData()} disabled={isLoading}>
                <MdiIcon path="content-save" />
                {t('judo.pages.save', { defaultValue: 'Save' })}
            </Button>
        </Grid>
    )}
{{/ if }}
{{# if page.dataElement.isRefreshable }}
    {!editMode && (
        <Grid>
            <Button id="page-action-refresh" onClick={() => fetchData()} disabled={isLoading}>
                <MdiIcon path="refresh" />
                {t('judo.pages.refresh', { defaultValue: 'Refresh' })}
            </Button>
        </Grid>
    )}
{{/ if }}
{{# each page.pageActions as |action| }}
    {{# if action.isDeleteAction }}
        {!editMode && isFormDeleteable() && (
            <Grid>
                <Button
                    id="page-action-delete"
                    onClick={() => {{ actionFunctionName action page }}({{# if (hasDataElementOwner action.dataElement) }}{ __signedIdentifier: signedIdentifier } as JudoIdentifiable<{{ classDataName page.dataElement.owner '' }}>, {{/ if }}data, () => {
                        {{# if (isSingleAccessPage page) }}
                            navigate('/{{ page.dataElement.name }}/create');
                        {{ else }}
                            back();
                        {{/ if }}
                    })}
                    disabled={isLoading || !data.__deleteable}
                >
                    <MdiIcon path="delete" />
                    {t('judo.pages.delete', { defaultValue: 'Delete' })}
                </Button>
            </Grid>
        )}
    {{/ if }}
{{/ each }}
