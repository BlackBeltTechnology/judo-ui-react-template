{{# if page.dataElement.isUpdatable }}
    {editMode && isFormUpdateable() && (
        <Grid className="page-action" item>
            <Button
                id="page-action-edit-cancel"
                variant="outlined"
                onClick={() => {
                    setEditMode(false);
                    fetchData();
                }}
                disabled={isLoading}
            >
                <MdiIcon path="cancel" />
                {t('judo.pages.cancel', { defaultValue: 'Cancel' })}
            </Button>
        </Grid>
    )}
    {editMode && isFormUpdateable() && (
        <Grid className="page-action" item>
            <LoadingButton loading={isLoading} loadingPosition="start" id="page-action-edit-save" startIcon={<MdiIcon path="content-save" />} onClick={() => saveData()}>
                <span>{t('judo.pages.save', { defaultValue: 'Save' })}</span>
            </LoadingButton>
        </Grid>
    )}
{{/ if }}
{{# if page.dataElement.isRefreshable }}
    {!editMode && (
        <Grid className="page-action" item>
            <LoadingButton loading={isLoading} loadingPosition="start" id="page-action-refresh" startIcon={<MdiIcon path="refresh" />} onClick={() => fetchData()}>
                <span>{t('judo.pages.refresh', { defaultValue: 'Refresh' })}</span>
            </LoadingButton>
        </Grid>
    )}
{{/ if }}
{{# each page.pageActions as |action| }}
    {{# if action.isDeleteAction }}
        {!editMode && isFormDeleteable() && (
            <Grid className="page-action" item>
                <LoadingButton
                    id="page-action-delete"
                    loading={isLoading}
                    loadingPosition="start"
                    startIcon={<MdiIcon path="delete" />}
                    onClick={() => {{ actionFunctionName action page }}({{# if (hasDataElementOwner action.dataElement) }}{ __signedIdentifier: signedIdentifier } as JudoIdentifiable<{{ classDataName page.dataElement.owner '' }}>, {{/ if }}data, () => {
                        {{# if (isSingleAccessPage page) }}
                            navigate('/{{ page.dataElement.name }}/create');
                        {{ else }}
                            back();
                        {{/ if }}
                    })}
                    disabled={!data.__deleteable}
                >
                    <span>{t('judo.pages.delete', { defaultValue: 'Delete' })}</span>
                </LoadingButton>
            </Grid>
        )}
    {{/ if }}
{{/ each }}
