const {{ table.dataElement.name }}RowActions: TableRowAction<{{ classDataName table.dataElement.target 'Stored' }}>[] = [
    {{# each table.rowActions as |action| }}
        {{# if action.isRemoveAction }}
            {
                id: '{{ createId action }}',
                label: t('judo.pages.table.remove', { defaultValue: 'Remove' }) as string,
                icon: <MdiIcon path="link_off" />,
                {{# if table.dataElement.isRelationKindAssociation }}
                    disabled: (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{# if table.enabledBy }}!ownerData.{{ table.enabledBy.name }} ||{{/ if }} editMode,
                    action: async (row: {{ classDataName table.dataElement.target 'Stored' }}) => {
                        {{ actionFunctionName action }}({{# if (hasDataElementOwner action.dataElement) }}ownerData, {{/ if }}row, () => fetchOwnerData())
                    },
                {{ else }}
                    action: async (row: {{ classDataName table.dataElement.target 'Stored' }}) => {
                        storeDiff('{{ table.dataElement.name }}', [...(ownerData.{{ table.dataElement.name }} || []).filter((e: {{ classDataName table.dataElement.target 'Stored' }}) => e.__signedIdentifier !== row.__signedIdentifier)]);
                    },
                {{/ if }}
            },
        {{/ if }}
        {{# if action.isDeleteAction }}
            {
                id: '{{ createId action }}',
                label: t('judo.pages.table.delete', { defaultValue: 'Delete' }) as string,
                icon: <MdiIcon path="{{ action.icon.name }}" />,
                action: async (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{ actionFunctionName action }}({{# if (hasDataElementOwner action.dataElement) }}ownerData, {{/ if }}row, () => fetchOwnerData()),
                disabled: (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{# if table.enabledBy }}!ownerData.{{ table.enabledBy.name }} ||{{/ if }} editMode || !row.__deleteable,
            },
        {{/ if }}
        {{# if action.isCallOperationAction }}
            {
                id: '{{ createId action }}',
                label: t('{{ getTranslationKeyForAction action }}', { defaultValue: '{{ action.label }}' }) as string,
                icon: <MdiIcon path="{{ action.icon.name }}" />,
                action: async (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{ actionFunctionName action }}({{# if action.operation.isMapped }}row, {{/ if }}() => fetchOwnerData()),
                disabled: (row: {{ classDataName table.dataElement.target 'Stored' }}) => {{# if action.enabledBy }}!row.{{ action.enabledBy.name }} ||{{/ if }}{{# if action.hiddenBy }} row.{{ action.hiddenBy.name }} ||{{/ if }} editMode,
            },
        {{/ if }}
    {{/ each }}
];
