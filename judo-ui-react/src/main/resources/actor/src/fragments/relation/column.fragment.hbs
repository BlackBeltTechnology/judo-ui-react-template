width: {{ columnWidth column }},
type: '{{ columnType column }}',
{{# if (isColumnEditable column) }}
editable: true,
renderEditCell: (props: GridRenderEditCellParams) => {
  let error: string | undefined;
  if (props.row && rowValidation.has(props.row.__identifier)) {
    const errors = rowValidation.get(props.row.__identifier);
    error = errors?.get('{{ column.attributeType.name }}');
  }
  return (
    <NameEditInputCell { ...props } error={error} />
  );
},
{{/ if }}
filterable: {{ isUseInlineColumnFilters }} && {{# if (isColumnFilterable column) }}true{{ else }}false{{/ if }},
{{# unless (isColumnSortable column) }}
sortable: false,
{{/ unless }}
{{# if (isColumnString column) }}
{{# if isUseInlineColumnFilters }}
filterOperators: stringColumnOperators,
{{/ if }}
{{/ if }}
{{# if (isColumnBoolean column) }}
align: 'center',
renderCell: (params: GridRenderCellParams<any, {{ classDataName (getReferenceClassType ref) 'Stored' }}>) => {
  if (params.row.{{ column.attributeType.name }} === null || params.row.{{ column.attributeType.name }} === undefined) {
    return <MdiIcon className="undefined" path="minus" color="#ddd" />;
  } else if (params.row.{{ column.attributeType.name }}) {
    return <MdiIcon className="true" path="check-circle" color="green" />;
  }
  return <MdiIcon className="false" path="close-circle" color="red" />;
},
{{# if isUseInlineColumnFilters }}
filterOperators: booleanColumnOperators,
{{/ if }}
{{/ if }}
{{# if (isColumnNumeric column) }}
valueFormatter: (value?: number) => {
  if (value === null || value === undefined) {
    return '';
  }
  {{# if column.formatValue }}
  return new Intl.NumberFormat(l10nLocale).format(value);
  {{ else }}
  return value;
  {{/ if }}
},
{{# if isUseInlineColumnFilters }}
filterOperators: numericColumnOperators,
{{/ if }}
{{/ if }}
{{# if (isColumnEnumeration column) }}
valueFormatter: (value?: string) => {
  if (value !== undefined && value !== null) {
    return t(`enumerations.{{ restParamName column.attributeType.dataType }}.${value}`, { defaultValue: value });
  }
},
{{# if isUseInlineColumnFilters }}
  filterOperators: singleSelectColumnOperators,
  valueOptions: [
    {{# each column.attributeType.dataType.members as |member| }}
    { value: '{{ member.name }}', label: t('enumerations.{{ restParamName column.attributeType.dataType }}.{{ member.name }}', { defaultValue: '{{ member.name }}' }) as string },
    {{/ each }}
  ],
{{/ if }}
{{/ if }}
{{# if (isColumnTimestamp column) }}
valueFormatter: (value?: Date) => {
  return value && new Intl.DateTimeFormat(l10nLocale, {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  }).format(value);
},
{{# if isUseInlineColumnFilters }}
filterOperators: dateTimeColumnOperators,
{{/ if }}
{{/ if }}
{{# if (isColumnTime column) }}
valueFormatter: (value?: Date) => {
  return value && new Intl.DateTimeFormat(l10nLocale, {
    hour: '2-digit',
    minute: '2-digit',
    hour12: false
  }).format(value);
},
{{/ if }}
{{# if (isColumnDate column) }}
valueFormatter: (value?: Date) => {
  return value && new Intl.DateTimeFormat(l10nLocale, { year: 'numeric', month: '2-digit', day: '2-digit' }).format(value);
},
{{# if isUseInlineColumnFilters}}
filterOperators: dateColumnOperators,
{{/ if }}
{{/ if }}
{{# if (isColumnBinary column) }}
align: 'left',
renderCell: (params: GridRenderCellParams<any, {{ classDataName (getReferenceClassType ref) 'Stored' }}>) => {
  return params.row.{{ column.attributeType.name }}
    ? <ButtonGroup size="small" variant="outlined">
        <Button id="{{ createId column }}-download" startIcon={<MdiIcon path="file-document-outline" {{# neq column.attributeType.dataType.mimeTypes.size 0 }}mimeType={ { type: '{{ column.attributeType.dataType.mimeTypes.[0].type }}', subType: '{{ column.attributeType.dataType.mimeTypes.[0].subType }}' } }{{/ neq }} />} onClick={ (event: any) => {
          event.preventDefault();
          event.stopPropagation();
          downloadFile(params.row, '{{ column.attributeType.name }}', 'attachment');
        } }>
          { extractFileNameFromToken(params.row.{{ column.attributeType.name }}) }
        </Button>
        <Button
          id="{{ createId column }}-view"
          onClick={ (event: any) => {
            event.preventDefault();
            event.stopPropagation();
            downloadFile(params.row, '{{ column.attributeType.name }}', 'inline');
          } }
        >
          <MdiIcon path="eye" sx={ { mr: 0.5 } } />
        </Button>
      </ButtonGroup>
    : <MdiIcon path="minus" />;
},
{{/ if }}
{{# unless (isColumnSortable column) }}
description: t('judo.pages.table.column.not-sortable', { defaultValue: 'This column is not sortable.' }) as string,
{{/ unless }}
