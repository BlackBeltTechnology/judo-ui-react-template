const [{{ rel.dataElement.name }}SortModel, set{{ ucFirst rel.dataElement.name }}SortModel] = useState<GridSortModel>({{{ getDefaultSortParams rel.defaultSortColumn rel.columns }}});

const {{ rel.dataElement.name }}Columns: GridColDef<{{ classDataName rel.dataElement.target 'Stored' }}>[] = [
    {{# each rel.columns as |column| }}
        {
            ...baseColumnConfig,
            field: '{{ column.attributeType.name }}',
            headerName: t('{{ idToTranslationKey column.fQName application }}', { defaultValue: '{{ column.label }}' }) as string,
            headerClassName: 'data-grid-column-header',
            {{> actor/src/fragments/relation/column.fragment.hbs column=column dataElement=rel.dataElement name=rel.name }}
        },
    {{/ each }}
];

const {{ rel.dataElement.name }}RangeFilterOptions: FilterOption[] = [
    {{# each rel.filters as |filter| }}
        {{> actor/src/fragments/table/filter-option.fragment.hbs filter=filter application=application }}
    {{/ each }}
];

const {{ rel.dataElement.name }}InitialQueryCustomizer: {{ classDataName rel.dataElement.target 'QueryCustomizer' }} = {
    _mask: '{{ rel.formattedMaskForRange }}',
    _orderBy: {{ rel.dataElement.name }}SortModel.length ? [
        {
            attribute: {{ rel.dataElement.name }}SortModel[0].field,
            descending: {{ rel.dataElement.name }}SortModel[0].sort === 'desc',
        },
    ] : [],
};
