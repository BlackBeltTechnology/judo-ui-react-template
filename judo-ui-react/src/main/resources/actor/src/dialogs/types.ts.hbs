{{# unless (containerIsEmptyDashboard page.container) }}
  import type { Dispatch, SetStateAction } from 'react';
  {{# each (getApiImportsForPage page) as |imp| }}
    import type { {{ classDataName imp '' }}, {{ classDataName imp 'Stored' }} } from '~/services/data-api/model/{{ classDataName imp '' }}';
  {{/ each }}
  {{# each (getEnumDataTypesForPage page) as |imp| }}
    import { {{ restParamName imp }} } from '~/services/data-api/model/{{ restParamName imp }}';
  {{/ each }}
  import type { {{ containerComponentName page.container }}DialogActions } from '~/containers/{{ containerPath page.container }}/types';
  import type { DialogResultReason } from '~/utilities';

  export type {{ containerComponentName page.container }}DialogActionsExtended = {{ containerComponentName page.container }}DialogActions & {
    {{# each (getAllCallOperationActions page) as |action| }}
      post{{ firstToUpper (simpleActionDefinitionName action.actionDefinition) }}?: ({{{ postCallOperationActionParams page action.actionDefinition }}}) => Promise<void>;
    {{/ each }}
    {{# with (getRefreshActionDefinitionForContainer page.container) as |refreshActionDefinition| }}
      post{{ firstToUpper (simpleActionDefinitionName refreshActionDefinition) }}?: ({{{ postRefreshActionParams page refreshActionDefinition }}}) => Promise<void>;
    {{/ with }}
    {{# with (getGetTemplateActionDefinitionForContainer page.container) as |getTemplateActionDefinition| }}
      post{{ firstToUpper (simpleActionDefinitionName getTemplateActionDefinition) }}?: ({{{ postGetTemplateActionParams page getTemplateActionDefinition }}}) => Promise<void>;
    {{/ with }}
    {{# with (getCreateDefinitionForContainer page.container) as |createActionDefinition| }}
      post{{ firstToUpper (simpleActionDefinitionName createActionDefinition) }}?: ({{{ postCreateActionParams page createActionDefinition }}}) => Promise<void>;
    {{/ with }}
  };

  export interface {{ pageName page }}Props {
    ownerData: any;
    {{# and (isPageDataElementUnmappedSingle page) page.container.view }}data: {{ classDataName (getReferenceClassType page) '' }};{{/ and }}
    {{# if page.container.isRelationSelector }}alreadySelected: {{ classDataName (getReferenceClassType page) 'Stored' }}[];{{/ if }}
    {{# unless page.container.isSelector }}templateDataOverride?: {{# if page.container.view }}{{ classDataName (getReferenceClassType page) 'Stored' }}{{ else }}Partial<{{ classDataName (getReferenceClassType page) '' }}>{{/ if }};{{/ unless }}
    isDraft?: boolean;
    ownerValidation?: () => Promise<void>;
    onClose: () => Promise<void>;
    {{# if (pageHasOutputTarget page) }}
    onSubmit: (result?: {{ classDataName (getPageOutputTarget page) 'Stored' }}, reason?: DialogResultReason, openCreated?: boolean) => Promise<void>;
    {{ else }}
    onSubmit: (result?: {{ dialogDataType page }}{{# if page.container.table }}[]{{/ if }}, reason?: DialogResultReason, openCreated?: boolean) => Promise<void>;
    {{/ if }}
    {{# unless page.container.table}}
    maskRequest?: string;
    {{/ unless }}
  }
{{ else }}
  export const _ = 'placeholder';
{{/ unless }}
