import { lazy, Suspense } from 'react';
import { useDialog } from '~/components/dialog';
import type { DialogResult } from '~/utilities';
{{# each (getApiImportsForPage page) as |imp| }}
  import type { {{ classDataName imp '' }}, {{ classDataName imp 'Stored' }} } from '~/services/data-api/model/{{ classDataName imp '' }}';
{{/ each }}

export const use{{ pageName page }} = (): ({{{ getDialogOpenParameters page }}}) => Promise<DialogResult<
  {{# if (pageHasOutputTarget page) }}
    {{# if (pageHasOutputTarget page) }}{{ classDataName (getPageOutputTarget page) 'Stored' }}{{ else }}void{{/ if }}
  {{ else }}
    {{ dialogDataType page }}{{# if page.container.table }}[]{{/ if }}
  {{/ if }}
>> => {
  const [createDialog, closeDialog] = useDialog();

  const {{ pageName page }} = lazy(() => import('~/dialogs/{{ pagePath page }}'));

  return ({{{ getDialogOpenParameters page }}}) => new Promise((resolve) => {
    createDialog({
      {{# if page.dialogSize }}
          fullWidth: true,
          maxWidth: '{{ toLower page.dialogSize.name }}',
      {{/ if }}
      onClose: async (event: object, reason: string) => {
        if (reason !== 'backdropClick') {
          await closeDialog();
          resolve({
            result: 'close',
          });
        }
      },
      children: (
        <Suspense>
          <{{ pageName page }}
            ownerData={ownerData}
            {{# and (isPageDataElementUnmappedSingle page) page.container.view }}data={data}{{/ and }}
            {{# if page.container.isRelationSelector}}
            alreadySelected={alreadySelected}
            {{/ if }}
            {{# unless page.container.isSelector }}
            templateDataOverride={templateDataOverride}
            {{/ unless }}
            isDraft={isDraft}
            {{# unless page.container.table }}
            ownerValidation={ownerValidation}
            {{/ unless }}
            onClose={async () => {
              await closeDialog();
              resolve({
                result: 'close',
              });
            }}
            onSubmit={async (result, isDraft, openCreated) => {
              await closeDialog();
              resolve({
                result: isDraft ? 'submit-draft' : 'submit',
                openCreated,
                {{# if (dialogHasResult page) }}
                data: result,
                {{/ if }}
              });
            }}
          />
        </Suspense>
      ),
    });
  });
}
