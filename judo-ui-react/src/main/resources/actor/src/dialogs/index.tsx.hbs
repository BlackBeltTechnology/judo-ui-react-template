{{> fragment.header.hbs }}

import { useCallback, useEffect, useRef, useState, lazy, Suspense } from 'react';
{{# unless (containerIsEmptyDashboard page.container) }}
  import { OBJECTCLASS } from '@pandino/pandino-api';
  import type { JudoIdentifiable } from '@judo/data-api-common';
  import { useTranslation } from 'react-i18next';
  import { useParams } from 'react-router-dom';
  import { useSnackbar } from 'notistack';
  import type { GridFilterModel } from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}';
  import type { Filter, FilterOption } from '~/components-api';
  import { useJudoNavigation } from '~/components';
  import { useConfirmDialog, useDialog, useFilterDialog } from '~/components/dialog';
  import { toastConfig } from '~/config';
  import {
    passesLocalValidation,
    processQueryCustomizer,
    uiDateToServiceDate,
    uiTimeToServiceTime,
    useErrorHandler,
    ERROR_PROCESSOR_HOOK_INTERFACE_KEY,
  } from '~/utilities';
  import type {
    DialogResult,
  } from '~/utilities';
  {{# each (getRelatedPages page) as |relatedPage| }}
    import { routeTo{{ pageName relatedPage }} } from '~/routes';
  {{/ each }}
  {{# each (getRelatedDialogs page) as |relatedDialog| }}
    import { use{{ pageName relatedDialog }} } from '~/dialogs/{{ pagePath relatedDialog }}';
  {{/ each }}
  import type { {{ containerComponentName page.container }}DialogActions } from '~/containers/{{ containerPath page.container }}/{{ containerComponentName page.container }}DialogContainer';
  import type {
    {{# each (getApiImportsForPage page) as |imp| }}
      {{ imp }},
    {{/ each }}
  } from '~/generated/data-api';
  {{# if (getServiceImplForPage page) }}
      import { {{ getServiceImplForPage page }} } from '~/generated/data-axios';
  {{/ if }}
{{/ unless }}

{{# unless (containerIsEmptyDashboard page.container) }}
  export const use{{ pageName page }} = (ownerData: any): ({{{ getDialogOpenParameters page }}}) => Promise<DialogResult<{{# if page.container.table }}Array<{{/ if }}{{ classDataName (getReferenceClassType page) 'Stored' }}{{# if page.container.table }}>{{/ if }}>> => {
    const [createDialog, closeDialog] = useDialog();

    return ({{{ getDialogOpenParameters page }}}) => new Promise((resolve) => {
      createDialog({
        {{# if page.dialogSize }}
            fullWidth: true,
            maxWidth: '{{ toLower page.dialogSize.name }}',
        {{/ if }}
        onClose: (event: object, reason: string) => {
          if (reason !== 'backdropClick') {
            closeDialog();
            resolve({
              result: 'close',
            });
          }
        },
        children: (
          <{{ pageName page }}
            ownerData={ownerData}
            {{# if page.container.view}}
            targetData={targetData}
            {{/ if }}
            {{# if page.container.isRelationSelector}}
            alreadySelected={alreadySelected}
            {{/ if }}
            onClose={() => {
              closeDialog();
              resolve({
                result: 'close',
              });
            }}
            onSubmit={(result) => {
              closeDialog();
              resolve({
                result: 'submit',
                data: result,
              });
            }}
          />
        ),
      });
    });
  }

  {{# unless page.container.table }}
    {{# if isDebugPrint }}// include: actor/src/fragments/page/payload-converter.fragment.hbs{{/ if }}
    {{> actor/src/fragments/page/payload-converter.fragment.hbs classType=page.dataElement.target page=page }}
  {{/ unless }}

  const {{ containerComponentName page.container }}DialogContainer = lazy(() => import('~/containers/{{ containerPath page.container }}/{{ containerComponentName page.container }}DialogContainer'));
{{/ unless }}

export interface {{ pageName page }}Props {
  ownerData: any;
  {{# if page.container.view}}targetData: JudoIdentifiable<any>{{/ if }}
  {{# if page.container.isRelationSelector }}alreadySelected: {{ classDataName (getReferenceClassType page) 'Stored' }}[]{{/ if }}
  onClose: () => void;
  onSubmit: (result: {{# if page.container.table }}Array<{{/ if }}{{ classDataName (getReferenceClassType page) 'Stored' }}{{# if page.container.table }}>{{/ if }}) => void;
}

// Name: {{ page.name }}
export default function {{ pageName page }}(props: {{ pageName page }}Props) {
  const { ownerData, {{# if page.container.view}}targetData, {{/ if }}{{# if page.container.isRelationSelector }}alreadySelected, {{/ if }}onClose, onSubmit } = props;

  {{# unless (containerIsEmptyDashboard page.container) }}
    // Hooks section
    const { t } = useTranslation();
    const { enqueueSnackbar } = useSnackbar();
    const { navigate, back } = useJudoNavigation();
    const { openFilterDialog } = useFilterDialog();
    const { openConfirmDialog } = useConfirmDialog();
    const handleFetchError = useErrorHandler(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Fetch))`);
    const handleUpdateError = useErrorHandler<{{ classDataName (getReferenceClassType page) '' }}>(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Update)(component={{ pageName page }}))`);
    const handleDeleteError = useErrorHandler(`(&(${OBJECTCLASS}=${ERROR_PROCESSOR_HOOK_INTERFACE_KEY})(operation=Delete)(component={{ pageName page }}))`);
    const [createDialog, closeDialog] = useDialog();

    // State section
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [editMode, setEditMode] = useState<boolean>({{# if page.container.form }}true{{ else }}false{{/ if }});
    const [refreshCounter, setRefreshCounter] = useState<number>(0);
    const [data, setData] = useState<{{ classDataName (getReferenceClassType page) 'Stored' }}{{# if page.container.table }}[]{{/ if }}>({{# if page.container.table }}[]{{ else }}{} as {{ classDataName (getReferenceClassType page) 'Stored' }}{{/ if }});
    {{# if page.container.isSelector }}
      const [selectionDiff, setSelectionDiff] = useState<{{ classDataName (getReferenceClassType page) 'Stored' }}[]>([]);
    {{/ if }}
    {{# unless page.container.table }}
      const [validation, setValidation] = useState<Map<keyof {{ classDataName (getReferenceClassType page) '' }}, string>>(new Map<keyof {{ classDataName (getReferenceClassType page) '' }}, string>());

      // Ref section
      const payloadDiff = useRef<Record<keyof {{ classDataName (getReferenceClassType page) 'Stored' }}, any>>({} as unknown as Record<keyof {{ classDataName (getReferenceClassType page) 'Stored' }}, any>);

      // Callback section
      const storeDiff: (attributeName: keyof {{ classDataName (getReferenceClassType page) '' }}, value: any) => void = useCallback((attributeName: keyof {{ classDataName (getReferenceClassType page) '' }}, value: any) => {
        {{# if isDebugPrint }}// include: actor/src/fragments/page/store-diff-body.hbs{{/ if }}
        {{> actor/src/fragments/page/store-diff-body.hbs classType=page.dataElement.target page=page }}
      }, [data, editMode]);
      const isFormUpdateable = useCallback(() => {
        {{# if page.container.form }}
          return true;
        {{ else }}
          return {{ boolValue (isPageUpdateable page) }} && typeof data?.__updateable === 'boolean' && data?.__updateable;
        {{/ if }}
      }, [data]);
      const isFormDeleteable = useCallback(() => {
        {{# if page.container.form }}
          return false;
        {{ else }}
          return {{ boolValue (isPageDeleteable page) }} && typeof data?.__deleteable === 'boolean' && data?.__deleteable;
        {{/ if }}
      }, [data]);

      {{# if page.container.view }}
        const pageQueryCustomizer: {{ classDataName (getReferenceClassType page) 'QueryCustomizer' }} = {
          _mask: '{{ getMaskForView page.container }}',
        };
      {{/ if }}
    {{/ unless }}

    // Dialog hooks
    {{# each (getRelatedDialogs page) as |relatedDialog| }}
      const open{{ pageName relatedDialog }} = use{{ pageName relatedDialog }}(data);
    {{/ each }}

    // Calculated section
    {{# if (titleComesFromAttribute page.container) }}
      const title: string = data.{{ page.container.titleAttribute.name }} as string;
    {{ else }}
      const title: string = t('{{ getTranslationKeyForPage page }}', { defaultValue: '{{ page.label }}' });
    {{/ if }}

    // Action section
    {{# each page.actions as |action| }}
      {{> (getActionTemplate action) }}
    {{/ each }}

    const actions: {{ containerComponentName page.container }}DialogActions = {
      {{# each page.actions as |action| }}
        {{ simpleActionDefinitionName action.actionDefinition }},
      {{/ each }}
    };

    // Effect section
    {{# if (pageShouldInitialize page) }}
      useEffect(() => {
        actions.{{ simpleActionDefinitionName page.container.onInit }}!({{# if page.container.view }}pageQueryCustomizer{{/ if }});
      }, []);
    {{/ if }}
  {{/ unless }}

  return (
    <>
      {{# unless (containerIsEmptyDashboard page.container) }}
        <Suspense>
          <{{ containerComponentName page.container }}DialogContainer
            ownerData={ownerData}
            onClose={onClose}
            title={title}
            actions={actions}
            isLoading={isLoading}
            editMode={editMode}
            refreshCounter={refreshCounter}
            {{# unless (containerIsEmptyDashboard page.container) }}
              {{# if page.container.isSelector }}
                selectionDiff={selectionDiff}
                setSelectionDiff={setSelectionDiff}
              {{/ if }}
              {{# if page.container.isRelationSelector }}
                alreadySelected={alreadySelected}
              {{/ if }}
              {{# unless page.container.table }}
                data={data}
                storeDiff={storeDiff}
                isFormUpdateable={isFormUpdateable}
                isFormDeleteable={isFormDeleteable}
                validation={validation}
                setValidation={setValidation}
              {{/ unless }}
            {{/ unless }}
          />
        </Suspense>
      {{ else }}
        <h1>Hello!</h1>
      {{/ unless }}
    </>
  );
}
