{{> fragment.header.hbs }}

import { useRef, useCallback, useEffect, useState, useMemo, lazy, Suspense } from 'react';
{{# unless (containerIsEmptyDashboard page.container) }}
  import type { FC, ReactNode, Dispatch, SetStateAction } from 'react';
  import { OBJECTCLASS } from '@pandino/pandino-api';
  import { useTrackService } from '@pandino/react-hooks';
  import type { JudoIdentifiable } from '~/services/data-api/common/JudoIdentifiable';
  import { draftIdentifierPrefix } from '~/services/data-api/common/utils';
  import type { JudoRestResponse } from '~/services/data-api/rest/requestResponse';
  {{# if (containerHasTableWithTotalCount page.container) }}
  import { X_JUDO_COUNT_RECORDS } from '~/services/data-api/rest/headers';
  {{/ if }}
  import { useTranslation } from 'react-i18next';
  import { v4 as uuidv4 } from 'uuid';
  {{# if (pageHasSignedId page) }}
  import { useParams } from 'react-router-dom';
  {{/ if }}
  {{# if (containerHasTable page.container) }}
  import type { GridFilterModel } from '@mui/x-data-grid{{ getMUIDataGridPlanSuffix }}';
  import type { Filter, FilterOption } from '~/components-api';
  {{/ if }}
  import { useJudoNavigation } from '~/components';
  import { useConfirmDialog, useDialog, useFilterDialog } from '~/components/dialog';
  import { useSnacks, useCRUDDialog, useViewData, useEventBus } from '~/hooks';
  import {
    {{# if (hasPageRequiredBy page) }}passesLocalValidation,{{/ if }}
    processQueryCustomizer,
    useErrorHandler,
    isErrorNestedValidationError,
    simpleCloneDeep,
    getValue,
    setValue,
    {{# if page.container.form }}
    getErrorRelationKeyFromPayload,
    {{/ if }}
  } from '~/utilities';
  import type {
    DialogResult,
  } from '~/utilities';
  {{# each (getRelatedPages page) as |relatedPage| }}
    import { {{ calculateNavigationRoute relatedPage }} } from '~/routes';
  {{/ each }}
  {{# each (getRelatedDialogs page false) as |relatedDialog| }}
    import { use{{ pageName relatedDialog }} } from '~/dialogs/{{ pagePath relatedDialog }}/hooks';
  {{/ each }}
  import type { {{ containerComponentName page.container }}DialogActions, {{ containerComponentName page.container }}DialogProps } from '~/containers/{{ containerPath page.container }}/types';
  {{# each (getApiImportsForPage page) as |imp| }}
    import type { {{ classDataName imp '' }}, {{ classDataName imp 'Stored' }} } from '~/services/data-api/model/{{ classDataName imp '' }}';
    import type { {{ classDataName imp 'QueryCustomizer' }} } from '~/services/data-api/rest/{{ classDataName imp 'QueryCustomizer' }}';
  {{/ each }}
  {{# each (getEnumDataTypesForPage page) as |imp| }}
    import { {{ restParamName imp }} } from '~/services/data-api/model/{{ restParamName imp }}';
  {{/ each }}
  {{# if (getServiceImplForPage page) }}
    import { judoAxiosProvider } from '~/services/data-axios/JudoAxiosProvider';
    import { {{ getServiceClassForPage page }} } from '~/services/data-axios/{{ getServiceClassForPage page }}';
    {{# each (getRelatedServicesForPage page) as |rel| }}
    import { {{ serviceRelationName rel }}Impl } from '~/services/data-axios/{{ serviceRelationName rel }}Impl';
    {{/ each }}
  {{/ if }}
  import { {{ containerComponentName page.container }}ViewModelContext, type {{ containerComponentName page.container }}ViewModel } from './context';
  import type { {{ containerComponentName page.container }}DialogActionsExtended, {{ pageName page }}Props } from './types';
  import type { {{ containerComponentName page.container }}ActionsHook } from './customization';
  import { {{ camelCaseNameToInterfaceKey (pageName page) }}_ACTIONS_HOOK_INTERFACE_KEY } from './customization';
{{/ unless }}

{{# unless (containerIsEmptyDashboard page.container) }}
  const {{ containerComponentName page.container }}DialogContainer = lazy(() => import('~/containers/{{ containerPath page.container }}/{{ containerComponentName page.container }}DialogContainer'));
{{/ unless }}

// XMIID: {{ getXMIID page }}
// Name: {{ page.name }}
export default function {{ pageName page }}(props: {{ pageName page }}Props) {
  const {
    ownerData,
    {{# and (isPageDataElementUnmappedSingle page) page.container.view }}data: output,{{/ and }}
    {{# if page.container.isRelationSelector }}alreadySelected,{{/ if }}
    {{# unless page.container.isSelector }}templateDataOverride,{{/ unless }}
    ownerValidation,
    isDraft,
    {{# unless page.container.table}}maskRequest,{{/ unless }}
    dataPath,
    rootPageId,
    onClose,
    onSubmit,
  } = props;

  {{# unless (containerIsEmptyDashboard page.container) }}
    const owner = useRef<any>(ownerData ?? null);

    // Services
    const {{ firstToLower (getServiceImplForPage page) }} = useMemo(() => new {{ getServiceClassForPage page }}(judoAxiosProvider), []);
    {{# each (getRelatedServicesForPage page) as |rel| }}
    const {{ firstToLower (serviceRelationName rel) }}Impl = useMemo(() => new {{ serviceRelationName rel }}Impl(judoAxiosProvider), []);
    {{/ each }}

    // Hooks section
    const { t } = useTranslation();
    const { showSuccessSnack, showErrorSnack } = useSnacks();
    const { navigate, back: navigateBack } = useJudoNavigation();
    const { openFilterDialog } = useFilterDialog();
    const { openConfirmDialog } = useConfirmDialog();
    const { setLatestViewData } = useViewData();
    const { publish, subscribe } = useEventBus();
    const subscriptionRef = useRef<any>(null);
    const handleError = useErrorHandler();
    const openCRUDDialog = useCRUDDialog();
    const [createDialog, closeDialog] = useDialog();

    // State section
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [editMode, setEditMode] = useState<boolean>({{# if page.container.form }}true{{ else }}false{{/ if }});
    const [refreshCounter, setRefreshCounter] = useState<number>(0);
    const [data, setData] = useState<{{ dialogDataType page }}{{# if page.container.table }}[]{{/ if }}>({{ dialogDataInitialValue page }} as {{ dialogDataType page }}{{# if page.container.table }}[]{{/ if }});
    {{# if page.container.isSelector }}
      const [selectionDiff, setSelectionDiff] = useState<{{ dialogDataType page }}[]>([]);
    {{/ if }}
    {{# unless page.container.table }}
      const [validation, setValidation] = useState<Map<keyof {{ classDataName (getReferenceClassType page) '' }}, string>>(new Map<keyof {{ classDataName (getReferenceClassType page) '' }}, string>());

      {{# if page.container.view}}
      // Rollback handling
      const rollbackPoint = useRef<{{ dialogDataType page }} | null>(isDraft ? simpleCloneDeep(getValue<{{ dialogDataType page }}>(ownerData, dataPath!, {})) : null);
      const rollbackData = useCallback(() => {
        if (rollbackPoint.current) {
          setData(rollbackPoint.current);
          setEditMode(false);
        }
      }, [data, editMode, dataPath, ownerData, isDraft]);
      {{/ if }}

      // Callback section
      const storeDiff: (attributeName: keyof {{ classDataName (getReferenceClassType page) '' }}, value: any) => void = useCallback((attributeName: keyof {{ classDataName (getReferenceClassType page) '' }}, value: any) => {
        {{# if isDebugPrint }}// include: actor/src/fragments/page/store-diff-body.hbs{{/ if }}
        {{> actor/src/fragments/page/store-diff-body.hbs classType=page.dataElement.target page=page }}
      }, [data, editMode]);
      const isFormUpdateable = useCallback(() => {
        {{# if page.container.form }}
          return true;
        {{ else }}
          if (typeof data?.__updateable === 'boolean') {
            return data?.__updateable;
          }
          return isDraft || {{ boolValue (isPageUpdateable page) }};
        {{/ if }}
      }, [data]);
      const isFormDeleteable = useCallback(() => {
        {{# if page.container.form }}
          return false;
        {{ else }}
          return {{ boolValue (isPageDeleteable page) }} && typeof data?.__deleteable === 'boolean' && data?.__deleteable;
        {{/ if }}
      }, [data]);

      {{# if page.container.view }}
        const getPageQueryCustomizer: () => {{ classDataName (getReferenceClassType page) 'QueryCustomizer' }} = () => ({
          _mask: actions.getMask ? actions.getMask!() : '{{ serializeMaskForView page }}',
        });
      {{/ if }}
    {{/ unless }}

    // Masks
    {{# if page.container.table }}
      {{# with (getFirstTableForContainer page.container) as |table| }}
        const getMask: () => string = () => {
          return '{{ serializeMaskForTable table page }}';
        };
      {{/ with }}
    {{/ if }}
    {{# if page.container.view }}
      const getMask = () => '{{ serializeMaskForView page }}';
    {{/ if }}
    {{# unless page.container.table }}
      {{# each page.container.links as |link| }}
        const get{{ firstToUpper link.relationType.name }}Mask = () => '{{ serializeMaskForLink link page }}';
      {{/ each }}
      {{# each page.container.tables as |table| }}
        const get{{ firstToUpper table.relationName }}Mask = () => '{{ serializeMaskForTable table page }}';
      {{/ each }}
    {{/ unless }}

    // Private actions
    const submit = async () => {
      {{# with (getCreateActionForPage page) as |action| }}
        await {{ simpleActionDefinitionName action.actionDefinition }}();
      {{/ with }}
      {{# with (getUpdateActionForPage page) as |action| }}
        await {{ simpleActionDefinitionName action.actionDefinition }}();
      {{/ with }}
      {{# with (getCallOperationActionForPage page) as |action| }}
        await {{ simpleActionDefinitionName action.actionDefinition }}();
      {{/ with }}
    };
    const refresh = async (forced = false) => {
      if (!isDraft) {
        {{# if page.container.table }}
          setRefreshCounter((prev) => prev + 1);
        {{/ if }}
        {{# if page.container.view }}
          if (!editMode || forced) {
            {{# with (getRefreshActionDefinitionForContainer page.container) as |refreshActionDefinition| }}
              if (actions.{{ simpleActionDefinitionName refreshActionDefinition }}) {
                await actions.{{ simpleActionDefinitionName refreshActionDefinition }}!(processQueryCustomizer(getPageQueryCustomizer()));
              }
            {{/ with }}
          }
        {{/ if }}
      }
    };
    const produceDataAdjustedOwner = useCallback(() => {
      const copy = simpleCloneDeep(owner.current);
      setValue(copy, dataPath!, simpleCloneDeep(data));
      return copy;
    }, [data, owner]);

    // Validation
    const validate: (target: any) => Promise<void> = useCallback(async (target) => {
      {{# if (isValidationSupported page) }}
        if (ownerValidation) {
          await ownerValidation(target);
        } else {
          await {{ getServiceImplForPage page }}.validate{{# if page.container.view }}Update{{ else }}Create{{/ if }}({{# unless page.dataElement.isAccess }}owner.current, {{/ unless }}target);
        }
      {{/ if }}
    }, [{{# if (isValidationSupported page) }}ownerValidation, {{# unless page.dataElement.isAccess }}ownerData, {{/ unless }}data, {{ getServiceImplForPage page }}{{/ if }}]);

    // Pandino Action overrides
    const { service: customActionsHook } = useTrackService<{{ containerComponentName page.container }}ActionsHook>(`(${OBJECTCLASS}=${ {{~ camelCaseNameToInterfaceKey (pageName page) }}_ACTIONS_HOOK_INTERFACE_KEY})`);
    const customActions: {{ containerComponentName page.container }}DialogActionsExtended | undefined = customActionsHook?.({{ pageHookCallParams page }});

    // Dialog hooks
    {{# each (getRelatedDialogs page false) as |relatedDialog| }}
      const open{{ pageName relatedDialog }} = use{{ pageName relatedDialog }}();
    {{/ each }}

    // Action section
    {{> actor/src/pages/actions/_getPageTitle.fragment.hbs }}
    {{# each page.actions as |action| }}
      {{> (getActionTemplate action) }}
    {{/ each }}

    {{# each page.container.tables as |table| }}
      {{# if table.isInlineEditable }}
        const apply{{ firstToUpper table.relationName }}RowEdit = useCallback(async (rowData: {{ classDataName (getReferenceClassType table) 'Stored' }}): Promise<any> => {
          try {
            {{# if table.isEager }}
              // we need to create a copy to keep order, and because mui datagrid freezes elements, and crashes on reference updates
              let updatedList = [...(data.{{ table.relationName }} || [])];
              const existingIndex = updatedList.findIndex(r => r.__identifier === rowData.__identifier);
              if (existingIndex > -1) {
                updatedList[existingIndex] = {
                  ...rowData,
                };
              } else {
                updatedList.unshift(rowData);
              }
              {{# unless table.dataElement.isMemberTypeDerived }}
                await validate({...data, {{ table.relationName }}: updatedList});
                storeDiff('{{ table.relationName }}', updatedList);
              {{ else }}
                // derived eager table elements are updated on the instance, and not on the owner
                setIsLoading(true);
                await {{ getServiceImplForPage page }}.update{{ firstToUpper table.relationName }}(owner.current, rowData);
                showSuccessSnack(t('judo.action.save.success', { defaultValue: 'Changes saved' }));
                await refresh();
              {{/ unless }}
            {{ else }}
              setIsLoading(true);
              if (rowData.__identifier!.startsWith(draftIdentifierPrefix)) {
                const queryCustomizer: { _mask: string } = {
                  _mask: '{}',
                };
                await {{ getServiceImplForPage page }}.create{{ firstToUpper table.relationName }}({{# unless page.dataElement.isAccess }}owner.current, {{/ unless }}rowData, queryCustomizer);
                showSuccessSnack(t('judo.action.create.success', { defaultValue: 'Create successful' }));
              } else {
                await {{ getServiceImplForPage page }}.update{{ firstToUpper table.relationName }}(rowData);
                showSuccessSnack(t('judo.action.save.success', { defaultValue: 'Changes saved' }));
              }
              await refresh();
            {{/ if }}
          } catch(error: any) {
            return Promise.reject(error);
          } finally {
            setIsLoading(false);
          }
        }, [data, {{ getServiceImplForPage page }}]);
      {{/ if }}
    {{/ each }}

    const actions: {{ containerComponentName page.container }}DialogActions = {
      getPageTitle,
      {{# each page.actions as |action| }}
        {{ simpleActionDefinitionName action.actionDefinition }},
      {{/ each }}
      {{# unless page.container.form }}
        getMask,
      {{/ unless }}
      {{# unless page.container.table }}
        {{# each page.container.links as |link| }}
          get{{ firstToUpper link.relationType.name }}Mask,
        {{/ each }}
        {{# each page.container.tables as |table| }}
          get{{ firstToUpper table.relationName }}Mask,
        {{/ each }}
      {{/ unless }}
      {{# each page.container.tables as |table| }}
        {{# if table.isInlineEditable }}
          apply{{ firstToUpper table.relationName }}RowEdit,
        {{/ if }}
      {{/ each }}
      ...(customActions ?? {}),
    };

    // ViewModel setup
    const viewModel: {{ containerComponentName page.container }}ViewModel = {
      {{# if (hasOperationFormCallerPages page.container application) }}
        formFor: '{{ safeName page }}',
      {{/ if }}
      onClose,
      actions,
      ownerData,
      isLoading,
      setIsLoading,
      editMode,
      setEditMode,
      refresh,
      refreshCounter,
      submit,
      {{# if page.container.isRelationSelector }}
      alreadySelected,
      {{/ if }}
      {{# unless page.container.table }}
        data,
        validation,
        setValidation,
        storeDiff,
        isFormUpdateable,
        isFormDeleteable,
      {{/ unless }}
      {{# if page.container.isSelector }}
        selectionDiff,
        setSelectionDiff,
      {{/ if }}
      {{# unless page.container.isSelector }}
        templateDataOverride,
      {{/ unless }}
      isDraft,
    };

    // Effect section
    useEffect(() => {
      {{# if (pageShouldInitialize page) }}
        {{# if page.container.view }}
          if (!isDraft) {
            actions.{{ simpleActionDefinitionName page.container.onInit }}!({{# if page.container.view }}getPageQueryCustomizer(){{/ if }});
          }
        {{ else }}
          actions.{{ simpleActionDefinitionName page.container.onInit }}!({{# if page.container.view }}getPageQueryCustomizer(){{/ if }});
        {{/ if }}
      {{/ if }}
      {{# unless page.container.table }}
        if (templateDataOverride) {
          setData((prevData) => ({ ...prevData, ...templateDataOverride }));
        }
      {{/ unless }}
    }, []);

    {{# if (pageIsRootStateOwner page) }}
      useEffect(() => {
        const unsubscribe = subscribe('refresh:{{ getXMIID page }}', async () => {
          await refresh();
        });

        return () => {
          unsubscribe();
        };
      }, [subscribe, data, editMode]);
    {{/ if }}
    {{# if page.container.view }}
      useEffect(() => {
        if (!rootPageId && subscriptionRef.current) {
          // unsubscribe and unset
          subscriptionRef.current();
          subscriptionRef.current = null;
        }
        if (rootPageId && dataPath && isDraft) {
          subscriptionRef.current = subscribe(`${rootPageId}:refreshed`, async (freshRootData: any) => {
            const copy = simpleCloneDeep(getValue<{{ dialogDataType page }}>(freshRootData, dataPath!)!);
            setData(copy);
          });
        }

        return () => {
          // unsubscribe
          if (subscriptionRef.current) {
            subscriptionRef.current();
          }
        };
      }, [subscribe, rootPageId]);
    {{/ if }}
  {{/ unless }}

  return (
    {{# unless (containerIsEmptyDashboard page.container) }}
      <{{ containerComponentName page.container }}ViewModelContext.Provider value={viewModel}>
        <Suspense>
          <div id="{{ getXMIID page }}" data-page-name="{{ page.name }}" />
          <{{ containerComponentName page.container }}DialogContainer
            ownerData={ownerData}
            onClose={onClose}
            actions={actions}
            dataPath={dataPath}
            isLoading={isLoading}
            editMode={editMode}
            refreshCounter={refreshCounter}
            {{# if (hasOperationFormCallerPages page.container application) }}
              formFor={'{{ safeName page }}'}
            {{/ if }}
            {{# unless (containerIsEmptyDashboard page.container) }}
              {{# if page.container.isSelector }}
                selectionDiff={selectionDiff}
                setSelectionDiff={setSelectionDiff}
              {{/ if }}
              {{# if page.container.isRelationSelector }}
                alreadySelected={alreadySelected}
              {{/ if }}
              {{# unless page.container.table }}
                data={data}
                storeDiff={storeDiff}
                isFormUpdateable={isFormUpdateable}
                isFormDeleteable={isFormDeleteable}
                validation={validation}
                setValidation={setValidation}
                submit={submit}
              {{/ unless }}
              isDraft={isDraft}
            {{/ unless }}
          />
        </Suspense>
      </{{ containerComponentName page.container }}ViewModelContext.Provider>
    {{ else }}
      <h1>Hello!</h1>
    {{/ unless }}
  );
}
