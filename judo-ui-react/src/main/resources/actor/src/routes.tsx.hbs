{{> fragment.header.hbs }}

import { Navigate, Route } from 'react-router-dom';
import type { ReactElement } from 'react';
import { lazy, Suspense } from 'react';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { ComponentProxy } from '@pandino/react-hooks';
import { Redirect } from './pages/Redirect';

let routes: Array<{path: string, element: ReactElement, exact?: boolean}> = [];

routes.push({
    path: '_redirect',
    exact: true,
    element: <Redirect />,
});

{{# each (getPagesForRouting application) as |page| }}
    {{# if page.dashboard }}
        export const ROUTE_DASHBOARD_INTERFACE_KEY = 'DashboardRoute';
        export const routeToDashboard = (): string => '';
        const DashboardRoute = lazy(() => import('./pages/{{ pagePath page }}'));

        routes.push({
            path: '',
            exact: true,
            element: <Suspense>
                <ComponentProxy filter={`(${OBJECTCLASS}=${ROUTE_DASHBOARD_INTERFACE_KEY})`}>
                    <DashboardRoute />
                </ComponentProxy>
            </Suspense>,
        });
    {{ else }}
        export const ROUTE_{{ camelCaseNameToInterfaceKey (pageName page) }}_INTERFACE_KEY = '{{ pageName page }}Route';
        {{# if (pageHasSignedId page) }}
            export const routeTo{{ pageName page }} = (signedIdentifier: string): string => '{{ getPageRoute page }}'.replace(/:signedIdentifier/, signedIdentifier);
        {{ else }}
            export const routeTo{{ pageName page }} = (): string => '{{ getPageRoute page }}';
        {{/ if }}
        const {{ pageName page }} = lazy(() => import('./pages/{{ pagePath page }}'));

        routes.push({
            path: '{{ getPageRoute page }}',
            element: <Suspense>
                <ComponentProxy filter={`(${OBJECTCLASS}=${ROUTE_{{ camelCaseNameToInterfaceKey (pageName page) }}_INTERFACE_KEY})`}>
                    <{{ pageName page }} />
                </ComponentProxy>
            </Suspense>,
        });
    {{/ if }}
{{/ each }}

export {
    routes,
};
