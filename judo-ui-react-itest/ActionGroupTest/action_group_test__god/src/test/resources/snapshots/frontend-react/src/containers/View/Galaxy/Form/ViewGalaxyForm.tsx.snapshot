//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    S O U R C E
// --------------------------------
// Factory expression: #application.pageContainers
// Path expression: 'src/containers/'+#containerPath(#self)+'/'+#containerComponentName(#self)+'.tsx'
// Template name: actor/src/containers/container.tsx
// Base URL: mvn:hu.blackbelt.judo.generator:judo-ui-react:1.0.0-SNAPSHOT
// Template file: actor/src/containers/container.tsx.hbs

import LoadingButton from '@mui/lab/LoadingButton';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import ButtonGroup from '@mui/material/ButtonGroup';
import Checkbox from '@mui/material/Checkbox';
import Container from '@mui/material/Container';
import FormControl from '@mui/material/FormControl';
import FormControlLabel from '@mui/material/FormControlLabel';
import FormGroup from '@mui/material/FormGroup';
import FormHelperText from '@mui/material/FormHelperText';
import Grid from '@mui/material/Grid';
import IconButton from '@mui/material/IconButton';
import InputAdornment from '@mui/material/InputAdornment';
import MenuItem from '@mui/material/MenuItem';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';
// include: actor/src/fragments/container/view-imports.fragment.hbs
import { DateTimePicker } from '@mui/x-date-pickers';
import type { DateTimeValidationError } from '@mui/x-date-pickers';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useTrackService } from '@pandino/react-hooks';
import { clsx } from 'clsx';
// include: actor/src/fragments/container/common-imports.fragment.hbs
import type { Dispatch, FC, SetStateAction } from 'react';
import { forwardRef, useCallback, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { DropdownButton, MdiIcon, useJudoNavigation } from '~/components';
import { useConfirmDialog } from '~/components/dialog';
import { NumericInput } from '~/components/widgets';
import { autoFocusRefDelay } from '~/config';
import { useConfirmationBeforeChange } from '~/hooks';
import { useL10N } from '~/l10n/l10n-context';
import type { ViewAstronomer, ViewAstronomerStored } from '~/services/data-api/model/ViewAstronomer';
import type { ViewGalaxy, ViewGalaxyStored } from '~/services/data-api/model/ViewGalaxy';
import { isErrorOperationFault, useErrorHandler } from '~/utilities';
import { ViewGalaxyFormAstronomerComponent } from './components/ViewGalaxyFormAstronomerComponent';
import { VIEW_GALAXY_FORM_CONTAINER_ACTIONS_HOOK_INTERFACE_KEY } from './customization';
import type { ViewGalaxyFormContainerHook } from './customization';
import type { ViewGalaxyFormActionDefinitions, ViewGalaxyFormProps } from './types';

// XMIID: God/(esm/_YTwP0E7rEeycO-gUAWxcVg)/TransferObjectFormPageContainer
// Name: View::Galaxy::Form
export default function ViewGalaxyForm(props: ViewGalaxyFormProps) {
  // Container props
  const {
    refreshCounter,
    isLoading,
    isDraft,
    dataPath,
    actions: pageActions,
    data,
    isFormUpdateable,
    isFormDeleteable,
    storeDiff,
    editMode,
    validation,
    setValidation,
    submit,
  } = props;

  // Container hooks
  const { t } = useTranslation();
  const { navigate, back } = useJudoNavigation();
  const { locale: l10nLocale } = useL10N();
  const { openConfirmDialog } = useConfirmDialog();

  useConfirmationBeforeChange(
    editMode,
    t('judo.form.navigation.confirmation', {
      defaultValue: 'You have potential unsaved changes in your form, are you sure you would like to navigate away?',
    }),
  );
  // Pandino Container Action overrides
  const { service: customContainerHook } = useTrackService<ViewGalaxyFormContainerHook>(
    `(${OBJECTCLASS}=${VIEW_GALAXY_FORM_CONTAINER_ACTIONS_HOOK_INTERFACE_KEY})`,
  );
  const containerActions: ViewGalaxyFormActionDefinitions = customContainerHook?.(data, editMode, storeDiff) || {};
  const actions = useMemo(() => ({ ...pageActions, ...containerActions }), [pageActions, containerActions]);
  const autoFocusInputRef = useRef<any>(null);

  useEffect(() => {
    const timeout = setTimeout(() => {
      if (typeof autoFocusInputRef?.current?.focus === 'function') {
        autoFocusInputRef.current.focus();
      }
    }, autoFocusRefDelay);

    return () => clearTimeout(timeout);
  }, []);

  return (
    <Grid container data-container-id="God/(esm/_YTwP0E7rEeycO-gUAWxcVg)/TransferObjectFormPageContainer">
      {/* include: getWidgetTemplate() */}

      <Grid item data-name="Form" xs={12} sm={12} md={36.0}>
        <Grid container direction="row" spacing={2}>
          <Grid item xs={12} sm={12}>
            <Grid
              id="God/(esm/_YTwP0E7rEeycO-gUAWxcVg)/TransferObjectFormVisualElement"
              data-name="Form"
              container
              direction="column"
              alignItems="stretch"
              justifyContent="flex-start"
              spacing={2}
            >
              {/* include: getWidgetTemplate() */}

              <Grid item xs={12} sm={12} md={4.0}>
                <TextField
                  required={actions?.isNameRequired ? actions.isNameRequired(data, editMode) : true}
                  name="name"
                  id="God/(esm/_8AgVQE7tEeycO-gUAWxcVg)/StringTypeTextInput"
                  inputRef={autoFocusInputRef}
                  label={t('View.Galaxy.Form.name', { defaultValue: 'Name' }) as string}
                  value={data.name ?? ''}
                  className={clsx({
                    'JUDO-viewMode': !editMode,
                    'JUDO-required': true,
                  })}
                  disabled={actions?.isNameDisabled ? actions.isNameDisabled(data, editMode, isLoading) : isLoading}
                  error={!!validation.get('name')}
                  helperText={validation.get('name')}
                  onChange={(event) => {
                    const realValue = event.target.value?.length === 0 ? null : event.target.value;
                    storeDiff('name', realValue);
                  }}
                  InputLabelProps={{ shrink: true }}
                  InputProps={{
                    readOnly: false || !isFormUpdateable(),
                    startAdornment: (
                      <InputAdornment position="start">
                        <MdiIcon path="atom-variant" />
                      </InputAdornment>
                    ),
                  }}
                  inputProps={{
                    maxLength: 255,
                  }}
                />
              </Grid>

              {/* include: getWidgetTemplate() */}

              <Grid item xs={12} sm={12} md={4.0}>
                <FormControl error={!!validation.get('real')}>
                  <FormGroup>
                    <FormControlLabel
                      className="checkbox"
                      sx={{
                        marginTop: '6px',
                        color: (theme) => (validation.has('real') ? theme.palette.error.main : 'primary'),
                      }}
                      disabled={
                        actions?.isRealDisabled
                          ? actions.isRealDisabled(data, editMode, isLoading)
                          : false || !isFormUpdateable() || isLoading
                      }
                      control={
                        <Checkbox
                          checked={data.real || false}
                          sx={{ color: (theme) => (validation.has('real') ? theme.palette.error.main : 'primary') }}
                          onChange={(event) => {
                            storeDiff('real', event.target.checked);
                          }}
                        />
                      }
                      label={t('View.Galaxy.Form.real', { defaultValue: 'Real' }) as string}
                    />
                  </FormGroup>
                  {validation.has('real') && <FormHelperText>{validation.get('real')}</FormHelperText>}
                </FormControl>
              </Grid>

              {/* include: getWidgetTemplate() */}

              <Grid item xs={12} sm={12} md={4.0}>
                <TextField
                  required={actions?.isConstellationRequired ? actions.isConstellationRequired(data, editMode) : true}
                  name="constellation"
                  id="God/(esm/_t4p84FjJEeyV2_3ibolaNQ)/StringTypeTextInput"
                  label={t('View.Galaxy.Form.constellation', { defaultValue: 'Constellation' }) as string}
                  value={data.constellation ?? ''}
                  className={clsx({
                    'JUDO-viewMode': !editMode,
                    'JUDO-required': true,
                  })}
                  disabled={
                    actions?.isConstellationDisabled
                      ? actions.isConstellationDisabled(data, editMode, isLoading)
                      : isLoading
                  }
                  error={!!validation.get('constellation')}
                  helperText={validation.get('constellation')}
                  onChange={(event) => {
                    const realValue = event.target.value?.length === 0 ? null : event.target.value;
                    storeDiff('constellation', realValue);
                  }}
                  InputLabelProps={{ shrink: true }}
                  InputProps={{
                    readOnly: false || !isFormUpdateable(),
                    startAdornment: (
                      <InputAdornment position="start">
                        <MdiIcon path="star" />
                      </InputAdornment>
                    ),
                  }}
                  inputProps={{
                    maxLength: 255,
                  }}
                />
              </Grid>

              {/* include: getWidgetTemplate() */}

              <Grid item xs={12} sm={12} md={4.0}>
                <FormControl error={!!validation.get('nakedEye')}>
                  <FormGroup>
                    <FormControlLabel
                      className="checkbox"
                      sx={{
                        marginTop: '6px',
                        color: (theme) => (validation.has('nakedEye') ? theme.palette.error.main : 'primary'),
                      }}
                      disabled={
                        actions?.isNakedEyeDisabled
                          ? actions.isNakedEyeDisabled(data, editMode, isLoading)
                          : false || !isFormUpdateable() || isLoading
                      }
                      control={
                        <Checkbox
                          checked={data.nakedEye || false}
                          sx={{ color: (theme) => (validation.has('nakedEye') ? theme.palette.error.main : 'primary') }}
                          onChange={(event) => {
                            storeDiff('nakedEye', event.target.checked);
                          }}
                        />
                      }
                      label={t('View.Galaxy.Form.nakedEye', { defaultValue: 'Naked Eye' }) as string}
                    />
                  </FormGroup>
                  {validation.has('nakedEye') && <FormHelperText>{validation.get('nakedEye')}</FormHelperText>}
                </FormControl>
              </Grid>

              {/* include: getWidgetTemplate() */}

              <Grid item xs={12} sm={12} md={4.0}>
                <NumericInput
                  required={actions?.isMagnitudeRequired ? actions.isMagnitudeRequired(data, editMode) : false}
                  name="magnitude"
                  id="God/(esm/_iqFLoFjJEeyV2_3ibolaNQ)/NumericTypeVisualInput"
                  label={t('View.Galaxy.Form.magnitude', { defaultValue: 'Magnitude' }) as string}
                  customInput={TextField}
                  value={data.magnitude ?? ''}
                  formatValue={true}
                  decimalScale={4}
                  className={clsx({
                    'JUDO-viewMode': !editMode,
                    'JUDO-required': false,
                  })}
                  disabled={
                    actions?.isMagnitudeDisabled ? actions.isMagnitudeDisabled(data, editMode, isLoading) : isLoading
                  }
                  error={!!validation.get('magnitude')}
                  helperText={validation.get('magnitude')}
                  onValueChange={(values, sourceInfo) => {
                    const newValue = values.floatValue === undefined ? null : values.floatValue;
                    if (data.magnitude !== newValue) {
                      storeDiff('magnitude', newValue);
                    }
                  }}
                  InputLabelProps={{ shrink: true }}
                  InputProps={{
                    readOnly: false || !isFormUpdateable(),
                    startAdornment: (
                      <InputAdornment position="start">
                        <MdiIcon path="star-outline" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              {/* include: getWidgetTemplate() */}

              <Grid item xs={12} sm={12} md={4.0}>
                <TextField
                  required={actions?.isOriginOfNameRequired ? actions.isOriginOfNameRequired(data, editMode) : false}
                  name="originOfName"
                  id="God/(esm/_iqGZwFjJEeyV2_3ibolaNQ)/StringTypeTextInput"
                  label={t('View.Galaxy.Form.originOfName', { defaultValue: 'OriginOfName' }) as string}
                  value={data.originOfName ?? ''}
                  className={clsx({
                    'JUDO-viewMode': !editMode,
                    'JUDO-required': false,
                  })}
                  disabled={
                    actions?.isOriginOfNameDisabled
                      ? actions.isOriginOfNameDisabled(data, editMode, isLoading)
                      : isLoading
                  }
                  error={!!validation.get('originOfName')}
                  helperText={validation.get('originOfName')}
                  onChange={(event) => {
                    const realValue = event.target.value?.length === 0 ? null : event.target.value;
                    storeDiff('originOfName', realValue);
                  }}
                  InputLabelProps={{ shrink: true }}
                  InputProps={{
                    readOnly: false || !isFormUpdateable(),
                    startAdornment: (
                      <InputAdornment position="start">
                        <MdiIcon path="weather-night" />
                      </InputAdornment>
                    ),
                  }}
                  inputProps={{
                    maxLength: 255,
                  }}
                />
              </Grid>

              {/* include: getWidgetTemplate() */}

              <Grid item xs={12} sm={12} md={4.0}>
                <DateTimePicker
                  ampm={false}
                  ampmInClock={false}
                  className={clsx({
                    'JUDO-viewMode': !editMode,
                    'JUDO-required': false,
                  })}
                  slotProps={{
                    textField: {
                      id: 'God/(esm/_28AhMBn_Ee2lYv3NngvLeA)/TimestampTypeDateTimeInput',
                      required: actions?.isDiscoveredRequired ? actions.isDiscoveredRequired(data, editMode) : false,
                      helperText: validation.get('discovered'),
                      error: !!validation.get('discovered'),
                      InputProps: {
                        startAdornment: (
                          <InputAdornment position="start">
                            <MdiIcon path="schedule" />
                          </InputAdornment>
                        ),
                      },
                    },
                    actionBar: {
                      actions: ['today', 'accept'],
                    },
                  }}
                  onError={(newError: DateTimeValidationError, value: any) => {
                    // https://mui.com/x/react-date-pickers/validation/#show-the-error
                    setValidation((prevValidation) => {
                      const copy = new Map<keyof ViewGalaxy, string>(prevValidation);
                      copy.set(
                        'discovered',
                        newError === 'invalidDate'
                          ? (t('judo.error.validation-failed.PATTERN_VALIDATION_FAILED', {
                              defaultValue: 'Value does not match the pattern requirements.',
                            }) as string)
                          : '',
                      );
                      return copy;
                    });
                  }}
                  views={['year', 'month', 'day', 'hours', 'minutes', 'seconds']}
                  label={t('View.Galaxy.Form.discovered', { defaultValue: 'Discovered' }) as string}
                  value={data.discovered ?? null}
                  readOnly={false || !isFormUpdateable()}
                  disabled={
                    actions?.isDiscoveredDisabled ? actions.isDiscoveredDisabled(data, editMode, isLoading) : isLoading
                  }
                  onChange={(newValue: Date | null) => {
                    storeDiff('discovered', newValue);
                  }}
                />
              </Grid>

              {/* include: getWidgetTemplate() */}

              <Grid item xs={12} sm={12}>
                <ViewGalaxyFormAstronomerComponent
                  disabled={false || isLoading}
                  readOnly={false || !isFormUpdateable()}
                  ownerData={data}
                  dataPath={dataPath ? dataPath + '.astronomer' : 'astronomer'}
                  editMode={editMode}
                  isLoading={isLoading}
                  isDraft={isDraft}
                  storeDiff={storeDiff}
                  validationError={validation.get('astronomer')}
                  actions={actions}
                  submit={submit}
                />
              </Grid>
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </Grid>
  );
}
