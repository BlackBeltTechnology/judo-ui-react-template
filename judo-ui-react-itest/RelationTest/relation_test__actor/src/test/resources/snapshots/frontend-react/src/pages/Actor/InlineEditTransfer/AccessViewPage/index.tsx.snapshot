//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    S O U R C E
// --------------------------------
// Factory expression: #getPagesForRouting(#application)
// Path expression: 'src/pages/'+#pagePath(#self)+'/index.tsx'
// Template name: actor/src/pages/index.tsx
// Template file: actor/src/pages/index.tsx.hbs

import type { GridFilterModel } from '@mui/x-data-grid';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useTrackService } from '@pandino/react-hooks';
import { Suspense, lazy, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import type { Dispatch, FC, ReactNode, SetStateAction } from 'react';
import { useTranslation } from 'react-i18next';
import { useParams } from 'react-router-dom';
import { v4 as uuidv4 } from 'uuid';
import { useJudoNavigation } from '~/components';
import type { Filter, FilterOption } from '~/components-api';
import { useConfirmDialog, useFilterDialog } from '~/components/dialog';
import type {
  InlineEditTransferInlineEditTransfer_View_EditPageActions,
  InlineEditTransferInlineEditTransfer_View_EditPageProps,
} from '~/containers/InlineEditTransfer/InlineEditTransfer_View_Edit/types';
import { useInlineEditTransferInlineEditTransfer_View_EditManyAggregationAssociationTableAddSelectorPage } from '~/dialogs/InlineEditTransfer/InlineEditTransfer_View_Edit/ManyAggregationAssociation/TableAddSelectorPage/hooks';
import { useInlineEditTransferManyAggregationAssociationRelationFormPage } from '~/dialogs/InlineEditTransfer/ManyAggregationAssociation/RelationFormPage/hooks';
import { useInlineEditTransferManyAggregationCompositionRelationFormPage } from '~/dialogs/InlineEditTransfer/ManyAggregationComposition/RelationFormPage/hooks';
import { useCRUDDialog, useEventBus, useSnacks, useViewData } from '~/hooks';
import { routeToInlineEditTransferManyAggregationAssociationRelationViewPage } from '~/routes';
import { routeToInlineEditTransferManyAggregationCompositionRelationViewPage } from '~/routes';
import { routeToInlineEditTransferManyDerivedAggregationAssociationRelationViewPage } from '~/routes';
import { routeToInlineEditTransferManyDerivedAggregationCompositionRelationViewPage } from '~/routes';
import type { JudoIdentifiable } from '~/services/data-api/common/JudoIdentifiable';
import { draftIdentifierPrefix } from '~/services/data-api/common/utils';
import type { InlineEditTransfer, InlineEditTransferStored } from '~/services/data-api/model/InlineEditTransfer';
import type { TransferObjectH, TransferObjectHStored } from '~/services/data-api/model/TransferObjectH';
import type { InlineEditTransferQueryCustomizer } from '~/services/data-api/rest/InlineEditTransferQueryCustomizer';
import type { TransferObjectHQueryCustomizer } from '~/services/data-api/rest/TransferObjectHQueryCustomizer';
import type { JudoRestResponse } from '~/services/data-api/rest/requestResponse';
import { ActorServiceForInlineEditTransferImpl } from '~/services/data-axios/ActorServiceForInlineEditTransferImpl';
import { judoAxiosProvider } from '~/services/data-axios/JudoAxiosProvider';
import { PageContainerTransition } from '~/theme/animations';
import { getValue, processQueryCustomizer, setValue, simpleCloneDeep, useErrorHandler } from '~/utilities';
import type { DialogResult } from '~/utilities';
import {
  type InlineEditTransferInlineEditTransfer_View_EditViewModel,
  InlineEditTransferInlineEditTransfer_View_EditViewModelContext,
} from './context';
import type { InlineEditTransferInlineEditTransfer_View_EditActionsHook } from './customization';
import { ACTOR_INLINE_EDIT_TRANSFER_ACCESS_VIEW_PAGE_ACTIONS_HOOK_INTERFACE_KEY } from './customization';
import type { InlineEditTransferInlineEditTransfer_View_EditPageActionsExtended } from './types';

const InlineEditTransferInlineEditTransfer_View_EditPageContainer = lazy(
  () =>
    import(
      '~/containers/InlineEditTransfer/InlineEditTransfer_View_Edit/InlineEditTransferInlineEditTransfer_View_EditPageContainer'
    ),
);

// XMIID: Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition
// Name: Actor::inlineEditTransfer::AccessViewPage
export default function ActorInlineEditTransferAccessViewPage() {
  const dataPath: string = '';
  const rootPageId: string | undefined = undefined;
  const isDraft = false;
  const owner = useRef<any>(null);

  // Router params section
  const { signedIdentifier } = useParams();

  // Services
  const actorServiceForInlineEditTransferImpl = useMemo(
    () => new ActorServiceForInlineEditTransferImpl(judoAxiosProvider),
    [],
  );

  // Hooks section
  const { t } = useTranslation();
  const { showSuccessSnack, showErrorSnack } = useSnacks();
  const { navigate, back: navigateBack } = useJudoNavigation();
  const { openFilterDialog } = useFilterDialog();
  const { openConfirmDialog } = useConfirmDialog();
  const { setLatestViewData, setRouterPageData } = useViewData();
  const { publish, subscribe } = useEventBus();
  const handleError = useErrorHandler();
  const openCRUDDialog = useCRUDDialog();

  // State section
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [editMode, setEditMode] = useState<boolean>(false);
  const [refreshCounter, setRefreshCounter] = useState<number>(0);
  const [data, setData] = useState<InlineEditTransferStored>({
    __signedIdentifier: signedIdentifier,
  } as InlineEditTransferStored);
  const [validation, setValidation] = useState<Map<keyof InlineEditTransfer, string>>(
    new Map<keyof InlineEditTransfer, string>(),
  );

  // Ref section

  // Callback section
  const storeDiff: (attributeName: keyof InlineEditTransfer, value: any) => void = useCallback(
    (attributeName: keyof InlineEditTransfer, value: any) => {
      setData((prevData) => ({
        ...prevData,
        [attributeName]: value,
      }));
      if (!editMode) {
        setEditMode(true);
      }
    },
    [data, editMode],
  );
  const isFormUpdateable = useCallback(() => {
    return true && typeof data?.__updateable === 'boolean' && data?.__updateable;
  }, [data]);
  const isFormDeleteable = useCallback(() => {
    return true && typeof data?.__deleteable === 'boolean' && data?.__deleteable;
  }, [data]);

  const getPageQueryCustomizer: () => InlineEditTransferQueryCustomizer = () => ({
    _mask: actions.getMask
      ? actions.getMask!()
      : '{field,manyAggregationAssociation{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr},manyAggregationComposition{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr},manyDerivedAggregationAssociation{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr},manyDerivedAggregationComposition{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr}}',
  });

  // Masks
  const getMask = () =>
    '{field,manyAggregationAssociation{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr},manyAggregationComposition{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr},manyDerivedAggregationAssociation{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr},manyDerivedAggregationComposition{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr}}';
  const getManyAggregationAssociationMask = () =>
    '{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr}';
  const getManyAggregationCompositionMask = () =>
    '{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr}';
  const getManyDerivedAggregationAssociationMask = () =>
    '{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr}';
  const getManyDerivedAggregationCompositionMask = () =>
    '{booleanAttr,dateAttr,doubleAttr,emailAttr,intAttr,stringAttr,timestampAttr}';

  // Private actions
  const submit = async () => {
    await updateAction();
  };
  const refresh = async (forced = false) => {
    if (!editMode || forced) {
      if (actions.refreshAction) {
        await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
      }
    }
  };
  const produceDataAdjustedOwner = useCallback(() => {
    const copy = simpleCloneDeep(owner.current);
    setValue(copy, dataPath, simpleCloneDeep(data));
    return copy;
  }, [data, owner]);

  // Validation
  const validate: (target: any) => Promise<void> = useCallback(
    async (target) => {
      await actorServiceForInlineEditTransferImpl.validateUpdate(target);
    },
    [data, actorServiceForInlineEditTransferImpl],
  );

  // Pandino Action overrides
  const { service: customActionsHook } = useTrackService<InlineEditTransferInlineEditTransfer_View_EditActionsHook>(
    `(${OBJECTCLASS}=${ACTOR_INLINE_EDIT_TRANSFER_ACCESS_VIEW_PAGE_ACTIONS_HOOK_INTERFACE_KEY})`,
  );
  const customActions: InlineEditTransferInlineEditTransfer_View_EditPageActionsExtended | undefined =
    customActionsHook?.(data, editMode, storeDiff, refresh, submit);

  // Dialog hooks
  const openInlineEditTransferInlineEditTransfer_View_EditManyAggregationAssociationTableAddSelectorPage =
    useInlineEditTransferInlineEditTransfer_View_EditManyAggregationAssociationTableAddSelectorPage();
  const openInlineEditTransferManyAggregationAssociationRelationFormPage =
    useInlineEditTransferManyAggregationAssociationRelationFormPage();
  const openInlineEditTransferManyAggregationCompositionRelationFormPage =
    useInlineEditTransferManyAggregationCompositionRelationFormPage();

  // Action section
  const getPageTitle = (data: InlineEditTransfer): string => {
    return t('InlineEditTransfer.InlineEditTransfer_View_Edit', { defaultValue: 'InlineEditTransfer View / Edit' });
  };
  // BackAction: Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewBackAction
  const backAction = async () => {
    navigateBack();
  };
  // CancelAction: Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewCancelAction
  const cancelAction = async () => {
    setValidation(new Map());
    // no need to set editMode to false, given refresh should do it implicitly
    await refresh(true);
  };
  // DeleteAction: Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewDeleteAction
  const deleteAction = async () => {
    try {
      const confirmed = await openConfirmDialog(
        'delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        await actorServiceForInlineEditTransferImpl.delete(data);
        showSuccessSnack(t('judo.action.delete.success', { defaultValue: 'Delete successful' }));
        navigateBack();
      }
    } catch (error) {
      handleError(error, undefined, data);
    }
  };
  // RefreshAction: Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewRefreshAction
  const refreshAction = async (
    queryCustomizer: InlineEditTransferQueryCustomizer,
  ): Promise<JudoRestResponse<InlineEditTransferStored>> => {
    try {
      setIsLoading(true);
      setEditMode(false);
      const response = await actorServiceForInlineEditTransferImpl.refresh(
        { __signedIdentifier: signedIdentifier } as any,
        getPageQueryCustomizer(),
      );
      const { data: result } = response;
      if (!isDraft) {
        owner.current = result;
      }
      setData(result);
      setLatestViewData(result);
      publish('Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition:refreshed', result);
      setRouterPageData(result);
      if (customActions?.postRefreshAction) {
        await customActions?.postRefreshAction(result, storeDiff, setValidation);
      }
      return response;
    } catch (error) {
      handleError(error);
      setLatestViewData(null);
      setRouterPageData(null);
      return Promise.reject(error);
    } finally {
      setIsLoading(false);
      setRefreshCounter((prevCounter) => prevCounter + 1);
    }
  };
  // UpdateAction: Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewUpdateAction
  const updateAction = async () => {
    setIsLoading(true);
    try {
      const { data: res } = await actorServiceForInlineEditTransferImpl.update(data);
      if (res) {
        showSuccessSnack(t('judo.action.save.success', { defaultValue: 'Changes saved' }));
        setValidation(new Map<keyof InlineEditTransfer, string>());
        setEditMode(false);
        await actions.refreshAction!(getPageQueryCustomizer());
      }
    } catch (error) {
      handleError<InlineEditTransfer>(error, { setValidation }, data);
    } finally {
      setIsLoading(false);
    }
  };
  // OpenAddSelectorAction: Actor/(esm/_tRJE4ISdEe-FwPSSWSnNlQ)/TabularReferenceTableAddSelectorOpenPageAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationAssociationOpenAddSelectorAction = async () => {
    const { result, data: returnedData } =
      await openInlineEditTransferInlineEditTransfer_View_EditManyAggregationAssociationTableAddSelectorPage({
        ownerData: data,
        alreadySelected: data.manyAggregationAssociation ?? [],
      });
    if (result === 'submit') {
      if (Array.isArray(returnedData) && returnedData.length) {
        storeDiff('manyAggregationAssociation', [...(data.manyAggregationAssociation || []), ...returnedData]);
      }
    }
  };

  // BulkDeleteAction: Actor/(esm/_tRJE4ISdEe-FwPSSWSnNlQ)/TabularReferenceTableBulkDeleteAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationAssociationBulkDeleteAction = async (
    selectedRows: TransferObjectHStored[],
  ): Promise<DialogResult<Array<TransferObjectHStored>>> => {
    return new Promise((resolve) => {
      const selectedIds = selectedRows.map((r) => r.__identifier);
      const newList = (data?.manyAggregationAssociation ?? []).filter(
        (c: any) => !selectedIds.includes(c.__identifier),
      );
      storeDiff('manyAggregationAssociation', newList);
      resolve({
        result: 'delete',
        data: [],
      });
    });
  };
  // BulkRemoveAction: Actor/(esm/_tRJE4ISdEe-FwPSSWSnNlQ)/TabularReferenceTableBulkRemoveAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationAssociationBulkRemoveAction = async (
    selectedRows: TransferObjectHStored[],
  ): Promise<DialogResult<Array<TransferObjectHStored>>> => {
    return new Promise((resolve) => {
      const selectedIds = selectedRows.map((r) => r.__identifier);
      const newList = (data?.manyAggregationAssociation ?? []).filter(
        (c: any) => !selectedIds.includes(c.__identifier),
      );
      storeDiff('manyAggregationAssociation', newList);
      resolve({
        result: 'submit',
        data: [],
      });
    });
  };
  // ClearAction: Actor/(esm/_tRJE4ISdEe-FwPSSWSnNlQ)/TabularReferenceTableClearAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationAssociationClearAction = async () => {
    storeDiff('manyAggregationAssociation', []);
  };
  // OpenCreateFormAction: Actor/(esm/_tRJE4ISdEe-FwPSSWSnNlQ)/TabularReferenceTableCreateAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationAssociationOpenCreateFormAction = async () => {
    const itemIndex = (data.manyAggregationAssociation || []).length; // length gives next without -1-ing it
    const {
      result,
      data: returnedData,
      openCreated,
    } = await openInlineEditTransferManyAggregationAssociationRelationFormPage({
      ownerData: produceDataAdjustedOwner(),
      ownerValidation: validate,
      isDraft: true,
      dataPath: `${dataPath ? dataPath + '.' : ''}manyAggregationAssociation[${itemIndex}]`,
    });
    if (result === 'submit' && !editMode) {
      await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
    } else if (result === 'submit-draft' && returnedData) {
      const decoratedData = {
        ...returnedData,
        __identifier: `${draftIdentifierPrefix}${uuidv4()}`,
      };
      const newData = [...(data.manyAggregationAssociation || []), decoratedData];
      storeDiff('manyAggregationAssociation', newData);
      return;
    }
    if (openCreated && returnedData) {
      await manyAggregationAssociationOpenPageAction(returnedData!);
    }
  };
  // FilterAction: Actor/(esm/_tRJE4ISdEe-FwPSSWSnNlQ)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationAssociationFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RowDeleteAction: Actor/(esm/_tRJE4ISdEe-FwPSSWSnNlQ)/TabularReferenceTableRowDeleteAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationAssociationRowDeleteAction = async (target: TransferObjectHStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        const newList = (data?.manyAggregationAssociation ?? []).filter(
          (c: any) => c.__identifier !== target.__identifier,
        );
        storeDiff('manyAggregationAssociation', newList);
      }
    } catch (error) {
      handleError<TransferObjectH>(error, undefined, target);
    }
  };
  // RemoveAction: Actor/(esm/_tRJE4ISdEe-FwPSSWSnNlQ)/TabularReferenceTableRowRemoveAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationAssociationRemoveAction = async (target: TransferObjectHStored) => {
    const newList = (data?.manyAggregationAssociation ?? []).filter((c: any) => c.__identifier !== target.__identifier);
    storeDiff('manyAggregationAssociation', newList);
  };
  // OpenPageAction: Actor/(esm/_tRJE4ISdEe-FwPSSWSnNlQ)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationAssociationOpenPageAction = async (target: TransferObjectHStored, isDraftParam?: boolean) => {
    const itemIndex = (data.manyAggregationAssociation || []).findIndex((r) => r.__identifier === target.__identifier)!;
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToInlineEditTransferManyAggregationAssociationRelationViewPage(
        ((target as TransferObjectHStored) || data).__signedIdentifier,
      ),
    );
  };
  // BulkDeleteAction: Actor/(esm/_3BEYwISbEe-FwPSSWSnNlQ)/TabularReferenceTableBulkDeleteAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationCompositionBulkDeleteAction = async (
    selectedRows: TransferObjectHStored[],
  ): Promise<DialogResult<Array<TransferObjectHStored>>> => {
    return new Promise((resolve) => {
      const selectedIds = selectedRows.map((r) => r.__identifier);
      const newList = (data?.manyAggregationComposition ?? []).filter(
        (c: any) => !selectedIds.includes(c.__identifier),
      );
      storeDiff('manyAggregationComposition', newList);
      resolve({
        result: 'delete',
        data: [],
      });
    });
  };
  // ClearAction: Actor/(esm/_3BEYwISbEe-FwPSSWSnNlQ)/TabularReferenceTableClearAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationCompositionClearAction = async () => {
    storeDiff('manyAggregationComposition', []);
  };
  // FilterAction: Actor/(esm/_3BEYwISbEe-FwPSSWSnNlQ)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationCompositionFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // InlineCreateRowAction: Actor/(esm/_3BEYwISbEe-FwPSSWSnNlQ)/TabularReferenceTableInlineCreateRowAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationCompositionInlineCreateRowAction = async (): Promise<TransferObjectH | undefined> => {
    try {
      const { data: result } = await actorServiceForInlineEditTransferImpl.getTemplateForManyAggregationComposition();
      return result;
    } catch (error) {
      console.error(error);
      return undefined;
    }
  };
  // RowDeleteAction: Actor/(esm/_3BEYwISbEe-FwPSSWSnNlQ)/TabularReferenceTableRowDeleteAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationCompositionRowDeleteAction = async (target: TransferObjectHStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        const newList = (data?.manyAggregationComposition ?? []).filter(
          (c: any) => c.__identifier !== target.__identifier,
        );
        storeDiff('manyAggregationComposition', newList);
      }
    } catch (error) {
      handleError<TransferObjectH>(error, undefined, target);
    }
  };
  // OpenPageAction: Actor/(esm/_3BEYwISbEe-FwPSSWSnNlQ)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyAggregationCompositionOpenPageAction = async (target: TransferObjectHStored, isDraftParam?: boolean) => {
    const itemIndex = (data.manyAggregationComposition || []).findIndex((r) => r.__identifier === target.__identifier)!;
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToInlineEditTransferManyAggregationCompositionRelationViewPage(
        ((target as TransferObjectHStored) || data).__signedIdentifier,
      ),
    );
  };
  // BulkDeleteAction: Actor/(esm/_tRN9YISdEe-FwPSSWSnNlQ)/TabularReferenceTableBulkDeleteAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyDerivedAggregationAssociationBulkDeleteAction = async (
    selectedRows: TransferObjectHStored[],
  ): Promise<DialogResult<Array<TransferObjectHStored>>> => {
    return new Promise((resolve) => {
      const selectedIds = selectedRows.map((r) => r.__identifier);
      const newList = (data?.manyDerivedAggregationAssociation ?? []).filter(
        (c: any) => !selectedIds.includes(c.__identifier),
      );
      storeDiff('manyDerivedAggregationAssociation', newList);
      resolve({
        result: 'delete',
        data: [],
      });
    });
  };
  // FilterAction: Actor/(esm/_tRN9YISdEe-FwPSSWSnNlQ)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyDerivedAggregationAssociationFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RowDeleteAction: Actor/(esm/_tRN9YISdEe-FwPSSWSnNlQ)/TabularReferenceTableRowDeleteAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyDerivedAggregationAssociationRowDeleteAction = async (target: TransferObjectHStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        const newList = (data?.manyDerivedAggregationAssociation ?? []).filter(
          (c: any) => c.__identifier !== target.__identifier,
        );
        storeDiff('manyDerivedAggregationAssociation', newList);
      }
    } catch (error) {
      handleError<TransferObjectH>(error, undefined, target);
    }
  };
  // OpenPageAction: Actor/(esm/_tRN9YISdEe-FwPSSWSnNlQ)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyDerivedAggregationAssociationOpenPageAction = async (
    target: TransferObjectHStored,
    isDraftParam?: boolean,
  ) => {
    const itemIndex = (data.manyDerivedAggregationAssociation || []).findIndex(
      (r) => r.__identifier === target.__identifier,
    )!;
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToInlineEditTransferManyDerivedAggregationAssociationRelationViewPage(
        ((target as TransferObjectHStored) || data).__signedIdentifier,
      ),
    );
  };
  // BulkDeleteAction: Actor/(esm/_eMz_gIScEe-FwPSSWSnNlQ)/TabularReferenceTableBulkDeleteAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyDerivedAggregationCompositionBulkDeleteAction = async (
    selectedRows: TransferObjectHStored[],
  ): Promise<DialogResult<Array<TransferObjectHStored>>> => {
    return new Promise((resolve) => {
      const selectedIds = selectedRows.map((r) => r.__identifier);
      const newList = (data?.manyDerivedAggregationComposition ?? []).filter(
        (c: any) => !selectedIds.includes(c.__identifier),
      );
      storeDiff('manyDerivedAggregationComposition', newList);
      resolve({
        result: 'delete',
        data: [],
      });
    });
  };
  // FilterAction: Actor/(esm/_eMz_gIScEe-FwPSSWSnNlQ)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyDerivedAggregationCompositionFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RowDeleteAction: Actor/(esm/_eMz_gIScEe-FwPSSWSnNlQ)/TabularReferenceTableRowDeleteAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyDerivedAggregationCompositionRowDeleteAction = async (target: TransferObjectHStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        const newList = (data?.manyDerivedAggregationComposition ?? []).filter(
          (c: any) => c.__identifier !== target.__identifier,
        );
        storeDiff('manyDerivedAggregationComposition', newList);
      }
    } catch (error) {
      handleError<TransferObjectH>(error, undefined, target);
    }
  };
  // OpenPageAction: Actor/(esm/_eMz_gIScEe-FwPSSWSnNlQ)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition)
  const manyDerivedAggregationCompositionOpenPageAction = async (
    target: TransferObjectHStored,
    isDraftParam?: boolean,
  ) => {
    const itemIndex = (data.manyDerivedAggregationComposition || []).findIndex(
      (r) => r.__identifier === target.__identifier,
    )!;
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToInlineEditTransferManyDerivedAggregationCompositionRelationViewPage(
        ((target as TransferObjectHStored) || data).__signedIdentifier,
      ),
    );
  };
  const applyManyAggregationCompositionRowEdit = async (rowData: TransferObjectHStored): Promise<any> => {
    try {
      if (rowData.__identifier!.startsWith(draftIdentifierPrefix)) {
        const updatedList = [rowData, ...(data.manyAggregationComposition || [])];
        storeDiff('manyAggregationComposition', updatedList);
      } else {
        // we need to create a copy to keep order, and because mui datagrid freezes elements, and crashes on reference updates
        const updatedList = [...(data.manyAggregationComposition || [])];
        const existingIndex = updatedList.findIndex((r) => r.__identifier === rowData.__identifier);
        updatedList[existingIndex] = {
          ...rowData,
        };
        storeDiff('manyAggregationComposition', updatedList);
      }
    } catch (error) {
      return Promise.reject(error);
    }
  };
  const applyManyDerivedAggregationAssociationRowEdit = async (rowData: TransferObjectHStored): Promise<any> => {
    try {
      if (rowData.__identifier!.startsWith(draftIdentifierPrefix)) {
        const updatedList = [rowData, ...(data.manyDerivedAggregationAssociation || [])];
        storeDiff('manyDerivedAggregationAssociation', updatedList);
      } else {
        // we need to create a copy to keep order, and because mui datagrid freezes elements, and crashes on reference updates
        const updatedList = [...(data.manyDerivedAggregationAssociation || [])];
        const existingIndex = updatedList.findIndex((r) => r.__identifier === rowData.__identifier);
        updatedList[existingIndex] = {
          ...rowData,
        };
        storeDiff('manyDerivedAggregationAssociation', updatedList);
      }
    } catch (error) {
      return Promise.reject(error);
    }
  };
  const applyManyDerivedAggregationCompositionRowEdit = async (rowData: TransferObjectHStored): Promise<any> => {
    try {
      if (rowData.__identifier!.startsWith(draftIdentifierPrefix)) {
        const updatedList = [rowData, ...(data.manyDerivedAggregationComposition || [])];
        storeDiff('manyDerivedAggregationComposition', updatedList);
      } else {
        // we need to create a copy to keep order, and because mui datagrid freezes elements, and crashes on reference updates
        const updatedList = [...(data.manyDerivedAggregationComposition || [])];
        const existingIndex = updatedList.findIndex((r) => r.__identifier === rowData.__identifier);
        updatedList[existingIndex] = {
          ...rowData,
        };
        storeDiff('manyDerivedAggregationComposition', updatedList);
      }
    } catch (error) {
      return Promise.reject(error);
    }
  };

  const actions: InlineEditTransferInlineEditTransfer_View_EditPageActions = {
    getPageTitle,
    backAction,
    cancelAction,
    deleteAction,
    refreshAction,
    updateAction,
    manyAggregationAssociationOpenAddSelectorAction,
    manyAggregationAssociationBulkDeleteAction,
    manyAggregationAssociationBulkRemoveAction,
    manyAggregationAssociationClearAction,
    manyAggregationAssociationOpenCreateFormAction,
    manyAggregationAssociationFilterAction,
    manyAggregationAssociationRowDeleteAction,
    manyAggregationAssociationRemoveAction,
    manyAggregationAssociationOpenPageAction,
    manyAggregationCompositionBulkDeleteAction,
    manyAggregationCompositionClearAction,
    manyAggregationCompositionFilterAction,
    manyAggregationCompositionInlineCreateRowAction,
    manyAggregationCompositionRowDeleteAction,
    manyAggregationCompositionOpenPageAction,
    manyDerivedAggregationAssociationBulkDeleteAction,
    manyDerivedAggregationAssociationFilterAction,
    manyDerivedAggregationAssociationRowDeleteAction,
    manyDerivedAggregationAssociationOpenPageAction,
    manyDerivedAggregationCompositionBulkDeleteAction,
    manyDerivedAggregationCompositionFilterAction,
    manyDerivedAggregationCompositionRowDeleteAction,
    manyDerivedAggregationCompositionOpenPageAction,
    getMask,
    getManyAggregationAssociationMask,
    getManyAggregationCompositionMask,
    getManyDerivedAggregationAssociationMask,
    getManyDerivedAggregationCompositionMask,
    applyManyAggregationCompositionRowEdit,
    applyManyDerivedAggregationAssociationRowEdit,
    applyManyDerivedAggregationCompositionRowEdit,
    ...(customActions ?? {}),
  };

  // ViewModel setup
  const viewModel: InlineEditTransferInlineEditTransfer_View_EditViewModel = {
    actions,
    isLoading,
    setIsLoading,
    refreshCounter,
    editMode,
    setEditMode,
    refresh,
    data,
    validation,
    setValidation,
    storeDiff,
    submit,
    isFormUpdateable,
    isFormDeleteable,
  };

  // Effect section
  useEffect(() => {
    (async () => {
      await actions.refreshAction!(getPageQueryCustomizer());
    })();
  }, [signedIdentifier]);

  useEffect(() => {
    const unsubscribe = subscribe('refresh:Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition', async () => {
      await refresh();
    });

    return () => {
      unsubscribe();
    };
  }, [subscribe, data, editMode]);

  return (
    <InlineEditTransferInlineEditTransfer_View_EditViewModelContext.Provider value={viewModel}>
      <Suspense>
        <div
          id="Actor/(esm/_rLuF8IScEe-FwPSSWSnNlQ)/AccessViewPageDefinition"
          data-page-name="Actor::inlineEditTransfer::AccessViewPage"
        />
        <PageContainerTransition>
          <InlineEditTransferInlineEditTransfer_View_EditPageContainer
            actions={actions}
            dataPath={dataPath}
            isLoading={isLoading}
            editMode={editMode}
            refreshCounter={refreshCounter}
            data={data}
            storeDiff={storeDiff}
            isFormUpdateable={isFormUpdateable}
            isFormDeleteable={isFormDeleteable}
            validation={validation}
            setValidation={setValidation}
            submit={submit}
          />
        </PageContainerTransition>
      </Suspense>
    </InlineEditTransferInlineEditTransfer_View_EditViewModelContext.Provider>
  );
}
