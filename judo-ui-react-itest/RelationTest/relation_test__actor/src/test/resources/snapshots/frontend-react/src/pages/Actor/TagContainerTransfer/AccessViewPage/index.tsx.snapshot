//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    S O U R C E
// --------------------------------
// Factory expression: #getPagesForRouting(#application)
// Path expression: 'src/pages/'+#pagePath(#self)+'/index.tsx'
// Template name: actor/src/pages/index.tsx
// Template file: actor/src/pages/index.tsx.hbs

import type { GridFilterModel } from '@mui/x-data-grid';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useTrackService } from '@pandino/react-hooks';
import { Suspense, lazy, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import type { Dispatch, FC, ReactNode, SetStateAction } from 'react';
import { useTranslation } from 'react-i18next';
import { useParams } from 'react-router-dom';
import { v4 as uuidv4 } from 'uuid';
import { useJudoNavigation } from '~/components';
import type { Filter, FilterOption } from '~/components-api';
import { useConfirmDialog, useFilterDialog } from '~/components/dialog';
import type {
  TagContainerTransferTagContainerTransfer_View_EditPageActions,
  TagContainerTransferTagContainerTransfer_View_EditPageProps,
} from '~/containers/TagContainerTransfer/TagContainerTransfer_View_Edit/types';
import { useTagContainerTransferManyAggregationCompostionRelationFormPage } from '~/dialogs/TagContainerTransfer/ManyAggregationCompostion/RelationFormPage/hooks';
import { useTagContainerTransferManyAssociationAssociationRelationFormPage } from '~/dialogs/TagContainerTransfer/ManyAssociationAssociation/RelationFormPage/hooks';
import { useTagContainerTransferManyAssociationCompositionRelationFormPage } from '~/dialogs/TagContainerTransfer/ManyAssociationComposition/RelationFormPage/hooks';
import { useTagContainerTransferTagContainerTransfer_View_EditManyAggregationAssociationTableAddSelectorPage } from '~/dialogs/TagContainerTransfer/TagContainerTransfer_View_Edit/ManyAggregationAssociation/TableAddSelectorPage/hooks';
import { useTagContainerTransferTagContainerTransfer_View_EditManyAssociationAssociationTableAddSelectorPage } from '~/dialogs/TagContainerTransfer/TagContainerTransfer_View_Edit/ManyAssociationAssociation/TableAddSelectorPage/hooks';
import { useTagContainerTransferTagContainerTransfer_View_EditManyTransientTableAddSelectorPage } from '~/dialogs/TagContainerTransfer/TagContainerTransfer_View_Edit/ManyTransient/TableAddSelectorPage/hooks';
import { useCRUDDialog, useEventBus, useSnacks, useViewData } from '~/hooks';
import { routeToTagContainerTransferManyAggregationAssociationRelationViewPage } from '~/routes';
import { routeToTagContainerTransferManyAggregationCompostionRelationViewPage } from '~/routes';
import { routeToTagContainerTransferManyAssociationAssociationRelationViewPage } from '~/routes';
import { routeToTagContainerTransferManyAssociationCompositionRelationViewPage } from '~/routes';
import { routeToTagContainerTransferManyDerivedAggregationAssociationRelationViewPage } from '~/routes';
import { routeToTagContainerTransferManyDerivedAggregationCompostionRelationViewPage } from '~/routes';
import { routeToTagContainerTransferManyDerivedAssociationAssociationRelationViewPage } from '~/routes';
import { routeToTagContainerTransferManyDerivedAssociationCompositionRelationViewPage } from '~/routes';
import { routeToTagContainerTransferManyTransientRelationViewPage } from '~/routes';
import type { JudoIdentifiable } from '~/services/data-api/common/JudoIdentifiable';
import { draftIdentifierPrefix } from '~/services/data-api/common/utils';
import type { TagContainerTransfer, TagContainerTransferStored } from '~/services/data-api/model/TagContainerTransfer';
import type { TransferObjectB, TransferObjectBStored } from '~/services/data-api/model/TransferObjectB';
import type { TransferObjectC, TransferObjectCStored } from '~/services/data-api/model/TransferObjectC';
import type { TransferObjectD, TransferObjectDStored } from '~/services/data-api/model/TransferObjectD';
import type { TransferObjectE, TransferObjectEStored } from '~/services/data-api/model/TransferObjectE';
import type { TagContainerTransferQueryCustomizer } from '~/services/data-api/rest/TagContainerTransferQueryCustomizer';
import type { TransferObjectBQueryCustomizer } from '~/services/data-api/rest/TransferObjectBQueryCustomizer';
import type { TransferObjectCQueryCustomizer } from '~/services/data-api/rest/TransferObjectCQueryCustomizer';
import type { TransferObjectDQueryCustomizer } from '~/services/data-api/rest/TransferObjectDQueryCustomizer';
import type { TransferObjectEQueryCustomizer } from '~/services/data-api/rest/TransferObjectEQueryCustomizer';
import type { JudoRestResponse } from '~/services/data-api/rest/requestResponse';
import { ActorServiceForTagContainerTransferImpl } from '~/services/data-axios/ActorServiceForTagContainerTransferImpl';
import { judoAxiosProvider } from '~/services/data-axios/JudoAxiosProvider';
import { PageContainerTransition } from '~/theme/animations';
import {
  fileHandling,
  getValue,
  processQueryCustomizer,
  setValue,
  simpleCloneDeep,
  useErrorHandler,
} from '~/utilities';
import type { DialogResult } from '~/utilities';
import {
  type TagContainerTransferTagContainerTransfer_View_EditViewModel,
  TagContainerTransferTagContainerTransfer_View_EditViewModelContext,
} from './context';
import type { TagContainerTransferTagContainerTransfer_View_EditActionsHook } from './customization';
import { ACTOR_TAG_CONTAINER_TRANSFER_ACCESS_VIEW_PAGE_ACTIONS_HOOK_INTERFACE_KEY } from './customization';
import type { TagContainerTransferTagContainerTransfer_View_EditPageActionsExtended } from './types';

const TagContainerTransferTagContainerTransfer_View_EditPageContainer = lazy(
  () =>
    import(
      '~/containers/TagContainerTransfer/TagContainerTransfer_View_Edit/TagContainerTransferTagContainerTransfer_View_EditPageContainer'
    ),
);

// XMIID: Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition
// Name: Actor::tagContainerTransfer::AccessViewPage
export default function ActorTagContainerTransferAccessViewPage() {
  const dataPath: string = '';
  const rootPageId: string | undefined = undefined;
  const isDraft = false;
  const owner = useRef<any>(null);

  // Router params section
  const { signedIdentifier } = useParams();

  // Services
  const actorServiceForTagContainerTransferImpl = useMemo(
    () => new ActorServiceForTagContainerTransferImpl(judoAxiosProvider),
    [],
  );

  // Hooks section
  const { t } = useTranslation();
  const { showSuccessSnack, showErrorSnack } = useSnacks();
  const { navigate, back: navigateBack } = useJudoNavigation();
  const { openFilterDialog } = useFilterDialog();
  const { openConfirmDialog } = useConfirmDialog();
  const { setLatestViewData, setRouterPageData } = useViewData();
  const { publish, subscribe } = useEventBus();
  const handleError = useErrorHandler();
  const openCRUDDialog = useCRUDDialog();
  const { exportFile } = fileHandling();

  // State section
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [editMode, setEditMode] = useState<boolean>(false);
  const [refreshCounter, setRefreshCounter] = useState<number>(0);
  const [data, setData] = useState<TagContainerTransferStored>({
    __signedIdentifier: signedIdentifier,
  } as TagContainerTransferStored);
  const [validation, setValidation] = useState<Map<keyof TagContainerTransfer, string>>(
    new Map<keyof TagContainerTransfer, string>(),
  );

  // Ref section

  // Callback section
  const storeDiff: (attributeName: keyof TagContainerTransfer, value: any) => void = useCallback(
    (attributeName: keyof TagContainerTransfer, value: any) => {
      setData((prevData) => ({
        ...prevData,
        [attributeName]: value,
      }));
      if (!editMode) {
        setEditMode(true);
      }
    },
    [data, editMode],
  );
  const isFormUpdateable = useCallback(() => {
    return true && typeof data?.__updateable === 'boolean' && data?.__updateable;
  }, [data]);
  const isFormDeleteable = useCallback(() => {
    return true && typeof data?.__deleteable === 'boolean' && data?.__deleteable;
  }, [data]);

  const getPageQueryCustomizer: () => TagContainerTransferQueryCustomizer = () => ({
    _mask: actions.getMask
      ? actions.getMask!()
      : '{field,manyAggregationAssociation{field},manyAggregationCompostion{field},manyDerivedAggregationAssociation{field},manyDerivedAggregationCompostion{field},manyTransient{field}}',
  });

  // Masks
  const getMask = () =>
    '{field,manyAggregationAssociation{field},manyAggregationCompostion{field},manyDerivedAggregationAssociation{field},manyDerivedAggregationCompostion{field},manyTransient{field}}';
  const getManyAggregationAssociationMask = () => '{field}';
  const getManyAggregationCompostionMask = () => '{field}';
  const getManyAssociationAssociationMask = () => '{field}';
  const getManyAssociationCompositionMask = () => '{field}';
  const getManyDerivedAggregationAssociationMask = () => '{field}';
  const getManyDerivedAggregationCompostionMask = () => '{field}';
  const getManyDerivedAssociationAssociationMask = () => '{field}';
  const getManyDerivedAssociationCompositionMask = () => '{field}';
  const getManyTransientMask = () => '{field}';

  // Private actions
  const submit = async () => {
    await updateAction();
  };
  const refresh = async (forced = false) => {
    if (!editMode || forced) {
      if (actions.refreshAction) {
        await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
      }
    }
  };
  const produceDataAdjustedOwner = useCallback(() => {
    const copy = simpleCloneDeep(owner.current);
    setValue(copy, dataPath, simpleCloneDeep(data));
    return copy;
  }, [data, owner]);

  // Validation
  const validate: (target: any) => Promise<void> = useCallback(
    async (target) => {
      await actorServiceForTagContainerTransferImpl.validateUpdate(target);
    },
    [data, actorServiceForTagContainerTransferImpl],
  );

  // Pandino Action overrides
  const { service: customActionsHook } = useTrackService<TagContainerTransferTagContainerTransfer_View_EditActionsHook>(
    `(${OBJECTCLASS}=${ACTOR_TAG_CONTAINER_TRANSFER_ACCESS_VIEW_PAGE_ACTIONS_HOOK_INTERFACE_KEY})`,
  );
  const customActions: TagContainerTransferTagContainerTransfer_View_EditPageActionsExtended | undefined =
    customActionsHook?.(data, editMode, storeDiff, refresh, submit);

  // Dialog hooks
  const openTagContainerTransferTagContainerTransfer_View_EditManyAggregationAssociationTableAddSelectorPage =
    useTagContainerTransferTagContainerTransfer_View_EditManyAggregationAssociationTableAddSelectorPage();
  const openTagContainerTransferTagContainerTransfer_View_EditManyAssociationAssociationTableAddSelectorPage =
    useTagContainerTransferTagContainerTransfer_View_EditManyAssociationAssociationTableAddSelectorPage();
  const openTagContainerTransferTagContainerTransfer_View_EditManyTransientTableAddSelectorPage =
    useTagContainerTransferTagContainerTransfer_View_EditManyTransientTableAddSelectorPage();
  const openTagContainerTransferManyAggregationCompostionRelationFormPage =
    useTagContainerTransferManyAggregationCompostionRelationFormPage();
  const openTagContainerTransferManyAssociationAssociationRelationFormPage =
    useTagContainerTransferManyAssociationAssociationRelationFormPage();
  const openTagContainerTransferManyAssociationCompositionRelationFormPage =
    useTagContainerTransferManyAssociationCompositionRelationFormPage();

  // Action section
  const getPageTitle = (data: TagContainerTransfer): string => {
    return t('TagContainerTransfer.TagContainerTransfer_View_Edit', {
      defaultValue: 'TagContainerTransfer View / Edit',
    });
  };
  // BackAction: Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewBackAction
  const backAction = async () => {
    navigateBack();
  };
  // CancelAction: Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewCancelAction
  const cancelAction = async () => {
    setValidation(new Map());
    // no need to set editMode to false, given refresh should do it implicitly
    await refresh(true);
  };
  // DeleteAction: Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewDeleteAction
  const deleteAction = async () => {
    try {
      const confirmed = await openConfirmDialog(
        'delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        await actorServiceForTagContainerTransferImpl.delete(data);
        showSuccessSnack(t('judo.action.delete.success', { defaultValue: 'Delete successful' }));
        navigateBack();
      }
    } catch (error) {
      handleError(error, undefined, data);
    }
  };
  // RefreshAction: Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewRefreshAction
  const refreshAction = async (
    queryCustomizer: TagContainerTransferQueryCustomizer,
  ): Promise<JudoRestResponse<TagContainerTransferStored>> => {
    try {
      setIsLoading(true);
      setEditMode(false);
      const response = await actorServiceForTagContainerTransferImpl.refresh(
        { __signedIdentifier: signedIdentifier } as any,
        getPageQueryCustomizer(),
      );
      const { data: result } = response;
      if (!isDraft) {
        owner.current = result;
      }
      setData(result);
      setLatestViewData(result);
      publish('Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition:refreshed', result);
      setRouterPageData(result);
      if (customActions?.postRefreshAction) {
        await customActions?.postRefreshAction(result, storeDiff, setValidation);
      }
      return response;
    } catch (error) {
      handleError(error);
      setLatestViewData(null);
      setRouterPageData(null);
      return Promise.reject(error);
    } finally {
      setIsLoading(false);
      setRefreshCounter((prevCounter) => prevCounter + 1);
    }
  };
  // UpdateAction: Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewUpdateAction
  const updateAction = async () => {
    setIsLoading(true);
    try {
      const { data: res } = await actorServiceForTagContainerTransferImpl.update(data);
      if (res) {
        showSuccessSnack(t('judo.action.save.success', { defaultValue: 'Changes saved' }));
        setValidation(new Map<keyof TagContainerTransfer, string>());
        setEditMode(false);
        await actions.refreshAction!(getPageQueryCustomizer());
      }
    } catch (error) {
      handleError<TagContainerTransfer>(error, { setValidation }, data);
    } finally {
      setIsLoading(false);
    }
  };
  // OpenAddSelectorAction: Actor/(esm/_2vWG8IF3Ee-M3fhNedgt-g)/TabularReferenceTableAddSelectorOpenPageAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationAssociationOpenAddSelectorAction = async () => {
    const { result, data: returnedData } =
      await openTagContainerTransferTagContainerTransfer_View_EditManyAggregationAssociationTableAddSelectorPage({
        ownerData: data,
        alreadySelected: data.manyAggregationAssociation ?? [],
      });
    if (result === 'submit') {
      if (Array.isArray(returnedData) && returnedData.length) {
        storeDiff('manyAggregationAssociation', [...(data.manyAggregationAssociation || []), ...returnedData]);
      }
    }
  };

  // AutocompleteAddAction: Actor/(esm/_2vWG8IF3Ee-M3fhNedgt-g)/TabularReferenceTableAutocompleteAddAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationAssociationAutocompleteAddAction = async (values: TransferObjectCStored[]) => {
    try {
      storeDiff('manyAggregationAssociation', [...(data.manyAggregationAssociation || []), ...values]);
    } catch (error) {
      handleError(error);
      return Promise.reject(error);
    } finally {
    }
  };
  // AutocompleteRangeAction: Actor/(esm/_2vWG8IF3Ee-M3fhNedgt-g)/TabularReferenceTableAutocompleteRangeAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationAssociationAutocompleteRangeAction = async (
    queryCustomizer: TransferObjectCQueryCustomizer,
  ): Promise<TransferObjectCStored[]> => {
    try {
      const { data: result } = await actorServiceForTagContainerTransferImpl.getRangeForManyAggregationAssociation(
        data,
        queryCustomizer,
      );
      return result;
    } catch (error: any) {
      handleError(error);
      return Promise.resolve([]);
    }
  };
  // BulkRemoveAction: Actor/(esm/_2vWG8IF3Ee-M3fhNedgt-g)/TabularReferenceTableBulkRemoveAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationAssociationBulkRemoveAction = async (
    selectedRows: TransferObjectCStored[],
  ): Promise<DialogResult<Array<TransferObjectCStored>>> => {
    return new Promise((resolve) => {
      const selectedIds = selectedRows.map((r) => r.__identifier);
      const newList = (data?.manyAggregationAssociation ?? []).filter(
        (c: any) => !selectedIds.includes(c.__identifier),
      );
      storeDiff('manyAggregationAssociation', newList);
      resolve({
        result: 'submit',
        data: [],
      });
    });
  };
  // ClearAction: Actor/(esm/_2vWG8IF3Ee-M3fhNedgt-g)/TabularReferenceTableClearAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationAssociationClearAction = async () => {
    storeDiff('manyAggregationAssociation', []);
  };
  // FilterAction: Actor/(esm/_2vWG8IF3Ee-M3fhNedgt-g)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationAssociationFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RemoveAction: Actor/(esm/_2vWG8IF3Ee-M3fhNedgt-g)/TabularReferenceTableRowRemoveAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationAssociationRemoveAction = async (target: TransferObjectCStored) => {
    const newList = (data?.manyAggregationAssociation ?? []).filter((c: any) => c.__identifier !== target.__identifier);
    storeDiff('manyAggregationAssociation', newList);
  };
  // OpenPageAction: Actor/(esm/_2vWG8IF3Ee-M3fhNedgt-g)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationAssociationOpenPageAction = async (target: TransferObjectCStored, isDraftParam?: boolean) => {
    const itemIndex = (data.manyAggregationAssociation || []).findIndex((r) => r.__identifier === target.__identifier)!;
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToTagContainerTransferManyAggregationAssociationRelationViewPage(
        ((target as TransferObjectCStored) || data).__signedIdentifier,
      ),
    );
  };
  // BulkDeleteAction: Actor/(esm/_2vNkEIF3Ee-M3fhNedgt-g)/TabularReferenceTableBulkDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationCompostionBulkDeleteAction = async (
    selectedRows: TransferObjectEStored[],
  ): Promise<DialogResult<Array<TransferObjectEStored>>> => {
    return new Promise((resolve) => {
      const selectedIds = selectedRows.map((r) => r.__identifier);
      const newList = (data?.manyAggregationCompostion ?? []).filter((c: any) => !selectedIds.includes(c.__identifier));
      storeDiff('manyAggregationCompostion', newList);
      resolve({
        result: 'delete',
        data: [],
      });
    });
  };
  // ClearAction: Actor/(esm/_2vNkEIF3Ee-M3fhNedgt-g)/TabularReferenceTableClearAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationCompostionClearAction = async () => {
    storeDiff('manyAggregationCompostion', []);
  };
  // OpenCreateFormAction: Actor/(esm/_2vNkEIF3Ee-M3fhNedgt-g)/TabularReferenceTableCreateAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationCompostionOpenCreateFormAction = async () => {
    const itemIndex = (data.manyAggregationCompostion || []).length; // length gives next without -1-ing it
    const {
      result,
      data: returnedData,
      openCreated,
    } = await openTagContainerTransferManyAggregationCompostionRelationFormPage({
      ownerData: produceDataAdjustedOwner(),
      ownerValidation: validate,
      isDraft: true,
      dataPath: `${dataPath ? dataPath + '.' : ''}manyAggregationCompostion[${itemIndex}]`,
    });
    if (result === 'submit' && !editMode) {
      await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
    } else if (result === 'submit-draft' && returnedData) {
      const decoratedData = {
        ...returnedData,
        __identifier: `${draftIdentifierPrefix}${uuidv4()}`,
      };
      const newData = [...(data.manyAggregationCompostion || []), decoratedData];
      storeDiff('manyAggregationCompostion', newData);
      return;
    }
    if (openCreated && returnedData) {
      await manyAggregationCompostionOpenPageAction(returnedData!);
    }
  };
  // FilterAction: Actor/(esm/_2vNkEIF3Ee-M3fhNedgt-g)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationCompostionFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RowDeleteAction: Actor/(esm/_2vNkEIF3Ee-M3fhNedgt-g)/TabularReferenceTableRowDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationCompostionRowDeleteAction = async (target: TransferObjectEStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        const newList = (data?.manyAggregationCompostion ?? []).filter(
          (c: any) => c.__identifier !== target.__identifier,
        );
        storeDiff('manyAggregationCompostion', newList);
      }
    } catch (error) {
      handleError<TransferObjectE>(error, undefined, target);
    }
  };
  // OpenPageAction: Actor/(esm/_2vNkEIF3Ee-M3fhNedgt-g)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAggregationCompostionOpenPageAction = async (target: TransferObjectEStored, isDraftParam?: boolean) => {
    const itemIndex = (data.manyAggregationCompostion || []).findIndex((r) => r.__identifier === target.__identifier)!;
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToTagContainerTransferManyAggregationCompostionRelationViewPage(
        ((target as TransferObjectEStored) || data).__signedIdentifier,
      ),
    );
  };
  // OpenAddSelectorAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableAddSelectorOpenPageAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationOpenAddSelectorAction = async () => {
    const { result, data: returnedData } =
      await openTagContainerTransferTagContainerTransfer_View_EditManyAssociationAssociationTableAddSelectorPage({
        ownerData: data,
        alreadySelected: data.manyAssociationAssociation ?? [],
      });
    if (result === 'submit') {
      if (Array.isArray(returnedData) && returnedData.length) {
        try {
          setIsLoading(true);
          await actorServiceForTagContainerTransferImpl.addManyAssociationAssociation(owner.current, returnedData);
          await refresh();
        } catch (e) {
          console.error(e);
        } finally {
          setIsLoading(false);
        }
      }
    }
  };

  // AutocompleteAddAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableAutocompleteAddAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationAutocompleteAddAction = async (values: TransferObjectBStored[]) => {
    try {
      setIsLoading(true);
      await actorServiceForTagContainerTransferImpl.addManyAssociationAssociation(owner.current, values);
      await refresh();
    } catch (error) {
      handleError(error);
      return Promise.reject(error);
    } finally {
      setIsLoading(false);
    }
  };
  // AutocompleteRangeAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableAutocompleteRangeAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationAutocompleteRangeAction = async (
    queryCustomizer: TransferObjectBQueryCustomizer,
  ): Promise<TransferObjectBStored[]> => {
    try {
      const { data: result } = await actorServiceForTagContainerTransferImpl.getRangeForManyAssociationAssociation(
        data,
        queryCustomizer,
      );
      return result;
    } catch (error: any) {
      handleError(error);
      return Promise.resolve([]);
    }
  };
  // BulkDeleteAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableBulkDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationBulkDeleteAction = async (
    selectedRows: TransferObjectBStored[],
  ): Promise<DialogResult<Array<TransferObjectBStored>>> => {
    return new Promise((resolve) => {
      openCRUDDialog<TransferObjectBStored>({
        dialogTitle: t('judo.action.bulk-delete', { defaultValue: 'Delete' }),
        itemTitleFn: (item) =>
          actions?.getManyAssociationAssociationRowRepresentation
            ? actions.getManyAssociationAssociationRowRepresentation(item)
            : item.field!,
        selectedItems: selectedRows,
        action: async (item, successHandler: () => void, errorHandler: (error: any) => void) => {
          try {
            await actorServiceForTagContainerTransferImpl.deleteManyAssociationAssociation(item);
            successHandler();
          } catch (error) {
            errorHandler(error);
          }
        },
        autoCloseOnSuccess: true,
        onClose: async (needsRefresh) => {
          if (needsRefresh) {
            if (actions.refreshAction) {
              await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
            }
            resolve({
              result: 'delete',
              data: [],
            });
          } else {
            resolve({
              result: 'close',
              data: [],
            });
          }
        },
      });
    });
  };
  // BulkRemoveAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableBulkRemoveAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationBulkRemoveAction = async (
    selectedRows: TransferObjectBStored[],
  ): Promise<DialogResult<Array<TransferObjectBStored>>> => {
    return new Promise((resolve) => {
      openCRUDDialog<TransferObjectBStored>({
        dialogTitle: t('judo.action.bulk-remove', { defaultValue: 'Remove' }),
        itemTitleFn: (item) =>
          actions?.getManyAssociationAssociationRowRepresentation
            ? actions.getManyAssociationAssociationRowRepresentation(item)
            : item.field!,
        selectedItems: selectedRows,
        action: async (item, successHandler: () => void, errorHandler: (error: any) => void) => {
          try {
            await actorServiceForTagContainerTransferImpl.removeManyAssociationAssociation(data, [item]);
            successHandler();
          } catch (error) {
            errorHandler(error);
          }
        },
        autoCloseOnSuccess: true,
        onClose: async (needsRefresh) => {
          if (needsRefresh) {
            if (actions.refreshAction) {
              await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
            }
            resolve({
              result: 'submit',
              data: [],
            });
          } else {
            resolve({
              result: 'close',
            });
          }
        },
      });
    });
  };
  // ClearAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableClearAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationClearAction = async () => {
    try {
      setIsLoading(true);
      await actorServiceForTagContainerTransferImpl.setManyAssociationAssociation(owner.current, []);
      await refresh();
    } catch (e) {
      console.error(e);
    } finally {
      setIsLoading(false);
    }
  };
  // OpenCreateFormAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableCreateAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationOpenCreateFormAction = async () => {
    const {
      result,
      data: returnedData,
      openCreated,
    } = await openTagContainerTransferManyAssociationAssociationRelationFormPage({
      ownerData: produceDataAdjustedOwner(),
      isDraft: false,
      dataPath: `${dataPath ? dataPath + '.' : ''}`,
    });
    if (result === 'submit' && !editMode) {
      await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
    } else if (result === 'submit-draft' && returnedData) {
      const decoratedData = {
        ...returnedData,
        __identifier: `${draftIdentifierPrefix}${uuidv4()}`,
      };
      const newData = [...(data.manyAssociationAssociation || []), decoratedData];
      storeDiff('manyAssociationAssociation', newData);
      return;
    }
    if (openCreated && returnedData) {
      await manyAssociationAssociationOpenPageAction(returnedData!);
    }
  };
  // FilterAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RefreshAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableRefreshAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationRefreshAction = async (
    queryCustomizer: TransferObjectBQueryCustomizer,
  ): Promise<JudoRestResponse<TransferObjectBStored[]>> => {
    const result = await actorServiceForTagContainerTransferImpl.listManyAssociationAssociation(
      { __signedIdentifier: signedIdentifier } as any,
      queryCustomizer,
    );
    return result;
  };
  // RowDeleteAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableRowDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationRowDeleteAction = async (target: TransferObjectBStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        await actorServiceForTagContainerTransferImpl.deleteManyAssociationAssociation(target);
        showSuccessSnack(t('judo.action.delete.success', { defaultValue: 'Delete successful' }));
        await refresh();
      }
    } catch (error) {
      handleError<TransferObjectB>(error, undefined, target);
    }
  };
  // RemoveAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableRowRemoveAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationRemoveAction = async (target: TransferObjectBStored) => {
    try {
      setIsLoading(true);
      await actorServiceForTagContainerTransferImpl.removeManyAssociationAssociation(data, [target]);
      await refresh();
    } catch (error) {
      handleError<TransferObjectB>(error, undefined, target);
    } finally {
      setIsLoading(false);
    }
  };
  // OpenPageAction: Actor/(esm/_XlpxEIYXEe-coskv_PjoTA)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationAssociationOpenPageAction = async (target: TransferObjectBStored, isDraftParam?: boolean) => {
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToTagContainerTransferManyAssociationAssociationRelationViewPage(
        ((target as TransferObjectBStored) || data).__signedIdentifier,
      ),
    );
  };
  // BulkDeleteAction: Actor/(esm/_2vB94IF3Ee-M3fhNedgt-g)/TabularReferenceTableBulkDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationCompositionBulkDeleteAction = async (
    selectedRows: TransferObjectDStored[],
  ): Promise<DialogResult<Array<TransferObjectDStored>>> => {
    return new Promise((resolve) => {
      openCRUDDialog<TransferObjectDStored>({
        dialogTitle: t('judo.action.bulk-delete', { defaultValue: 'Delete' }),
        itemTitleFn: (item) =>
          actions?.getManyAssociationCompositionRowRepresentation
            ? actions.getManyAssociationCompositionRowRepresentation(item)
            : item.field!,
        selectedItems: selectedRows,
        action: async (item, successHandler: () => void, errorHandler: (error: any) => void) => {
          try {
            await actorServiceForTagContainerTransferImpl.deleteManyAssociationComposition(item);
            successHandler();
          } catch (error) {
            errorHandler(error);
          }
        },
        autoCloseOnSuccess: true,
        onClose: async (needsRefresh) => {
          if (needsRefresh) {
            if (actions.refreshAction) {
              await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
            }
            resolve({
              result: 'delete',
              data: [],
            });
          } else {
            resolve({
              result: 'close',
              data: [],
            });
          }
        },
      });
    });
  };
  // OpenCreateFormAction: Actor/(esm/_2vB94IF3Ee-M3fhNedgt-g)/TabularReferenceTableCreateAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationCompositionOpenCreateFormAction = async () => {
    const {
      result,
      data: returnedData,
      openCreated,
    } = await openTagContainerTransferManyAssociationCompositionRelationFormPage({
      ownerData: produceDataAdjustedOwner(),
      isDraft: false,
      dataPath: `${dataPath ? dataPath + '.' : ''}`,
    });
    if (result === 'submit' && !editMode) {
      await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
    } else if (result === 'submit-draft' && returnedData) {
      const decoratedData = {
        ...returnedData,
        __identifier: `${draftIdentifierPrefix}${uuidv4()}`,
      };
      const newData = [...(data.manyAssociationComposition || []), decoratedData];
      storeDiff('manyAssociationComposition', newData);
      return;
    }
    if (openCreated && returnedData) {
      await manyAssociationCompositionOpenPageAction(returnedData!);
    }
  };
  // FilterAction: Actor/(esm/_2vB94IF3Ee-M3fhNedgt-g)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationCompositionFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RefreshAction: Actor/(esm/_2vB94IF3Ee-M3fhNedgt-g)/TabularReferenceTableRefreshAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationCompositionRefreshAction = async (
    queryCustomizer: TransferObjectDQueryCustomizer,
  ): Promise<JudoRestResponse<TransferObjectDStored[]>> => {
    const result = await actorServiceForTagContainerTransferImpl.listManyAssociationComposition(
      { __signedIdentifier: signedIdentifier } as any,
      queryCustomizer,
    );
    return result;
  };
  // RowDeleteAction: Actor/(esm/_2vB94IF3Ee-M3fhNedgt-g)/TabularReferenceTableRowDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationCompositionRowDeleteAction = async (target: TransferObjectDStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        await actorServiceForTagContainerTransferImpl.deleteManyAssociationComposition(target);
        showSuccessSnack(t('judo.action.delete.success', { defaultValue: 'Delete successful' }));
        await refresh();
      }
    } catch (error) {
      handleError<TransferObjectD>(error, undefined, target);
    }
  };
  // OpenPageAction: Actor/(esm/_2vB94IF3Ee-M3fhNedgt-g)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyAssociationCompositionOpenPageAction = async (target: TransferObjectDStored, isDraftParam?: boolean) => {
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToTagContainerTransferManyAssociationCompositionRelationViewPage(
        ((target as TransferObjectDStored) || data).__signedIdentifier,
      ),
    );
  };
  // BulkDeleteAction: Actor/(esm/_I-WYkIF5Ee-M3fhNedgt-g)/TabularReferenceTableBulkDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAggregationAssociationBulkDeleteAction = async (
    selectedRows: TransferObjectCStored[],
  ): Promise<DialogResult<Array<TransferObjectCStored>>> => {
    return new Promise((resolve) => {
      const selectedIds = selectedRows.map((r) => r.__identifier);
      const newList = (data?.manyDerivedAggregationAssociation ?? []).filter(
        (c: any) => !selectedIds.includes(c.__identifier),
      );
      storeDiff('manyDerivedAggregationAssociation', newList);
      resolve({
        result: 'delete',
        data: [],
      });
    });
  };
  // ExportAction: Actor/(esm/_I-WYkIF5Ee-M3fhNedgt-g)/TabularReferenceTableExportAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAggregationAssociationExportAction = async (queryCustomizer: TransferObjectCQueryCustomizer) => {
    try {
      setIsLoading(true);
      const response = await actorServiceForTagContainerTransferImpl.exportManyDerivedAggregationAssociation(
        { __signedIdentifier: signedIdentifier } as any,
        queryCustomizer,
      );

      exportFile(response);
    } catch (error) {
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  };
  // FilterAction: Actor/(esm/_I-WYkIF5Ee-M3fhNedgt-g)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAggregationAssociationFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RowDeleteAction: Actor/(esm/_I-WYkIF5Ee-M3fhNedgt-g)/TabularReferenceTableRowDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAggregationAssociationRowDeleteAction = async (target: TransferObjectCStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        const newList = (data?.manyDerivedAggregationAssociation ?? []).filter(
          (c: any) => c.__identifier !== target.__identifier,
        );
        storeDiff('manyDerivedAggregationAssociation', newList);
      }
    } catch (error) {
      handleError<TransferObjectC>(error, undefined, target);
    }
  };
  // OpenPageAction: Actor/(esm/_I-WYkIF5Ee-M3fhNedgt-g)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAggregationAssociationOpenPageAction = async (
    target: TransferObjectCStored,
    isDraftParam?: boolean,
  ) => {
    const itemIndex = (data.manyDerivedAggregationAssociation || []).findIndex(
      (r) => r.__identifier === target.__identifier,
    )!;
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToTagContainerTransferManyDerivedAggregationAssociationRelationViewPage(
        ((target as TransferObjectCStored) || data).__signedIdentifier,
      ),
    );
  };
  // BulkDeleteAction: Actor/(esm/_I-mQMIF5Ee-M3fhNedgt-g)/TabularReferenceTableBulkDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAggregationCompostionBulkDeleteAction = async (
    selectedRows: TransferObjectEStored[],
  ): Promise<DialogResult<Array<TransferObjectEStored>>> => {
    return new Promise((resolve) => {
      const selectedIds = selectedRows.map((r) => r.__identifier);
      const newList = (data?.manyDerivedAggregationCompostion ?? []).filter(
        (c: any) => !selectedIds.includes(c.__identifier),
      );
      storeDiff('manyDerivedAggregationCompostion', newList);
      resolve({
        result: 'delete',
        data: [],
      });
    });
  };
  // FilterAction: Actor/(esm/_I-mQMIF5Ee-M3fhNedgt-g)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAggregationCompostionFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RowDeleteAction: Actor/(esm/_I-mQMIF5Ee-M3fhNedgt-g)/TabularReferenceTableRowDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAggregationCompostionRowDeleteAction = async (target: TransferObjectEStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        const newList = (data?.manyDerivedAggregationCompostion ?? []).filter(
          (c: any) => c.__identifier !== target.__identifier,
        );
        storeDiff('manyDerivedAggregationCompostion', newList);
      }
    } catch (error) {
      handleError<TransferObjectE>(error, undefined, target);
    }
  };
  // OpenPageAction: Actor/(esm/_I-mQMIF5Ee-M3fhNedgt-g)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAggregationCompostionOpenPageAction = async (
    target: TransferObjectEStored,
    isDraftParam?: boolean,
  ) => {
    const itemIndex = (data.manyDerivedAggregationCompostion || []).findIndex(
      (r) => r.__identifier === target.__identifier,
    )!;
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToTagContainerTransferManyDerivedAggregationCompostionRelationViewPage(
        ((target as TransferObjectEStored) || data).__signedIdentifier,
      ),
    );
  };
  // BulkDeleteAction: Actor/(esm/_I-MnkIF5Ee-M3fhNedgt-g)/TabularReferenceTableBulkDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAssociationAssociationBulkDeleteAction = async (
    selectedRows: TransferObjectBStored[],
  ): Promise<DialogResult<Array<TransferObjectBStored>>> => {
    return new Promise((resolve) => {
      openCRUDDialog<TransferObjectBStored>({
        dialogTitle: t('judo.action.bulk-delete', { defaultValue: 'Delete' }),
        itemTitleFn: (item) =>
          actions?.getManyDerivedAssociationAssociationRowRepresentation
            ? actions.getManyDerivedAssociationAssociationRowRepresentation(item)
            : item.field!,
        selectedItems: selectedRows,
        action: async (item, successHandler: () => void, errorHandler: (error: any) => void) => {
          try {
            await actorServiceForTagContainerTransferImpl.deleteManyDerivedAssociationAssociation(item);
            successHandler();
          } catch (error) {
            errorHandler(error);
          }
        },
        autoCloseOnSuccess: true,
        onClose: async (needsRefresh) => {
          if (needsRefresh) {
            if (actions.refreshAction) {
              await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
            }
            resolve({
              result: 'delete',
              data: [],
            });
          } else {
            resolve({
              result: 'close',
              data: [],
            });
          }
        },
      });
    });
  };
  // FilterAction: Actor/(esm/_I-MnkIF5Ee-M3fhNedgt-g)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAssociationAssociationFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RefreshAction: Actor/(esm/_I-MnkIF5Ee-M3fhNedgt-g)/TabularReferenceTableRefreshAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAssociationAssociationRefreshAction = async (
    queryCustomizer: TransferObjectBQueryCustomizer,
  ): Promise<JudoRestResponse<TransferObjectBStored[]>> => {
    const result = await actorServiceForTagContainerTransferImpl.listManyDerivedAssociationAssociation(
      { __signedIdentifier: signedIdentifier } as any,
      queryCustomizer,
    );
    return result;
  };
  // RowDeleteAction: Actor/(esm/_I-MnkIF5Ee-M3fhNedgt-g)/TabularReferenceTableRowDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAssociationAssociationRowDeleteAction = async (target: TransferObjectBStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        await actorServiceForTagContainerTransferImpl.deleteManyDerivedAssociationAssociation(target);
        showSuccessSnack(t('judo.action.delete.success', { defaultValue: 'Delete successful' }));
        await refresh();
      }
    } catch (error) {
      handleError<TransferObjectB>(error, undefined, target);
    }
  };
  // OpenPageAction: Actor/(esm/_I-MnkIF5Ee-M3fhNedgt-g)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAssociationAssociationOpenPageAction = async (
    target: TransferObjectBStored,
    isDraftParam?: boolean,
  ) => {
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToTagContainerTransferManyDerivedAssociationAssociationRelationViewPage(
        ((target as TransferObjectBStored) || data).__signedIdentifier,
      ),
    );
  };
  // BulkDeleteAction: Actor/(esm/_I-e7cIF5Ee-M3fhNedgt-g)/TabularReferenceTableBulkDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAssociationCompositionBulkDeleteAction = async (
    selectedRows: TransferObjectDStored[],
  ): Promise<DialogResult<Array<TransferObjectDStored>>> => {
    return new Promise((resolve) => {
      openCRUDDialog<TransferObjectDStored>({
        dialogTitle: t('judo.action.bulk-delete', { defaultValue: 'Delete' }),
        itemTitleFn: (item) =>
          actions?.getManyDerivedAssociationCompositionRowRepresentation
            ? actions.getManyDerivedAssociationCompositionRowRepresentation(item)
            : item.field!,
        selectedItems: selectedRows,
        action: async (item, successHandler: () => void, errorHandler: (error: any) => void) => {
          try {
            await actorServiceForTagContainerTransferImpl.deleteManyDerivedAssociationComposition(item);
            successHandler();
          } catch (error) {
            errorHandler(error);
          }
        },
        autoCloseOnSuccess: true,
        onClose: async (needsRefresh) => {
          if (needsRefresh) {
            if (actions.refreshAction) {
              await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
            }
            resolve({
              result: 'delete',
              data: [],
            });
          } else {
            resolve({
              result: 'close',
              data: [],
            });
          }
        },
      });
    });
  };
  // FilterAction: Actor/(esm/_I-e7cIF5Ee-M3fhNedgt-g)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAssociationCompositionFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RefreshAction: Actor/(esm/_I-e7cIF5Ee-M3fhNedgt-g)/TabularReferenceTableRefreshAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAssociationCompositionRefreshAction = async (
    queryCustomizer: TransferObjectDQueryCustomizer,
  ): Promise<JudoRestResponse<TransferObjectDStored[]>> => {
    const result = await actorServiceForTagContainerTransferImpl.listManyDerivedAssociationComposition(
      { __signedIdentifier: signedIdentifier } as any,
      queryCustomizer,
    );
    return result;
  };
  // RowDeleteAction: Actor/(esm/_I-e7cIF5Ee-M3fhNedgt-g)/TabularReferenceTableRowDeleteAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAssociationCompositionRowDeleteAction = async (target: TransferObjectDStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        await actorServiceForTagContainerTransferImpl.deleteManyDerivedAssociationComposition(target);
        showSuccessSnack(t('judo.action.delete.success', { defaultValue: 'Delete successful' }));
        await refresh();
      }
    } catch (error) {
      handleError<TransferObjectD>(error, undefined, target);
    }
  };
  // OpenPageAction: Actor/(esm/_I-e7cIF5Ee-M3fhNedgt-g)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyDerivedAssociationCompositionOpenPageAction = async (
    target: TransferObjectDStored,
    isDraftParam?: boolean,
  ) => {
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToTagContainerTransferManyDerivedAssociationCompositionRelationViewPage(
        ((target as TransferObjectDStored) || data).__signedIdentifier,
      ),
    );
  };
  // OpenAddSelectorAction: Actor/(esm/_I-DdoIF5Ee-M3fhNedgt-g)/TabularReferenceTableAddSelectorOpenPageAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyTransientOpenAddSelectorAction = async () => {
    const { result, data: returnedData } =
      await openTagContainerTransferTagContainerTransfer_View_EditManyTransientTableAddSelectorPage({
        ownerData: data,
        alreadySelected: data.manyTransient ?? [],
      });
    if (result === 'submit') {
      if (Array.isArray(returnedData) && returnedData.length) {
        storeDiff('manyTransient', [...(data.manyTransient || []), ...returnedData]);
      }
    }
  };

  // AutocompleteAddAction: Actor/(esm/_I-DdoIF5Ee-M3fhNedgt-g)/TabularReferenceTableAutocompleteAddAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyTransientAutocompleteAddAction = async (values: TransferObjectEStored[]) => {
    try {
      storeDiff('manyTransient', [...(data.manyTransient || []), ...values]);
    } catch (error) {
      handleError(error);
      return Promise.reject(error);
    } finally {
    }
  };
  // AutocompleteRangeAction: Actor/(esm/_I-DdoIF5Ee-M3fhNedgt-g)/TabularReferenceTableAutocompleteRangeAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyTransientAutocompleteRangeAction = async (
    queryCustomizer: TransferObjectEQueryCustomizer,
  ): Promise<TransferObjectEStored[]> => {
    try {
      const { data: result } = await actorServiceForTagContainerTransferImpl.getRangeForManyTransient(
        data,
        queryCustomizer,
      );
      return result;
    } catch (error: any) {
      handleError(error);
      return Promise.resolve([]);
    }
  };
  // BulkRemoveAction: Actor/(esm/_I-DdoIF5Ee-M3fhNedgt-g)/TabularReferenceTableBulkRemoveAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyTransientBulkRemoveAction = async (
    selectedRows: TransferObjectEStored[],
  ): Promise<DialogResult<Array<TransferObjectEStored>>> => {
    return new Promise((resolve) => {
      const selectedIds = selectedRows.map((r) => r.__identifier);
      const newList = (data?.manyTransient ?? []).filter((c: any) => !selectedIds.includes(c.__identifier));
      storeDiff('manyTransient', newList);
      resolve({
        result: 'submit',
        data: [],
      });
    });
  };
  // FilterAction: Actor/(esm/_I-DdoIF5Ee-M3fhNedgt-g)/TabularReferenceTableFilterAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyTransientFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RemoveAction: Actor/(esm/_I-DdoIF5Ee-M3fhNedgt-g)/TabularReferenceTableRowRemoveAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyTransientRemoveAction = async (target: TransferObjectEStored) => {
    const newList = (data?.manyTransient ?? []).filter((c: any) => c.__identifier !== target.__identifier);
    storeDiff('manyTransient', newList);
  };
  // OpenPageAction: Actor/(esm/_I-DdoIF5Ee-M3fhNedgt-g)/TabularReferenceTableRowViewAction/(discriminator/Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition)
  const manyTransientOpenPageAction = async (target: TransferObjectEStored, isDraftParam?: boolean) => {
    const itemIndex = (data.manyTransient || []).findIndex((r) => r.__identifier === target.__identifier)!;
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToTagContainerTransferManyTransientRelationViewPage(
        ((target as TransferObjectEStored) || data).__signedIdentifier,
      ),
    );
  };

  const actions: TagContainerTransferTagContainerTransfer_View_EditPageActions = {
    getPageTitle,
    backAction,
    cancelAction,
    deleteAction,
    refreshAction,
    updateAction,
    manyAggregationAssociationOpenAddSelectorAction,
    manyAggregationAssociationAutocompleteAddAction,
    manyAggregationAssociationAutocompleteRangeAction,
    manyAggregationAssociationBulkRemoveAction,
    manyAggregationAssociationClearAction,
    manyAggregationAssociationFilterAction,
    manyAggregationAssociationRemoveAction,
    manyAggregationAssociationOpenPageAction,
    manyAggregationCompostionBulkDeleteAction,
    manyAggregationCompostionClearAction,
    manyAggregationCompostionOpenCreateFormAction,
    manyAggregationCompostionFilterAction,
    manyAggregationCompostionRowDeleteAction,
    manyAggregationCompostionOpenPageAction,
    manyAssociationAssociationOpenAddSelectorAction,
    manyAssociationAssociationAutocompleteAddAction,
    manyAssociationAssociationAutocompleteRangeAction,
    manyAssociationAssociationBulkDeleteAction,
    manyAssociationAssociationBulkRemoveAction,
    manyAssociationAssociationClearAction,
    manyAssociationAssociationOpenCreateFormAction,
    manyAssociationAssociationFilterAction,
    manyAssociationAssociationRefreshAction,
    manyAssociationAssociationRowDeleteAction,
    manyAssociationAssociationRemoveAction,
    manyAssociationAssociationOpenPageAction,
    manyAssociationCompositionBulkDeleteAction,
    manyAssociationCompositionOpenCreateFormAction,
    manyAssociationCompositionFilterAction,
    manyAssociationCompositionRefreshAction,
    manyAssociationCompositionRowDeleteAction,
    manyAssociationCompositionOpenPageAction,
    manyDerivedAggregationAssociationBulkDeleteAction,
    manyDerivedAggregationAssociationExportAction,
    manyDerivedAggregationAssociationFilterAction,
    manyDerivedAggregationAssociationRowDeleteAction,
    manyDerivedAggregationAssociationOpenPageAction,
    manyDerivedAggregationCompostionBulkDeleteAction,
    manyDerivedAggregationCompostionFilterAction,
    manyDerivedAggregationCompostionRowDeleteAction,
    manyDerivedAggregationCompostionOpenPageAction,
    manyDerivedAssociationAssociationBulkDeleteAction,
    manyDerivedAssociationAssociationFilterAction,
    manyDerivedAssociationAssociationRefreshAction,
    manyDerivedAssociationAssociationRowDeleteAction,
    manyDerivedAssociationAssociationOpenPageAction,
    manyDerivedAssociationCompositionBulkDeleteAction,
    manyDerivedAssociationCompositionFilterAction,
    manyDerivedAssociationCompositionRefreshAction,
    manyDerivedAssociationCompositionRowDeleteAction,
    manyDerivedAssociationCompositionOpenPageAction,
    manyTransientOpenAddSelectorAction,
    manyTransientAutocompleteAddAction,
    manyTransientAutocompleteRangeAction,
    manyTransientBulkRemoveAction,
    manyTransientFilterAction,
    manyTransientRemoveAction,
    manyTransientOpenPageAction,
    getMask,
    getManyAggregationAssociationMask,
    getManyAggregationCompostionMask,
    getManyAssociationAssociationMask,
    getManyAssociationCompositionMask,
    getManyDerivedAggregationAssociationMask,
    getManyDerivedAggregationCompostionMask,
    getManyDerivedAssociationAssociationMask,
    getManyDerivedAssociationCompositionMask,
    getManyTransientMask,
    ...(customActions ?? {}),
  };

  // ViewModel setup
  const viewModel: TagContainerTransferTagContainerTransfer_View_EditViewModel = {
    actions,
    isLoading,
    setIsLoading,
    refreshCounter,
    editMode,
    setEditMode,
    refresh,
    data,
    validation,
    setValidation,
    storeDiff,
    submit,
    isFormUpdateable,
    isFormDeleteable,
  };

  // Effect section
  useEffect(() => {
    (async () => {
      await actions.refreshAction!(getPageQueryCustomizer());
    })();
  }, [signedIdentifier]);

  useEffect(() => {
    const unsubscribe = subscribe('refresh:Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition', async () => {
      await refresh();
    });

    return () => {
      unsubscribe();
    };
  }, [subscribe, data, editMode]);

  return (
    <TagContainerTransferTagContainerTransfer_View_EditViewModelContext.Provider value={viewModel}>
      <Suspense>
        <div
          id="Actor/(esm/_0JzEMIF7Ee-M3fhNedgt-g)/AccessViewPageDefinition"
          data-page-name="Actor::tagContainerTransfer::AccessViewPage"
        />
        <PageContainerTransition>
          <TagContainerTransferTagContainerTransfer_View_EditPageContainer
            actions={actions}
            dataPath={dataPath}
            isLoading={isLoading}
            editMode={editMode}
            refreshCounter={refreshCounter}
            data={data}
            storeDiff={storeDiff}
            isFormUpdateable={isFormUpdateable}
            isFormDeleteable={isFormDeleteable}
            validation={validation}
            setValidation={setValidation}
            submit={submit}
          />
        </PageContainerTransition>
      </Suspense>
    </TagContainerTransferTagContainerTransfer_View_EditViewModelContext.Provider>
  );
}
