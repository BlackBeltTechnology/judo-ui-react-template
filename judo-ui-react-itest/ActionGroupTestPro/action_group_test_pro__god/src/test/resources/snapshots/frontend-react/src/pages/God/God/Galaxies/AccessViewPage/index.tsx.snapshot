//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    S O U R C E
// --------------------------------
// Factory expression: #getPagesForRouting(#application)
// Path expression: 'src/pages/'+#pagePath(#self)+'/index.tsx'
// Template name: actor/src/pages/index.tsx
// Template file: actor/src/pages/index.tsx.hbs

import type { GridFilterModel } from '@mui/x-data-grid-pro';
import { OBJECTCLASS } from '@pandino/pandino-api';
import { useTrackService } from '@pandino/react-hooks';
import { Suspense, lazy, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import type { Dispatch, FC, ReactNode, SetStateAction } from 'react';
import { useTranslation } from 'react-i18next';
import { useParams } from 'react-router-dom';
import { v4 as uuidv4 } from 'uuid';
import { useJudoNavigation } from '~/components';
import type { Filter, FilterOption } from '~/components-api';
import { useConfirmDialog, useFilterDialog } from '~/components/dialog';
import type { ViewGalaxyViewPageActions, ViewGalaxyViewPageProps } from '~/containers/View/Galaxy/View/types';
import { useViewGalaxyAstronomerRelationFormPage } from '~/dialogs/View/Galaxy/Astronomer/RelationFormPage/hooks';
import { useViewGalaxyStarsRelationFormPage } from '~/dialogs/View/Galaxy/Stars/RelationFormPage/hooks';
import { useViewGalaxyStarsRelationViewPage } from '~/dialogs/View/Galaxy/Stars/RelationViewPage/hooks';
import { useViewGalaxyViewCreateDarkMatterInputForm } from '~/dialogs/View/Galaxy/View/CreateDarkMatter/Input/Form/hooks';
import { useViewGalaxyViewCreateIntergalacticDustInputForm } from '~/dialogs/View/Galaxy/View/CreateIntergalacticDust/Input/Form/hooks';
import { useViewGalaxyViewCreateInterstellarMediumInputForm } from '~/dialogs/View/Galaxy/View/CreateInterstellarMedium/Input/Form/hooks';
import { useViewGalaxyViewGroupDiscovererAstronomerLinkSetSelectorPage } from '~/dialogs/View/Galaxy/View/Group/Discoverer/Astronomer/LinkSetSelectorPage/hooks';
import { useCRUDDialog, useEventBus, useSnacks, useViewData } from '~/hooks';
import { routeToViewGalaxyAstronomerRelationViewPage } from '~/routes';
import { routeToViewGalaxyMatterRelationTablePage } from '~/routes';
import type { JudoIdentifiable } from '~/services/data-api/common/JudoIdentifiable';
import { draftIdentifierPrefix } from '~/services/data-api/common/utils';
import type { ViewAstronomer, ViewAstronomerStored } from '~/services/data-api/model/ViewAstronomer';
import type { ViewGalaxy, ViewGalaxyStored } from '~/services/data-api/model/ViewGalaxy';
import type { ViewMatter, ViewMatterStored } from '~/services/data-api/model/ViewMatter';
import type { ViewStar, ViewStarStored } from '~/services/data-api/model/ViewStar';
import type { ViewAstronomerQueryCustomizer } from '~/services/data-api/rest/ViewAstronomerQueryCustomizer';
import type { ViewGalaxyQueryCustomizer } from '~/services/data-api/rest/ViewGalaxyQueryCustomizer';
import type { ViewMatterQueryCustomizer } from '~/services/data-api/rest/ViewMatterQueryCustomizer';
import type { ViewStarQueryCustomizer } from '~/services/data-api/rest/ViewStarQueryCustomizer';
import type { JudoRestResponse } from '~/services/data-api/rest/requestResponse';
import { GodServiceForGalaxiesImpl } from '~/services/data-axios/GodServiceForGalaxiesImpl';
import { judoAxiosProvider } from '~/services/data-axios/JudoAxiosProvider';
import { PageContainerTransition } from '~/theme/animations';
import {
  fileHandling,
  getValue,
  processQueryCustomizer,
  setValue,
  simpleCloneDeep,
  useErrorHandler,
} from '~/utilities';
import type { DialogResult } from '~/utilities';
import { type ViewGalaxyViewViewModel, ViewGalaxyViewViewModelContext } from './context';
import type { ViewGalaxyViewActionsHook } from './customization';
import { GOD_GOD_GALAXIES_ACCESS_VIEW_PAGE_ACTIONS_HOOK_INTERFACE_KEY } from './customization';
import type { ViewGalaxyViewPageActionsExtended } from './types';

const ViewGalaxyViewPageContainer = lazy(() => import('~/containers/View/Galaxy/View/ViewGalaxyViewPageContainer'));

// XMIID: God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition
// Name: God::God::galaxies::AccessViewPage
export default function GodGodGalaxiesAccessViewPage() {
  const dataPath: string = '';
  const rootPageId: string | undefined = undefined;
  const isDraft = false;
  const owner = useRef<any>(null);

  // Router params section
  const { signedIdentifier } = useParams();

  // Services
  const godServiceForGalaxiesImpl = useMemo(() => new GodServiceForGalaxiesImpl(judoAxiosProvider), []);

  // Hooks section
  const { t } = useTranslation();
  const { showSuccessSnack, showErrorSnack } = useSnacks();
  const { navigate, back: navigateBack } = useJudoNavigation();
  const { openFilterDialog } = useFilterDialog();
  const { openConfirmDialog } = useConfirmDialog();
  const { setLatestViewData, setRouterPageData } = useViewData();
  const { publish, subscribe } = useEventBus();
  const handleError = useErrorHandler();
  const openCRUDDialog = useCRUDDialog();
  const { exportFile } = fileHandling();

  // State section
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [editMode, setEditMode] = useState<boolean>(false);
  const [refreshCounter, setRefreshCounter] = useState<number>(0);
  const [data, setData] = useState<ViewGalaxyStored>({ __signedIdentifier: signedIdentifier } as ViewGalaxyStored);
  const [validation, setValidation] = useState<Map<keyof ViewGalaxy, string>>(new Map<keyof ViewGalaxy, string>());

  // Ref section

  // Callback section
  const storeDiff: (attributeName: keyof ViewGalaxy, value: any) => void = useCallback(
    (attributeName: keyof ViewGalaxy, value: any) => {
      setData((prevData) => ({
        ...prevData,
        [attributeName]: value,
      }));
      if (!editMode) {
        setEditMode(true);
      }
    },
    [data, editMode],
  );
  const isFormUpdateable = useCallback(() => {
    return true && typeof data?.__updateable === 'boolean' && data?.__updateable;
  }, [data]);
  const isFormDeleteable = useCallback(() => {
    return true && typeof data?.__deleteable === 'boolean' && data?.__deleteable;
  }, [data]);

  const getPageQueryCustomizer: () => ViewGalaxyQueryCustomizer = () => ({
    _mask: actions.getMask
      ? actions.getMask!()
      : '{constellation,darkMatter,discovered,intergalacticDust,interstellarMedium,magnitude,nakedEye,name,originOfName,real,astronomer{born,name,derivedMessage{message},messages{message},singleMessage{message}},stars{name,lastObservation{date,name},observations{date,name},planets{habitable,inhabited,name,peaceful,creatures{id,name}}}}',
  });

  // Masks
  const getMask = () =>
    '{constellation,darkMatter,discovered,intergalacticDust,interstellarMedium,magnitude,nakedEye,name,originOfName,real,astronomer{born,name,derivedMessage{message},messages{message},singleMessage{message}},stars{name,lastObservation{date,name},observations{date,name},planets{habitable,inhabited,name,peaceful,creatures{id,name}}}}';
  const getAstronomerMask = () => '{born,name,derivedMessage{message},messages{message},singleMessage{message}}';
  const getStarsMask = () =>
    '{name,lastObservation{date,name},observations{date,name},planets{habitable,inhabited,name,peaceful,creatures{id,name,punished,rewarded}}}';

  // Private actions
  const submit = async () => {
    await updateAction();
  };
  const refresh = async (forced = false) => {
    if (!editMode || forced) {
      if (actions.refreshAction) {
        await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
      }
    }
  };
  const produceDataAdjustedOwner = useCallback(() => {
    const copy = simpleCloneDeep(owner.current);
    setValue(copy, dataPath, simpleCloneDeep(data));
    return copy;
  }, [data, owner]);

  // Validation
  const validate: (target: any) => Promise<void> = useCallback(
    async (target) => {
      await godServiceForGalaxiesImpl.validateUpdate(target);
    },
    [data, godServiceForGalaxiesImpl],
  );

  // Pandino Action overrides
  const { service: customActionsHook } = useTrackService<ViewGalaxyViewActionsHook>(
    `(${OBJECTCLASS}=${GOD_GOD_GALAXIES_ACCESS_VIEW_PAGE_ACTIONS_HOOK_INTERFACE_KEY})`,
  );
  const customActions: ViewGalaxyViewPageActionsExtended | undefined = customActionsHook?.(
    data,
    editMode,
    storeDiff,
    refresh,
    submit,
  );

  // Dialog hooks
  const openViewGalaxyViewCreateDarkMatterInputForm = useViewGalaxyViewCreateDarkMatterInputForm();
  const openViewGalaxyViewCreateIntergalacticDustInputForm = useViewGalaxyViewCreateIntergalacticDustInputForm();
  const openViewGalaxyViewCreateInterstellarMediumInputForm = useViewGalaxyViewCreateInterstellarMediumInputForm();
  const openViewGalaxyViewGroupDiscovererAstronomerLinkSetSelectorPage =
    useViewGalaxyViewGroupDiscovererAstronomerLinkSetSelectorPage();
  const openViewGalaxyAstronomerRelationFormPage = useViewGalaxyAstronomerRelationFormPage();
  const openViewGalaxyStarsRelationFormPage = useViewGalaxyStarsRelationFormPage();
  const openViewGalaxyStarsRelationViewPage = useViewGalaxyStarsRelationViewPage();

  // Action section
  const getPageTitle = (data: ViewGalaxy): string => {
    return data.name as string;
  };
  // BackAction: God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewBackAction
  const backAction = async () => {
    navigateBack();
  };
  // CancelAction: God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewCancelAction
  const cancelAction = async () => {
    setValidation(new Map());
    // no need to set editMode to false, given refresh should do it implicitly
    await refresh(true);
  };
  // DeleteAction: God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewDeleteAction
  const deleteAction = async () => {
    try {
      const confirmed = await openConfirmDialog(
        'delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        await godServiceForGalaxiesImpl.delete(data);
        showSuccessSnack(t('judo.action.delete.success', { defaultValue: 'Delete successful' }));
        navigateBack();
      }
    } catch (error) {
      handleError(error, undefined, data);
    }
  };
  // RefreshAction: God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewRefreshAction
  const refreshAction = async (
    queryCustomizer: ViewGalaxyQueryCustomizer,
  ): Promise<JudoRestResponse<ViewGalaxyStored>> => {
    try {
      setIsLoading(true);
      setEditMode(false);
      const response = await godServiceForGalaxiesImpl.refresh(
        { __signedIdentifier: signedIdentifier } as any,
        getPageQueryCustomizer(),
      );
      const { data: result } = response;
      if (!isDraft) {
        owner.current = result;
      }
      setData(result);
      setLatestViewData(result);
      publish('God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition:refreshed', result);
      setRouterPageData(result);
      if (customActions?.postRefreshAction) {
        await customActions?.postRefreshAction(result, storeDiff, setValidation);
      }
      return response;
    } catch (error) {
      handleError(error);
      setLatestViewData(null);
      setRouterPageData(null);
      return Promise.reject(error);
    } finally {
      setIsLoading(false);
      setRefreshCounter((prevCounter) => prevCounter + 1);
    }
  };
  // UpdateAction: God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewUpdateAction
  const updateAction = async () => {
    setIsLoading(true);
    try {
      const { data: res } = await godServiceForGalaxiesImpl.update(data);
      if (res) {
        showSuccessSnack(t('judo.action.save.success', { defaultValue: 'Changes saved' }));
        setValidation(new Map<keyof ViewGalaxy, string>());
        setEditMode(false);
        await actions.refreshAction!(getPageQueryCustomizer());
      }
    } catch (error) {
      handleError<ViewGalaxy>(error, { setValidation }, data);
    } finally {
      setIsLoading(false);
    }
  };
  // AutocompleteRangeAction: God/(esm/_conRARMcEe2_DOUDKkB20Q)/TabularReferenceFieldLinkAutocompleteRangeAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const astronomerAutocompleteRangeAction = async (
    queryCustomizer: ViewAstronomerQueryCustomizer,
  ): Promise<ViewAstronomerStored[]> => {
    try {
      const { data: result } = await godServiceForGalaxiesImpl.getRangeForAstronomer(data, queryCustomizer);
      return result;
    } catch (error: any) {
      handleError(error);
      return Promise.resolve([]);
    }
  };
  // AutocompleteSetAction: God/(esm/_conRARMcEe2_DOUDKkB20Q)/TabularReferenceFieldLinkAutocompleteSetAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const astronomerAutocompleteSetAction = async (selected: ViewAstronomerStored) => {
    try {
      storeDiff('astronomer', selected);
    } catch (error) {
      handleError(error);
      return Promise.reject(error);
    }
  };
  // OpenCreateFormAction: God/(esm/_conRARMcEe2_DOUDKkB20Q)/TabularReferenceFieldLinkCreateAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const astronomerOpenCreateFormAction = async () => {
    const {
      result,
      data: returnedData,
      openCreated,
    } = await openViewGalaxyAstronomerRelationFormPage({
      ownerData: produceDataAdjustedOwner(),
      ownerValidation: validate,
      isDraft: true,
      dataPath: `${dataPath ? dataPath + '.' : ''}astronomer`,
    });
    if (result === 'submit' && !editMode) {
      await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
    } else if (result === 'submit-draft' && returnedData) {
      const decoratedData = {
        ...returnedData,
        __identifier: `${draftIdentifierPrefix}${uuidv4()}`,
      };
      const newData = decoratedData;
      storeDiff('astronomer', newData);
      return;
    }
    if (openCreated && returnedData) {
      await astronomerOpenPageAction(returnedData!);
    }
  };
  // RowDeleteAction: God/(esm/_conRARMcEe2_DOUDKkB20Q)/TabularReferenceFieldLinkDeleteAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const astronomerRowDeleteAction = async (target: ViewAstronomerStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        storeDiff('astronomer', null);
      }
    } catch (error) {
      handleError<ViewAstronomer>(error, undefined, target);
    }
  };
  // OpenSelectorAction: God/(esm/_conRARMcEe2_DOUDKkB20Q)/TabularReferenceFieldLinkSetSelectorOpenPageAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const astronomerOpenSetSelectorAction = async (): Promise<ViewAstronomerStored | undefined> => {
    const { result, data: returnedData } = await openViewGalaxyViewGroupDiscovererAstronomerLinkSetSelectorPage({
      ownerData: data,
      alreadySelected: data.astronomer ? [data.astronomer] : [],
    });
    if (result === 'submit') {
      if (Array.isArray(returnedData) && returnedData.length) {
        try {
          storeDiff('astronomer', returnedData[0]);
          return returnedData[0];
        } catch (error) {
          console.error(error);
          return undefined;
        }
      }
    }
    return undefined;
  };
  // UnsetAction: God/(esm/_conRARMcEe2_DOUDKkB20Q)/TabularReferenceFieldLinkUnsetAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const astronomerUnsetAction = async (target: ViewAstronomer | ViewAstronomerStored) => {
    storeDiff('astronomer', null);
  };
  // OpenPageAction: God/(esm/_conRARMcEe2_DOUDKkB20Q)/TabularReferenceFieldLinkViewAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const astronomerOpenPageAction = async (target: ViewAstronomerStored, isDraftParam?: boolean) => {
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(
      routeToViewGalaxyAstronomerRelationViewPage(((target as ViewAstronomerStored) || data).__signedIdentifier),
    );
  };
  // BulkDeleteAction: God/(esm/_8AxbAE7tEeycO-gUAWxcVg)/TabularReferenceTableBulkDeleteAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const starsBulkDeleteAction = async (
    selectedRows: ViewStarStored[],
  ): Promise<DialogResult<Array<ViewStarStored>>> => {
    return new Promise((resolve) => {
      const selectedIds = selectedRows.map((r) => r.__identifier);
      const newList = (data?.stars ?? []).filter((c: any) => !selectedIds.includes(c.__identifier));
      storeDiff('stars', newList);
      resolve({
        result: 'delete',
        data: [],
      });
    });
  };
  // OpenCreateFormAction: God/(esm/_8AxbAE7tEeycO-gUAWxcVg)/TabularReferenceTableCreateAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const starsOpenCreateFormAction = async () => {
    const itemIndex = (data.stars || []).length; // length gives next without -1-ing it
    const {
      result,
      data: returnedData,
      openCreated,
    } = await openViewGalaxyStarsRelationFormPage({
      ownerData: produceDataAdjustedOwner(),
      ownerValidation: validate,
      isDraft: true,
      dataPath: `${dataPath ? dataPath + '.' : ''}stars[${itemIndex}]`,
    });
    if (result === 'submit' && !editMode) {
      await actions.refreshAction!(processQueryCustomizer(getPageQueryCustomizer()));
    } else if (result === 'submit-draft' && returnedData) {
      const decoratedData = {
        ...returnedData,
        __identifier: `${draftIdentifierPrefix}${uuidv4()}`,
      };
      const newData = [...(data.stars || []), decoratedData];
      storeDiff('stars', newData);
      return;
    }
    if (openCreated && returnedData) {
      await starsOpenPageAction(returnedData!);
    }
  };
  // ExportAction: God/(esm/_8AxbAE7tEeycO-gUAWxcVg)/TabularReferenceTableExportAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const starsExportAction = async (queryCustomizer: ViewStarQueryCustomizer) => {
    try {
      setIsLoading(true);
      const response = await godServiceForGalaxiesImpl.exportStars(
        { __signedIdentifier: signedIdentifier } as any,
        queryCustomizer,
      );

      exportFile(response);
    } catch (error) {
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  };
  // FilterAction: God/(esm/_8AxbAE7tEeycO-gUAWxcVg)/TabularReferenceTableFilterAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const starsFilterAction = async (
    id: string,
    filterOptions: FilterOption[],
    model?: GridFilterModel,
    filters?: Filter[],
  ): Promise<{ model?: GridFilterModel; filters?: Filter[] }> => {
    const newFilters = await openFilterDialog(id, filterOptions, filters);
    return {
      filters: newFilters,
    };
  };
  // RowDeleteAction: God/(esm/_8AxbAE7tEeycO-gUAWxcVg)/TabularReferenceTableRowDeleteAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const starsRowDeleteAction = async (target: ViewStarStored) => {
    try {
      const confirmed = await openConfirmDialog(
        'row-delete-action',
        t('judo.modal.confirm.confirm-delete', {
          defaultValue: 'Are you sure you would like to delete the selected element?',
        }),
        t('judo.modal.confirm.confirm-title', { defaultValue: 'Confirm action' }),
      );
      if (confirmed) {
        const newList = (data?.stars ?? []).filter((c: any) => c.__identifier !== target.__identifier);
        storeDiff('stars', newList);
      }
    } catch (error) {
      handleError<ViewStar>(error, undefined, target);
    }
  };
  // OpenPageAction: God/(esm/_8AxbAE7tEeycO-gUAWxcVg)/TabularReferenceTableRowViewAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const starsOpenPageAction = async (target: ViewStarStored, isDraftParam?: boolean) => {
    const itemIndex = (data.stars || []).findIndex((r) => r.__identifier === target.__identifier)!;
    if (isDraftParam) {
      const { result, data: returnedData } = await openViewGalaxyStarsRelationViewPage({
        ownerData: produceDataAdjustedOwner(),
        isDraft: true,
        ownerValidation: validate,
        dataPath: `${dataPath ? dataPath + '.' : ''}stars[${itemIndex!}]`,
        rootPageId: rootPageId ?? 'God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition',
      });
      // we might need to differentiate result handling between operation inputs and crud relation creates
      if (result === 'submit-draft' && returnedData) {
        const existingIndex = (data.stars || []).findIndex(
          (r: { __identifier?: string }) => r.__identifier === returnedData.__identifier,
        );
        if (existingIndex > -1) {
          // we need to create a copy to keep order, and because mui datagrid freezes elements, and crashes on reference updates
          const updatedList = [...(data.stars || [])];
          updatedList[existingIndex] = {
            ...returnedData,
          };
          storeDiff('stars', updatedList);
        }
        return;
      }
      if (result === 'delete' && returnedData) {
        const existingIndex = (data.stars || []).findIndex(
          (r: { __identifier?: string }) => r.__identifier === returnedData.__identifier,
        );
        if (existingIndex > -1) {
          // we need to create a copy to keep order, and because mui datagrid freezes elements, and crashes on reference updates
          const updatedList = [...(data.stars || [])];
          updatedList.splice(existingIndex, 1);
          storeDiff('stars', updatedList);
        }
        return;
      }
      if (result === 'close') {
        return;
      }
    } else {
      await openViewGalaxyStarsRelationViewPage({
        ownerData: target!,
      });
      await refresh();
    }
  };
  // OpenOperationInputFormAction: God/(esm/_5NwrQFyrEeylCdga_wJIBQ)/OperationFormCallAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const createDarkMatterAction = async (isDraft?: boolean, ownerValidation?: (target: any) => Promise<void>) => {
    const { result, data: returnedData } = await openViewGalaxyViewCreateDarkMatterInputForm({
      ownerData: data,
    });
    if (result === 'submit' && !editMode) {
      await refresh();
    }
  };
  // OpenOperationInputFormAction: God/(esm/_5Nx5YFyrEeylCdga_wJIBQ)/OperationFormCallAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const createIntergalacticDustAction = async (isDraft?: boolean, ownerValidation?: (target: any) => Promise<void>) => {
    const { result, data: returnedData } = await openViewGalaxyViewCreateIntergalacticDustInputForm({
      ownerData: data,
    });
    if (result === 'submit' && !editMode) {
      await refresh();
    }
  };
  // OpenOperationInputFormAction: God/(esm/_5Nx5YVyrEeylCdga_wJIBQ)/OperationFormCallAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const createInterstellarMediumAction = async (
    isDraft?: boolean,
    ownerValidation?: (target: any) => Promise<void>,
  ) => {
    const { result, data: returnedData } = await openViewGalaxyViewCreateInterstellarMediumInputForm({
      ownerData: data,
    });
    if (result === 'submit' && !editMode) {
      await refresh();
    }
  };
  // OpenPageAction: God/(esm/_8A3hoE7tEeycO-gUAWxcVg)/TabularReferenceFieldButtonOpenPageAction/(discriminator/God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition)
  const matterOpenPageAction = async (target: ViewMatterStored, isDraftParam?: boolean) => {
    // if the `target` is missing we are likely navigating to a relation table page, in which case we need the owner's id
    navigate(routeToViewGalaxyMatterRelationTablePage(((target as ViewMatterStored) || data).__signedIdentifier));
  };

  const actions: ViewGalaxyViewPageActions = {
    getPageTitle,
    backAction,
    cancelAction,
    deleteAction,
    refreshAction,
    updateAction,
    astronomerAutocompleteRangeAction,
    astronomerAutocompleteSetAction,
    astronomerOpenCreateFormAction,
    astronomerRowDeleteAction,
    astronomerOpenSetSelectorAction,
    astronomerUnsetAction,
    astronomerOpenPageAction,
    starsBulkDeleteAction,
    starsOpenCreateFormAction,
    starsExportAction,
    starsFilterAction,
    starsRowDeleteAction,
    starsOpenPageAction,
    createDarkMatterAction,
    createIntergalacticDustAction,
    createInterstellarMediumAction,
    matterOpenPageAction,
    getMask,
    getAstronomerMask,
    getStarsMask,
    ...(customActions ?? {}),
  };

  // ViewModel setup
  const viewModel: ViewGalaxyViewViewModel = {
    actions,
    isLoading,
    setIsLoading,
    refreshCounter,
    editMode,
    setEditMode,
    refresh,
    data,
    validation,
    setValidation,
    storeDiff,
    submit,
    isFormUpdateable,
    isFormDeleteable,
  };

  // Effect section
  useEffect(() => {
    (async () => {
      await actions.refreshAction!(getPageQueryCustomizer());
    })();
  }, []);

  useEffect(() => {
    const unsubscribe = subscribe('refresh:God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition', async () => {
      await refresh();
    });

    return () => {
      unsubscribe();
    };
  }, [subscribe, data, editMode]);

  return (
    <ViewGalaxyViewViewModelContext.Provider value={viewModel}>
      <Suspense>
        <div
          id="God/(esm/_4pyPkM_cEe6fibzd7gNETg)/AccessViewPageDefinition"
          data-page-name="God::God::galaxies::AccessViewPage"
        />
        <PageContainerTransition>
          <ViewGalaxyViewPageContainer
            actions={actions}
            dataPath={dataPath}
            isLoading={isLoading}
            editMode={editMode}
            refreshCounter={refreshCounter}
            data={data}
            storeDiff={storeDiff}
            isFormUpdateable={isFormUpdateable}
            isFormDeleteable={isFormDeleteable}
            validation={validation}
            setValidation={setValidation}
            submit={submit}
          />
        </PageContainerTransition>
      </Suspense>
    </ViewGalaxyViewViewModelContext.Provider>
  );
}
